321
00:13:53,280 --> 00:13:57,310
Thao Tran
Nhắc lại, ta chỉ tính tới trước ký tự ở vị trí kết thúc 
chứ không bao gồm nó.

322
00:13:57,310 --> 00:13:59,310
Cái này có thể sẽ hơi lạ.

323
00:13:59,310 --> 00:14:02,330
Tất nhiên, khi nhớ được ký tự đầu tiên ở vị trí 0

324
00:14:02,330 --> 00:14:04,140
bạn cũng sẽ nhớ được là tính tới trước chứ không bao gồm.

325
00:14:04,140 --> 00:14:04,640
Rồi.

326
00:14:04,640 --> 00:14:08,560

327
00:14:08,560 --> 00:14:14,110
Nếu ta bỏ không viết vị trí bắt đầu hay kết thúc

328
00:14:14,110 --> 00:14:17,690
thì nó sẽ mặc định là đầu chuỗi hoặc cuối chuỗi.

329
00:14:17,690 --> 00:14:21,570
Vậy tính tới nhưng không bao gồm vị trí 2 là "Mo".

330
00:14:21,570 --> 00:14:30,640
[8:] nghĩa là bắt đầu từ 8 đến cuối chuỗi,

331
00:14:30,640 --> 00:14:32,420
đoạn đó là "thon".

332
00:14:32,420 --> 00:14:34,590
Còn cái này nghĩa là từ đầu chuỗi đến hết,

333
00:14:34,590 --> 00:14:38,120
tức là toàn bộ chuỗi "Monty Python".

334
00:14:38,120 --> 00:14:40,860
Về nối chuỗi thì ta đã thực hiện rồi.

335
00:14:40,860 --> 00:14:45,020
Tôi chỉ nhấn mạnh lại là toán tử nối chuỗi

336
00:14:45,020 --> 00:14:48,740
không tạo thêm dấu cách.

337
00:14:48,740 --> 00:14:51,920
Muốn có dấu cách bạn phải tự thêm vào.

338
00:14:51,920 --> 00:14:55,156
Ở đây o và T viết liền nhau.

339
00:14:55,156 --> 00:14:57,280
Nhưng ở đây giữa o và T có dấu cách

340
00:14:57,280 --> 00:14:59,660
vì ta đã cộng thêm nó vào.

341
00:14:59,660 --> 00:15:02,270
Như vậy ta có thể nối nhiều thứ với nhau.

342
00:15:02,270 --> 00:15:04,590
Có thể thêm khoảng trống tùy thích.

343
00:15:04,590 --> 00:15:07,789

344
00:15:07,789 --> 00:15:09,830
Một điều nữa là bạn cũng có thể đặt câu hỏi

345
00:15:09,830 --> 00:15:10,470
với các chuỗi.

346
00:15:10,470 --> 00:15:14,610
Dùng toán tử "in" để tra cứu chuỗi.

347
00:15:14,610 --> 00:15:17,820
"in" ở đây được dùng khác với trong vòng lặp for.

348
00:15:17,820 --> 00:15:20,200
Ở đây nó là phép toán logic

349
00:15:20,200 --> 00:15:23,190
đặt câu hỏi dạng như lớn hơn hay nhỏ hơn.

350
00:15:23,190 --> 00:15:25,120
Ta có một biểu thức.

351
00:15:25,120 --> 00:15:26,950
fruit vẫn bằng "banana".

352
00:15:26,950 --> 00:15:30,250
Trong biến fruit có chữ n không?

353
00:15:30,250 --> 00:15:31,720
Câu trả lời là có.

354
00:15:31,720 --> 00:15:32,584
True.

355
00:15:32,584 --> 00:15:33,875
Vậy đây là một phép toán logic,

356
00:15:33,875 --> 00:15:34,780
một câu hỏi.

357
00:15:34,780 --> 00:15:36,620
Dạng True hoặc False.

358
00:15:36,620 --> 00:15:38,270
Trong biến fruit có chữ m không?

359
00:15:38,270 --> 00:15:39,820
Không, False.

360
00:15:39,820 --> 00:15:42,520
Ta có thể hỏi một chuỗi chứ không chỉ một chữ cái.

361
00:15:42,520 --> 00:15:44,420
Trong biến fruit có chuỗi "n-a-n" không?

362
00:15:44,420 --> 00:15:46,320
Đáp án là True.

363
00:15:46,320 --> 00:15:50,730
Ta có thể cho nó vào câu lệnh if, v.v.

364
00:15:50,730 --> 00:15:53,860
Vậy đây là một biểu thức logic có thể cho vào

365
00:15:53,860 --> 00:15:57,090
câu lệnh if, while, v.v.

366
00:15:57,090 --> 00:16:00,565
Nó là biểu thức logic trả kết quả True hoặc False.

367
00:16:00,565 --> 00:16:03,550

368
00:16:03,550 --> 00:16:05,680
Ta cũng có thể làm phép so sánh.

369
00:16:05,680 --> 00:16:10,940
Trong các phép toán so sánh 
thì so sánh bằng khá dễ hiểu rồi

370
00:16:10,940 --> 00:16:13,790
Nhỏ hơn và lớn hơn thì còn tùy theo

371
00:16:13,790 --> 00:16:15,410
ngôn ngữ bạn đang dùng trên Python.

372
00:16:15,410 --> 00:16:17,840
Nếu bạn dùng bộ ký tự Latin thì

373
00:16:17,840 --> 00:16:22,000
thứ tự chữ trong bảng chữ cái rất quan trọng,

374
00:16:22,000 --> 00:16:22,500
các bạn biết rồi đấy.

375
00:16:22,500 --> 00:16:24,291
Nhưng nếu bạn đang dùng bộ ký tự khác,

376
00:16:24,291 --> 00:16:26,510
Python phân biệt được các bộ ký tự khác nhau

377
00:16:26,510 --> 00:16:30,490
và nó sẽ xếp các chuỗi theo thuật toán sắp xếp

378
00:16:30,490 --> 00:16:33,130
của từng bộ ký tự.

379
00:16:33,130 --> 00:16:36,572
Vậy ta có thể so sánh bằng, nhỏ hơn

380
00:16:36,572 --> 00:16:37,280
hoặc lớn hơn.

381
00:16:37,280 --> 00:16:39,740
Ta đã thấy tương tự trong các bài giảng trước.

382
00:16:39,740 --> 00:16:42,040
Ta đã dùng đến các phép đó.

383
00:16:42,040 --> 00:16:46,310
Vậy ngoài các thao tác cơ bản với chuỗi,

384
00:16:46,310 --> 00:16:52,920
Python cũng có một thư viện chứa nhiều

385
00:16:52,920 --> 00:16:55,420
tính năng dựng sẵn.

386
00:16:55,420 --> 00:17:00,190
Các chuỗi đã có sẵn những

387
00:17:00,190 --> 00:17:03,410
tính năng này.

388
00:17:03,410 --> 00:17:05,429
Ta làm thật chậm nhé.

389
00:17:05,429 --> 00:17:07,095
Ta có biến greet,

390
00:17:07,095 --> 00:17:10,060
ta gán vào đó chuỗi "Hello, Bob".

391
00:17:10,060 --> 00:17:13,670
Như vậy biến greet có dạng chuỗi

392
00:17:13,670 --> 00:17:16,579
với giá trị là "Hello Bob".

393
00:17:16,579 --> 00:17:19,819
Nhưng ta có thể gọi ra các tính năng

394
00:17:19,819 --> 00:17:22,050
bên trong giá trị này.

395
00:17:22,050 --> 00:17:26,690
Ta có thể viết greet.lower()

396
00:17:26,690 --> 00:17:29,546
Nó sẽ gọi ra một tính năng của biến greet,

397
00:17:29,546 --> 00:17:30,670
của tất cả các chuỗi.

398
00:17:30,670 --> 00:17:33,770
greet chứa một chuỗi ký tự tức là

399
00:17:33,770 --> 00:17:35,350
khi ta bảo hãy gọi biến greet

400
00:17:35,350 --> 00:17:38,090
thì chương trình sẽ đưa ra cái ta cần.

401
00:17:38,090 --> 00:17:40,817
Như ở đây là in greet ra thành "Hello Bob".

402
00:17:40,817 --> 00:17:42,400
Hoặc ta có thể yêu cầu đưa ra biến greet viết thường.

403
00:17:42,400 --> 00:17:47,460
Nó không chuyển greet thành dạng viết thường.

404
00:17:47,460 --> 00:17:51,050
Mà nó đưa ra phiên bản viết thường của chuỗi "Hello Bob".

405
00:17:51,050 --> 00:17:54,690
Vậy zap sẽ bằng "hello bob", viết thường toàn bộ.

406
00:17:54,690 --> 00:17:56,190
Nó không thay đổi gì greet,

407
00:17:56,190 --> 00:17:57,390
đúng chưa?

408
00:17:57,390 --> 00:18:01,157
Ta cũng có thể thêm .lower() vào sau các hằng.

409
00:18:01,157 --> 00:18:02,490
Vì bất kỳ lý do nào đó.

410
00:18:02,490 --> 00:18:06,300
Hi There viết hoa các chữ cái đầu thêm .lower()

411
00:18:06,300 --> 00:18:07,550
sẽ thành "hi there".

412
00:18:07,550 --> 00:18:11,540
Chuỗi nào cũng có tính năng này.

413
00:18:11,540 --> 00:18:16,690
Cả biến và hằng chuỗi đều có những tính năng

414
00:18:16,690 --> 00:18:17,870
dựng sẵn như vậy.

415
00:18:17,870 --> 00:18:21,160
Mọi chuỗi dù là hằng hay là biến

416
00:18:21,160 --> 00:18:23,760
đều làm được như thế.

417
00:18:23,760 --> 00:18:25,400
Không thay đổi gì biến

418
00:18:25,400 --> 00:18:28,190
mà chỉ trả cho ta một bản sao.

419
00:18:28,190 --> 00:18:33,220
Trong Python còn có một hàm gọi là dir

420
00:18:33,220 --> 00:18:37,505
dùng để đặt câu hỏi kiểu:

421
00:18:37,505 --> 00:18:38,937
Ê, đây là biến stuff.

422
00:18:38,937 --> 00:18:39,770
Có giá trị là "Hello world".

423
00:18:39,770 --> 00:18:42,740
Biến stuff là

424
00:18:42,740 --> 00:18:46,880
một chuỗi.

425
00:18:46,880 --> 00:18:48,240
Ta có thể hỏi, ê mày là cái gì?

426
00:18:48,240 --> 00:18:49,660
Tôi là một chuỗi.

427
00:18:49,660 --> 00:18:53,049
dir là hàm dựng sẵn trong Python để hỏi:

428
00:18:53,049 --> 00:18:55,340
Với cái này tôi có thể dùng những

429
00:18:55,340 --> 00:18:56,700
tính năng dựng sẵn nào?

430
00:18:56,700 --> 00:18:57,760
Chúng đây.

431
00:18:57,760 --> 00:18:59,920
Cả một đống luôn.

432
00:18:59,920 --> 00:19:03,870
Bạn cũng có thể tìm xem danh mục Python online.

433
00:19:03,870 --> 00:19:08,441
Ở trang web của Python, bạn sẽ thấy

434
00:19:08,441 --> 00:19:09,690
danh sách tất cả những cái này.

435
00:19:09,690 --> 00:19:11,740
Ngoài ra ở đó còn có dãy lệnh gọi,

436
00:19:11,740 --> 00:19:13,770
tham số, v.v.

437
00:19:13,770 --> 00:19:15,600
Bạn có thể tra cứu và

438
00:19:15,600 --> 00:19:17,900
đọc thêm về mấy cái này.

439
00:19:17,900 --> 00:19:19,980
Ở đây tôi lấy ví dụ vài cái.

440
00:19:19,980 --> 00:19:23,450
capitalize viết hoa các ký tự đầu tiên.

441
00:19:23,450 --> 00:19:25,870
Rồi center, endswith, find.

442
00:19:25,870 --> 00:19:26,655
Rồi các hàm strip.

443
00:19:26,655 --> 00:19:29,280
Tôi sẽ nói qua một số cái

444
00:19:29,280 --> 00:19:30,530
hay cần dùng.

445
00:19:30,530 --> 00:19:32,300
Các bạn nên xem qua

446
00:19:32,300 --> 00:19:33,800
về những hàm sau.

447
00:19:33,800 --> 00:19:37,550
Đây là một số hàm ta sẽ sớm dùng đến.

448
00:19:37,550 --> 00:19:41,100
Hàm find tương tự như hàm in.

449
00:19:41,100 --> 00:19:44,750
Nhưng nó báo cho ta là nó tìm thấy cái này

450
00:19:44,750 --> 00:19:47,100
ở đâu.

451
00:19:47,100 --> 00:19:49,552
Ví dụ, ta gán fruit là "banana".

452
00:19:49,552 --> 00:19:51,010
Tôi đặt biến pos,

453
00:19:51,010 --> 00:19:52,926
đây là biến số nguyên, pos = fruit.find('na')

454
00:19:52,926 --> 00:19:55,340
Như vậy có nghĩa là

455
00:19:55,340 --> 00:19:58,140
hãy tìm trong biến fruit này.

456
00:19:58,140 --> 00:20:01,160
Tìm đến khi chuỗi n-a xuất hiện lần đầu tiên.

457
00:20:01,160 --> 00:20:03,000
Tìm tìm tìm, a!

458
00:20:03,000 --> 00:20:04,300
Thấy rồi.

459
00:20:04,300 --> 00:20:05,680
Trả kết quả nào.

460
00:20:05,680 --> 00:20:07,990
Tôi nhận được số 2.

461
00:20:07,990 --> 00:20:10,540
2 chính là vị trí tìm thấy chuỗi đó.

462
00:20:10,540 --> 00:20:12,440
Vậy chức năng của find là xem 

463
00:20:12,440 --> 00:20:13,820
cái cần tìm nằm ở đâu trong chuỗi.

464
00:20:13,820 --> 00:20:16,930
Trường hợp không tìm thấy, ví dụ như ta tìm chữ z.

465
00:20:16,930 --> 00:20:19,530
Tìm tìm tìm...chả thấy z đâu.

466
00:20:19,530 --> 00:20:21,602
Lúc đó kết quả trả lại là -1.

467
00:20:21,602 --> 00:20:26,090
Nhắc lại, đây là một trong rất nhiều hàm dựng sẵn

468
00:20:26,090 --> 00:20:30,130
cho các chuỗi như tìm chuỗi con,

469
00:20:30,130 --> 00:20:35,440
tìm ký tự hay chuỗi trong một chuỗi khác.

470
00:20:35,440 --> 00:20:36,560
Có hàm để viết thường.

471
00:20:36,560 --> 00:20:38,030
Hàm để viết in hoa.

472
00:20:38,030 --> 00:20:40,740
Gọi là hàm "gào lên" có khi hay hơn.

473
00:20:40,740 --> 00:20:43,200
upper tức là trả cho tôi một bản sao viết in hoa

474
00:20:43,200 --> 00:20:44,020
của biến này.

475
00:20:44,020 --> 00:20:46,830
"Hello Bob" sẽ thành "HELLO BOB"!

476
00:20:46,830 --> 00:20:49,311
Còn viết thường hết là "hello bob".

477
00:20:49,311 --> 00:20:49,810
Được chưa?

478
00:20:49,810 --> 00:20:52,970
Vậy đó là cách để lấy bản sao in hoa

479
00:20:52,970 --> 00:20:55,644
hoặc viết thường của chuỗi.

480
00:20:55,644 --> 00:20:57,310
Có thể bạn thấy nó chả để làm gì.

