179
00:07:35,320 --> 00:07:37,150
https://youtu.be/6KgArgGi6Mk
We say done, and it's done.

180
00:07:37,150 --> 00:07:40,920
So when we say done, it comes
out and finishes the loop,

181
00:07:40,920 --> 00:07:43,540
and that's the end
of the program.

182
00:07:43,540 --> 00:07:48,190
So to look at this
in some more detail,

183
00:07:48,190 --> 00:07:51,760
the first time it comes
in, does the raw input.

184
00:07:51,760 --> 00:07:53,980
Because true is true,
so it's going to run it.

185
00:07:53,980 --> 00:07:57,409
And then we entered hello there.

186
00:07:57,409 --> 00:07:59,950
It checks to see what we entered
is equal to the string done.

187
00:07:59,950 --> 00:08:03,680
It is not, so it skips
and it does the print.

188
00:08:03,680 --> 00:08:06,560
We do this one more
time, we type finished.

189
00:08:06,560 --> 00:08:09,579
And then the line is not done.

190
00:08:09,579 --> 00:08:11,620
Variable line does not
have the value done in it.

191
00:08:11,620 --> 00:08:12,740
So we print that.

192
00:08:12,740 --> 00:08:14,390
We come in one more time.

193
00:08:14,390 --> 00:08:16,460
But this time this is true.

194
00:08:16,460 --> 00:08:18,850
So it goes and
executes the break,

195
00:08:18,850 --> 00:08:21,190
and then it escapes the loop.

196
00:08:21,190 --> 00:08:26,310
And so you can think of, here
is the body of this loop,

197
00:08:26,310 --> 00:08:29,680
because that's where the
indentation starts and ends.

198
00:08:29,680 --> 00:08:34,499
The break says break me out of
the current loop that I'm in

199
00:08:34,499 --> 00:08:37,039
and get to that
next line that has

200
00:08:37,039 --> 00:08:38,250
the same indent as the while.

201
00:08:38,250 --> 00:08:42,010
So whatever it is, break says
we are done with this loop.

202
00:08:42,010 --> 00:08:45,340
When that statement executes,
we are done with the loop.

203
00:08:45,340 --> 00:08:46,720
We're finished with the loop.

204
00:08:46,720 --> 00:08:48,870
It'll run until that
executes, because we've

205
00:08:48,870 --> 00:08:53,200
got this set to be while true.

206
00:08:53,200 --> 00:08:57,120
OK, so this is a simple
way to draw this.

207
00:08:57,120 --> 00:09:02,560
Break is a jump to the statement
immediately following the loop.

208
00:09:02,560 --> 00:09:04,090
If you really want
to picture this,

209
00:09:04,090 --> 00:09:06,830
I think of this as like
a Star Trek transporter.

210
00:09:06,830 --> 00:09:11,220
Where you come in to break,
and then your molecules

211
00:09:11,220 --> 00:09:13,130
are sent to the four
corners of the universe,

212
00:09:13,130 --> 00:09:16,040
and you reassemble
outside of the loop.

213
00:09:16,040 --> 00:09:18,970
And so if we look at this
outside of my little roadmap

214
00:09:18,970 --> 00:09:22,150
version of these
things, our while loop

215
00:09:22,150 --> 00:09:24,060
is going to run for
awhile, yadda yadda.

216
00:09:24,060 --> 00:09:25,840
There can actually be
more than one break,

217
00:09:25,840 --> 00:09:27,090
as long as they only get this.

218
00:09:27,090 --> 00:09:30,730
But the moment that somehow,
some if for whatever

219
00:09:30,730 --> 00:09:34,010
hits the break, then
it gets out completely.

220
00:09:34,010 --> 00:09:36,090
And so it escapes the loop.

221
00:09:36,090 --> 00:09:41,500
And so it's like you
zoom, zoom, zoom.

222
00:09:41,500 --> 00:09:43,830
You come in here,
and then you're

223
00:09:43,830 --> 00:09:46,260
rematerialized outside the loop.

224
00:09:46,260 --> 00:09:48,410
That's what the break does.

225
00:09:48,410 --> 00:09:54,640
So break is one way to control
the execution of loops.

226
00:09:54,640 --> 00:09:56,990
Now another way to
control the execution

227
00:09:56,990 --> 00:09:58,830
of loops that doesn't
actually exit the loop

228
00:09:58,830 --> 00:10:01,010
is called continue.

229
00:10:01,010 --> 00:10:04,630
Continue basically
says, hey, I'm

230
00:10:04,630 --> 00:10:06,640
done with this
iteration of the loop.

231
00:10:06,640 --> 00:10:09,640
Now, each time through the
loop, we call that an iteration.

232
00:10:09,640 --> 00:10:13,160
Continue says I don't
want to stop the loop,

233
00:10:13,160 --> 00:10:15,790
but I want to stop the
iteration and advance

234
00:10:15,790 --> 00:10:17,442
to the next iteration.

235
00:10:17,442 --> 00:10:18,900
And so what we have
here is we have

236
00:10:18,900 --> 00:10:21,730
the same basic loop,
a while true, which

237
00:10:21,730 --> 00:10:24,590
makes this an infinite loop.

238
00:10:24,590 --> 00:10:26,250
We're going to read
a line prompting

239
00:10:26,250 --> 00:10:28,635
with a less than sign.

240
00:10:28,635 --> 00:10:31,260
And if it's done, we're going to
break, that code is down here.

241
00:10:31,260 --> 00:10:33,218
And we're going to print
it if we fall through.

242
00:10:33,218 --> 00:10:35,910
So normally, we'll be
reading and printing.

243
00:10:35,910 --> 00:10:37,610
And if the line is
done, we're going

244
00:10:37,610 --> 00:10:39,651
to break out, that's what
we just got done doing.

245
00:10:39,651 --> 00:10:41,940
But the new part is right here.

246
00:10:41,940 --> 00:10:44,120
And this is-- we'll learn
this in the next chapter.

247
00:10:44,120 --> 00:10:47,570
If line sub 0, if the first
character of the line,

248
00:10:47,570 --> 00:10:50,640
is a pound sign, we're
going to continue.

249
00:10:50,640 --> 00:10:53,370
And what continue says is it
doesn't actually get us out

250
00:10:53,370 --> 00:10:56,350
of the loop, it jumps back
up to the top of the loop.

251
00:10:56,350 --> 00:11:00,080
Which means that it
ignores, for that iteration,

252
00:11:00,080 --> 00:11:01,860
the rest of the loop.

253
00:11:01,860 --> 00:11:10,690
So if execution comes in
here and hits this line,

254
00:11:10,690 --> 00:11:13,700
it goes back up to the while.

255
00:11:13,700 --> 00:11:15,630
Which means that
whatever this is,

256
00:11:15,630 --> 00:11:17,380
it's not coming out
of this if, it's

257
00:11:17,380 --> 00:11:19,700
going back up to the white.

258
00:11:19,700 --> 00:11:22,060
So continue ends is
the current iteration

259
00:11:22,060 --> 00:11:23,620
and jumps to the
top of the loop,

260
00:11:23,620 --> 00:11:26,280
and starts the next iteration.

261
00:11:26,280 --> 00:11:29,280
And so if we look at how
the code runs, hello there.

262
00:11:29,280 --> 00:11:30,440
Prints.

263
00:11:30,440 --> 00:11:32,950
Pound sign with the first
character doesn't print,

264
00:11:32,950 --> 00:11:35,230
so there is no print
out right here.

265
00:11:35,230 --> 00:11:37,580
Print this is not done,
and we enter done,

266
00:11:37,580 --> 00:11:39,360
and then the loop ends.

267
00:11:39,360 --> 00:11:42,700
Now another way to draw
this is that continue jumps

268
00:11:42,700 --> 00:11:44,830
to the top of the loop.

269
00:11:44,830 --> 00:11:48,220
It does run the question, right?

270
00:11:48,220 --> 00:11:49,610
It does check the question.

271
00:11:49,610 --> 00:11:52,780
So here's another way
to draw that picture.

272
00:11:52,780 --> 00:11:55,556
And so here again we have a
loop, and it's happily running,

273
00:11:55,556 --> 00:11:56,930
and there can be
breaks in there,

274
00:11:56,930 --> 00:11:58,730
and there could be
continues in there.

275
00:11:58,730 --> 00:12:01,030
And as long as we don't
hit a break or continue,

276
00:12:01,030 --> 00:12:03,080
the loop just runs and
goes up to the top.

277
00:12:03,080 --> 00:12:06,990
And at some point, some
if, we hit the continue.

278
00:12:06,990 --> 00:12:10,110
And like a transporter, instead
of going out of the loop,

279
00:12:10,110 --> 00:12:11,360
we go to the top of the loop.

280
00:12:11,360 --> 00:12:15,640
But it's important that we
go and we check the question.

281
00:12:15,640 --> 00:12:17,990
So the continue is
not likely to exit

282
00:12:17,990 --> 00:12:20,350
the loop unless the
question has become false.

283
00:12:20,350 --> 00:12:23,480
So the continue is likely to
come up here, run some more,

284
00:12:23,480 --> 00:12:25,540
then hit the continue,
it comes up here.

285
00:12:25,540 --> 00:12:26,670
Oops, I did that backwards.

286
00:12:26,670 --> 00:12:29,460
Run some more, clear this out.

287
00:12:29,460 --> 00:12:32,090
So the continue
could run many times.

288
00:12:32,090 --> 00:12:35,010
So we have the loop, loop
runs a bunch of times.

289
00:12:35,010 --> 00:12:36,690
And finally we hit the continue.

290
00:12:36,690 --> 00:12:38,030
Continue goes up to the top.

291
00:12:38,030 --> 00:12:40,700
If it's still true, we'll
run the loop some more.

292
00:12:40,700 --> 00:12:42,480
Than you might hit
the continue, then you

293
00:12:42,480 --> 00:12:43,975
might go up to the
top, come down.

294
00:12:43,975 --> 00:12:45,600
Round, and round,
and round, and round.

295
00:12:45,600 --> 00:12:49,250
Hit the continue again, go
up to the top, yada yada.

296
00:12:49,250 --> 00:12:52,650
Now in this particular
loop, this break eventually

297
00:12:52,650 --> 00:12:55,230
is down here, and
that's how we get out.

298
00:12:55,230 --> 00:13:00,020
So the continue goes back
up to the top of the loop.

299
00:13:00,020 --> 00:13:03,010
So these loops that we
construct with the while keyword

300
00:13:03,010 --> 00:13:05,350
are what we call
indefinite loops.

301
00:13:05,350 --> 00:13:07,440
I mean, looking at the
ones that we've written,

302
00:13:07,440 --> 00:13:09,660
which are two
lines, or six lines,

303
00:13:09,660 --> 00:13:12,180
we can inspect
them and understand

304
00:13:12,180 --> 00:13:13,540
when they're going to stop.

305
00:13:13,540 --> 00:13:17,776
And we're going to know that
they're possible to stop them.

306
00:13:17,776 --> 00:13:21,510
A loop that won't stop
as an infinite loop.

307
00:13:21,510 --> 00:13:23,469
Sometimes these can
be rather complex.

308
00:13:23,469 --> 00:13:25,510
And you may not actually
be able to look at them,

309
00:13:25,510 --> 00:13:30,710
because they're many lines
and so we don't know.

310
00:13:30,710 --> 00:13:32,940
So you have to be real
careful when you construct

311
00:13:32,940 --> 00:13:35,160
these to make sure
that they stop

312
00:13:35,160 --> 00:13:37,220
as things get more complicated.

313
00:13:37,220 --> 00:13:42,380
Now the cousin to indefinite
loops are definite loops.

314
00:13:42,380 --> 00:13:46,280
And definite loops is something
where we have a list of things,

315
00:13:46,280 --> 00:13:48,845
or a set of things that
are a known set of things,

316
00:13:48,845 --> 00:13:50,657
a finite set of things.

317
00:13:50,657 --> 00:13:52,240
And we're going to
write a loop that's

318
00:13:52,240 --> 00:13:53,920
going to go through
that set of things

319
00:13:53,920 --> 00:13:57,430
and do something to each
thing in that set of things.

320
00:13:57,430 --> 00:14:00,510
And the key word that we
use for this is the for.

321
00:14:00,510 --> 00:14:03,680
So we use the Python
for keyword that says

322
00:14:03,680 --> 00:14:05,030
we're going to write a loop.

323
00:14:05,030 --> 00:14:08,010
But instead it just running
until some condition becomes

324
00:14:08,010 --> 00:14:10,440
true or false, or
we hit a break,

325
00:14:10,440 --> 00:14:12,850
we're actually going to
know how many times this

326
00:14:12,850 --> 00:14:13,740
is going to run.

327
00:14:13,740 --> 00:14:16,600
Now, you can actually use break
and continue in for loops.

328
00:14:16,600 --> 00:14:19,840
We call these definite
loops, because how long

329
00:14:19,840 --> 00:14:23,140
they're going to run it
is well known, basically.

330
00:14:23,140 --> 00:14:25,250
So here's a simple
definite loop.

331
00:14:25,250 --> 00:14:27,150
And it's like that
while loop that we just

332
00:14:27,150 --> 00:14:29,660
got done looking at,
where it's counting down

333
00:14:29,660 --> 00:14:31,370
and then saying blast off.

334
00:14:31,370 --> 00:14:33,520
And so the way we
construct this loop is we

335
00:14:33,520 --> 00:14:36,950
have the for keyword, it's
part of Python language.

336
00:14:36,950 --> 00:14:40,940
The in keyword, and then we
have an iteration variable.

337
00:14:40,940 --> 00:14:43,670
I've chosen i as my
iteration variable.

338
00:14:43,670 --> 00:14:45,890
And basically what
we're saying is,

339
00:14:45,890 --> 00:14:50,250
dear Python, run
this indented block--

340
00:14:50,250 --> 00:14:52,930
and there's only one line
in the indented block.

341
00:14:52,930 --> 00:14:56,930
Run it once for each of the
values in this little list.

342
00:14:56,930 --> 00:14:58,420
This is a Python list.

343
00:14:58,420 --> 00:15:00,620
Square brackets
make Python lists,

344
00:15:00,620 --> 00:15:02,240
comma separate the values.

345
00:15:02,240 --> 00:15:05,115
So it says, I would like i to
be five, then run this code.

346
00:15:05,115 --> 00:15:07,240
Then I would like i to be
four, then run this code.

347
00:15:07,240 --> 00:15:09,440
Then I would like i to be
three, then run this code.

348
00:15:09,440 --> 00:15:11,280
i should be two,
then run this code.

349
00:15:11,280 --> 00:15:13,530
And i should be one,
then run this code.

350
00:15:13,530 --> 00:15:17,830
And so this is pretty clear,
and I like this word in.

351
00:15:17,830 --> 00:15:21,134
It says, doot, doot,
doot doot doot doot,

352
00:15:21,134 --> 00:15:22,610
and then run this each time.

353
00:15:22,610 --> 00:15:25,630
And so out of that comes
five, four, three, two, one.

354
00:15:25,630 --> 00:15:28,120
And then the loop is done.

355
00:15:28,120 --> 00:15:30,170
Python is doing all
the tricky bits here.

356
00:15:30,170 --> 00:15:34,739
Python's figuring all
these things out for us

