309
00:13:46,830 --> 00:13:49,732
https://youtu.be/Wdi6lhcrtBU
it just causes Python
to remember them.

310
00:13:49,732 --> 00:13:53,430
I've said that a
few too many times.

311
00:13:53,430 --> 00:13:58,340
So here is a difficult
problem, I'll

312
00:13:58,340 --> 00:14:00,150
let you think about
it for awhile.

313
00:14:00,150 --> 00:14:02,466
I want you to kind of mentally
go through and execute

314
00:14:02,466 --> 00:14:02,965
this code.

315
00:14:02,965 --> 00:14:05,510

316
00:14:05,510 --> 00:14:09,880
Ask what, ask yourself what
the output of this program

317
00:14:09,880 --> 00:14:11,930
would produce.

318
00:14:11,930 --> 00:14:12,860
How many lines?

319
00:14:12,860 --> 00:14:16,030
How many lines of output
will this program produce?

320
00:14:16,030 --> 00:14:22,140

321
00:14:22,140 --> 00:14:25,555
So, how many of you said three?

322
00:14:25,555 --> 00:14:28,320

323
00:14:28,320 --> 00:14:31,370
How many of you said five?

324
00:14:31,370 --> 00:14:37,400
Well, the right answer
is actually three.

325
00:14:37,400 --> 00:14:41,730
You see five print statements
two, three, four, five.

326
00:14:41,730 --> 00:14:46,330
But to of the print statements
are sitting inside of this.

327
00:14:46,330 --> 00:14:50,330
And we never called, we never
invoked the function down here.

328
00:14:50,330 --> 00:14:51,240
OK?

329
00:14:51,240 --> 00:14:55,941
So this one --
let's clear this --

330
00:14:55,941 --> 00:14:58,980
this one prints these
two get skipped,

331
00:14:58,980 --> 00:15:01,270
this one prints and
this one prints.

332
00:15:01,270 --> 00:15:04,950
So that's why there are
three statements that print.

333
00:15:04,950 --> 00:15:08,340
There is, stored,
but we never used

334
00:15:08,340 --> 00:15:09,950
a function called print lyrics.

335
00:15:09,950 --> 00:15:13,500
And it's got two statements
in it, but we never used it.

336
00:15:13,500 --> 00:15:18,470
So the output of this
is hello yo seven.

337
00:15:18,470 --> 00:15:21,130
And that's because we
never actually invoked it.

338
00:15:21,130 --> 00:15:23,560
We had to say print
lyrics parentheses

339
00:15:23,560 --> 00:15:26,770
or whatever to cause
it to call this.

340
00:15:26,770 --> 00:15:30,320
OK, that's just to emphasize
that as it looks at it,

341
00:15:30,320 --> 00:15:34,000
it does not execute these lines.

342
00:15:34,000 --> 00:15:36,730
So once we defined
a function, once we

343
00:15:36,730 --> 00:15:40,730
have given it a name, given
it code that is part of it,

344
00:15:40,730 --> 00:15:44,500
then we can invoke or call
it as many times as we like.

345
00:15:44,500 --> 00:15:48,030
So now our little example works
a little better if we actually

346
00:15:48,030 --> 00:15:48,900
call our function.

347
00:15:48,900 --> 00:15:51,101

348
00:15:51,101 --> 00:15:53,600
Python really doesn't care if
you don't call your functions.

349
00:15:53,600 --> 00:15:56,750
Like, you told me to make one,
I made one, you didn't use it,

350
00:15:56,750 --> 00:15:57,830
there you go.

351
00:15:57,830 --> 00:15:59,750
But if you look at this one now.

352
00:15:59,750 --> 00:16:01,830
So here we go.

353
00:16:01,830 --> 00:16:06,320
X equals 5 print hello,
outcomes hello, define.

354
00:16:06,320 --> 00:16:07,210
Nothing happens here.

355
00:16:07,210 --> 00:16:10,580
Nothing happens here
it's just remembering.

356
00:16:10,580 --> 00:16:12,820
OK then it says print go.

357
00:16:12,820 --> 00:16:14,960
Then it calls the
function print lyrics,

358
00:16:14,960 --> 00:16:17,050
which sort of stops us here.

359
00:16:17,050 --> 00:16:18,630
Runs these two lines of code.

360
00:16:18,630 --> 00:16:20,730
So out comes that and that.

361
00:16:20,730 --> 00:16:23,820
Then it sort of finishes
this and it comes back,

362
00:16:23,820 --> 00:16:24,810
x equals x plus 2.

363
00:16:24,810 --> 00:16:26,640
Then it prints x.

364
00:16:26,640 --> 00:16:29,630
That must mean x is 7,
and so out that comes.

365
00:16:29,630 --> 00:16:35,580
And so, again it's on
the first time through --

366
00:16:35,580 --> 00:16:39,230
go back go back go back --
on the first time through,

367
00:16:39,230 --> 00:16:40,440
it doesn't print.

368
00:16:40,440 --> 00:16:42,646
But then when it
hits this, it prints.

369
00:16:42,646 --> 00:16:44,520
You could say print
lyrics several more times

370
00:16:44,520 --> 00:16:46,740
and it would run this
as many times as it did,

371
00:16:46,740 --> 00:16:49,180
and if it needed to as
many times as you want,

372
00:16:49,180 --> 00:16:50,650
and it would make
output for you.

373
00:16:50,650 --> 00:16:52,470
So you can invoke.

374
00:16:52,470 --> 00:16:56,330
This is the definition
-- let's clear this --

375
00:16:56,330 --> 00:17:03,980
this is the definition,
this is the call or invoke.

376
00:17:03,980 --> 00:17:07,520
So we're invoking the function,
we're calling the function,

377
00:17:07,520 --> 00:17:09,690
were causing the
function to execute.

378
00:17:09,690 --> 00:17:11,750
Here we are just
causing the function

379
00:17:11,750 --> 00:17:15,820
to be looked at and defined,
but not actually executed.

380
00:17:15,820 --> 00:17:17,440
I hope that's clear.

381
00:17:17,440 --> 00:17:23,450
Now, when we pass data into
a function, and functions

382
00:17:23,450 --> 00:17:26,359
they don't take data are not
as useful as they could be.

383
00:17:26,359 --> 00:17:28,020
There's plenty of
things that do,

384
00:17:28,020 --> 00:17:29,760
times that you build a
function it doesn't take data.

385
00:17:29,760 --> 00:17:31,200
But the most
interesting functions

386
00:17:31,200 --> 00:17:33,710
are the ones that you could
hand them something to work on

387
00:17:33,710 --> 00:17:36,740
and they can do their work and
then come back with whatever.

388
00:17:36,740 --> 00:17:39,660
So this Max function is
a good example of this.

389
00:17:39,660 --> 00:17:42,860
One that's taking an
argument, we call the things

390
00:17:42,860 --> 00:17:44,350
in between the parentheses.

391
00:17:44,350 --> 00:17:46,380
When we're invoking
the function,

392
00:17:46,380 --> 00:17:50,720
we call the things in between
the parentheses arguments.

393
00:17:50,720 --> 00:17:52,720
So that's passing
into the function,

394
00:17:52,720 --> 00:17:55,099
feeding data into the function.

395
00:17:55,099 --> 00:17:56,390
So we put arguments in between.

396
00:17:56,390 --> 00:17:59,010

397
00:17:59,010 --> 00:18:03,020
So for example here we
have a little program

398
00:18:03,020 --> 00:18:08,657
that, it's a
function named greet.

399
00:18:08,657 --> 00:18:10,490
And now we are going
to define this function

400
00:18:10,490 --> 00:18:12,270
and we're going to
say, you know what?

401
00:18:12,270 --> 00:18:14,180
I would like to
take a parameter.

402
00:18:14,180 --> 00:18:15,830
Let's take a parameter.

403
00:18:15,830 --> 00:18:17,814
Let's have one
parameter come in.

404
00:18:17,814 --> 00:18:19,980
And we need kind of a
placeholder for that parameter

405
00:18:19,980 --> 00:18:22,770
so within the function
we're going to use lang.

406
00:18:22,770 --> 00:18:24,680
Now this isn't actually
a real variable.

407
00:18:24,680 --> 00:18:28,140
It's kind of like a, it's
a placeholder variable.

408
00:18:28,140 --> 00:18:30,560
So this first
parameter, whatever

409
00:18:30,560 --> 00:18:33,000
it is, when it's called,
is going to be lang.

410
00:18:33,000 --> 00:18:35,970
And so if that first
parameter is equal to es

411
00:18:35,970 --> 00:18:38,730
we're going to print hola.

412
00:18:38,730 --> 00:18:42,740
And if, else if it's equal
to fr we'll print bonjour.

413
00:18:42,740 --> 00:18:44,490
And otherwise will print hello.

414
00:18:44,490 --> 00:18:47,150
So there's apparently three
languages in the world;

415
00:18:47,150 --> 00:18:48,940
Spanish, French, and English.

416
00:18:48,940 --> 00:18:51,740
And if it's not Spanish or
French then it must be English.

417
00:18:51,740 --> 00:18:54,380
But I have keep
this kind of small

418
00:18:54,380 --> 00:18:56,330
so my screen
doesn't get too big.

419
00:18:56,330 --> 00:18:58,362
So this is again
just the definition

420
00:18:58,362 --> 00:19:00,320
and if you type this into
the interactive thing

421
00:19:00,320 --> 00:19:02,160
it gives this dot
dot dot product.

422
00:19:02,160 --> 00:19:04,100
And so we now have this
thing called greet.

423
00:19:04,100 --> 00:19:08,210
And now we've extended Python to
add our own function to Python.

424
00:19:08,210 --> 00:19:11,000
And now we can say greet en.

425
00:19:11,000 --> 00:19:15,530
And so it runs this code,
except that en is lang.

426
00:19:15,530 --> 00:19:18,670
And so that comes and
then it prints hello.

427
00:19:18,670 --> 00:19:19,970
So out comes hello.

428
00:19:19,970 --> 00:19:23,430
Now later we can say oh I
would like to do a greeting,

429
00:19:23,430 --> 00:19:25,780
but this time I'm
going to pass es as it.

430
00:19:25,780 --> 00:19:30,720
So lang becomes, for this
execution, es and then

431
00:19:30,720 --> 00:19:32,270
it prints out hola.

432
00:19:32,270 --> 00:19:36,530
And then the next
execution lang is fr.

433
00:19:36,530 --> 00:19:40,070
So it executes this three
times, but lang is different

434
00:19:40,070 --> 00:19:44,307
each time because we passed in
different parameters each time.

435
00:19:44,307 --> 00:19:46,390
So that's how we can kind
of right general purpose

436
00:19:46,390 --> 00:19:49,090
code inside the
function and then

437
00:19:49,090 --> 00:19:53,310
reuse that general purpose
code in different ways.

438
00:19:53,310 --> 00:19:55,410
A real powerful
powerful mechanism the

439
00:19:55,410 --> 00:19:57,350
makes functions far more useful.

440
00:19:57,350 --> 00:20:00,070

441
00:20:00,070 --> 00:20:05,310
Now functions don't necessarily
just have to do stuff.

442
00:20:05,310 --> 00:20:07,020
Real powerful
mechanism in a function

443
00:20:07,020 --> 00:20:08,420
is what we call a return value.

444
00:20:08,420 --> 00:20:11,280

445
00:20:11,280 --> 00:20:13,040
So a function can
take its arguments,

446
00:20:13,040 --> 00:20:14,890
do some work we've seen that.

447
00:20:14,890 --> 00:20:17,730
And then, it can return a value.

448
00:20:17,730 --> 00:20:20,020
And the key to the
return value is

449
00:20:20,020 --> 00:20:22,850
when we call the function
like we were calling max,

450
00:20:22,850 --> 00:20:26,580
it gives us back some
value like the little w.

451
00:20:26,580 --> 00:20:29,920
So here we're going to
make a function called

452
00:20:29,920 --> 00:20:32,520
greet that takes no parameters.

453
00:20:32,520 --> 00:20:33,670
Don't take parameters.

454
00:20:33,670 --> 00:20:35,210
But it has another keyword.

455
00:20:35,210 --> 00:20:38,990
It's another reserved
word in Python

456
00:20:38,990 --> 00:20:43,260
and whatever we put on
this return statement

457
00:20:43,260 --> 00:20:47,240
shows up as the replacement
in this expression.

458
00:20:47,240 --> 00:20:50,470
So whatever greet
is, it runs greet,

459
00:20:50,470 --> 00:20:53,350
and then the return is
kind of a residual value.

460
00:20:53,350 --> 00:20:56,040
So if we say print
greet, Glenn and it

461
00:20:56,040 --> 00:20:57,870
says hello, Glenn
because the return

462
00:20:57,870 --> 00:21:01,060
value for the greet function
is the string hello.

