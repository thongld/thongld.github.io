463
00:21:01,060 --> 00:21:04,990
quangdutran 18/06 Thao reviewed
Và nếu ta cho "Sally" vào hàm greet
thì nó sẽ in ra "Hello, Sally".

464
00:21:04,990 --> 00:21:08,720
Code được thực thi hai lần, và

465
00:21:08,720 --> 00:21:11,800
giá trị trả lại được
thế vào đây.

466
00:21:11,800 --> 00:21:14,050
Vậy từ "hello" được chuyển sang đây rồi ra đây.

467
00:21:14,050 --> 00:21:15,530
Ta có hai dòng được in ra.

468
00:21:15,530 --> 00:21:18,590
Vậy lệnh "return" là câu lệnh
vừa dừng hàm đó lại,

469
00:21:18,590 --> 00:21:22,760
vừa định nghĩa giá trị sẽ được thay thế

470
00:21:22,760 --> 00:21:26,270
khi hàm được gọi lên

471
00:21:26,270 --> 00:21:29,900
tại dòng mà hàm được gọi.

472
00:21:29,900 --> 00:21:35,190
Đây là một phiên bản
thông minh hơn của hàm greet.

473
00:21:35,190 --> 00:21:38,180
Nó khá giống cái trước,
vẫn được gọi là "greet".

474
00:21:38,180 --> 00:21:40,350
Hàm này lấy tham số là "lang".

475
00:21:40,350 --> 00:21:42,820
Nếu biến đầu vào là "es"
thì

476
00:21:42,820 --> 00:21:44,470
trả về từ "hola".

477
00:21:44,470 --> 00:21:46,800
Nếu biến đầu vào là "fr",
trả về từ "bonjour".

478
00:21:46,800 --> 00:21:47,925
Nếu không thì 
trả về từ "hello".

479
00:21:47,925 --> 00:21:49,508
Vậy nó thực chất không phải là in màn hình.

480
00:21:49,508 --> 00:21:51,560
Lúc nãy ta dùng hàm print,

481
00:21:51,560 --> 00:21:54,650
nhưng giờ ta chỉ 
trả về một chuỗi kí tự.

482
00:21:54,650 --> 00:21:59,900
Giờ ta có thể gọi in hàm greet
và đưa

483
00:21:59,900 --> 00:22:04,090
biến "en" vào,
chạy đoạn code một lần với "lang" bằng "en".

484
00:22:04,090 --> 00:22:07,010
hàm trả về từ "hello", phẩy, "Glenn".

485
00:22:07,010 --> 00:22:09,950
Tôi gọi hàm một lần nữa,
lần này đầu vào là từ "es",

486
00:22:09,950 --> 00:22:12,670
và khi chạy lần này,
giá trị trả về là 

487
00:22:12,670 --> 00:22:15,120
từ "hola", một chuỗi kí tự.

488
00:22:15,120 --> 00:22:16,440
Hola, Sally.

489
00:22:16,440 --> 00:22:18,110
Và sau đó là Michael.

490
00:22:18,110 --> 00:22:19,860
Tôi đặt biến đầu vào một lần nữa.

491
00:22:19,860 --> 00:22:26,030
Bây giờ "lang" bằng chuỗi kí tự "fr",
nên hàm sẽ trả về từ "bonjour".

492
00:22:26,030 --> 00:22:29,330
Phần còn lại chính là "bonjour".

493
00:22:29,330 --> 00:22:32,742
Và in ra màn hình:
"Bonjour Michael".

494
00:22:32,742 --> 00:22:33,950
Khá phức tạp đúng không?

495
00:22:33,950 --> 00:22:37,520
Đưa biến vào, ta có một
dạng biến giữ chỗ,

496
00:22:37,520 --> 00:22:41,400
và một giá trị được trả về

497
00:22:41,400 --> 00:22:42,120
ở nơi hàm được gọi.

498
00:22:42,120 --> 00:22:44,600
Biến đi vào, tính toán,
và trả về,

499
00:22:44,600 --> 00:22:47,460
và có một giá trị còn lại 
nằm ở đây.

500
00:22:47,460 --> 00:22:49,810
Bạn không cần thiết phải
trả về một giá trị trong hàm

501
00:22:49,810 --> 00:22:52,320
Nhưng nếu muốn làm gì đó
với một giá trị

502
00:22:52,320 --> 00:22:55,140
thì phải có lệnh 
return trong hàm.

503
00:22:55,140 --> 00:22:59,520
Ta gọi hàm trả về 
giá trị là hàm có kết quả,

504
00:22:59,520 --> 00:23:03,370
còn hàm không trả về giá trị 
gọi là hàm void (rỗng).

505
00:23:03,370 --> 00:23:05,570
Đó là những cái tên
rất hay.

506
00:23:05,570 --> 00:23:07,830
Giờ tôi sẽ tổng kết lại về biến,

507
00:23:07,830 --> 00:23:09,940
tham số và kết quả.

508
00:23:09,940 --> 00:23:11,730
Hãy nhìn vào hàm max,

509
00:23:11,730 --> 00:23:15,990
nó tìm kí tự lớn nhất

510
00:23:15,990 --> 00:23:19,340
trong bảng chữ cái,
nó tìm trong "hello, world"

511
00:23:19,340 --> 00:23:22,060
là biến đầu vào.

512
00:23:22,060 --> 00:23:23,910
Ta có một tham số

513
00:23:23,910 --> 00:23:26,180
ở đây là "inp", nó không hẳn là biến,

514
00:23:26,180 --> 00:23:30,220
mà nó là một cách gọi biến đầu tiên

515
00:23:30,220 --> 00:23:32,260
được đưa vào khi hàm được gọi.

516
00:23:32,260 --> 00:23:34,520
Nó tính toán 
và chạy vòng lặp,

517
00:23:34,520 --> 00:23:39,100
sau đó nó sẽ trả về "w".

518
00:23:39,100 --> 00:23:42,220
Vậy giá trị trả về khi 
hàm chạy xong

519
00:23:42,220 --> 00:23:44,290
mà trở thành giá trị
thay thế

520
00:23:44,290 --> 00:23:47,010
ở đây là một chuỗi "w" viết thường.

521
00:23:47,010 --> 00:23:49,590
Và chữ "w" đó 
nhảy vào trong biến "big"

522
00:23:49,590 --> 00:23:54,900
Vậy ở đây lệnh return định nghĩa 
cái gì được trả về.

523
00:23:54,900 --> 00:23:57,070
Hãy hình dung:
khi chạy đến đây

524
00:23:57,070 --> 00:24:00,920
chương trình dừng lại một chút,
thực hiện đoạn code này,

525
00:24:00,920 --> 00:24:03,740
nó tạm dừng ở đây trong khi chạy cái này,

526
00:24:03,740 --> 00:24:06,184
rồi nó trả
kết quả về đây.

527
00:24:06,184 --> 00:24:07,170
Hiểu chứ?

528
00:24:07,170 --> 00:24:11,250
Câu lệnh return sẽ quy định
cái gì được trả về.

529
00:24:11,250 --> 00:24:15,790
Đương nhiên là bạn có thể có
nhiều tham số

530
00:24:15,790 --> 00:24:17,600
và chúng được
sắp xếp theo thứ tự.

531
00:24:17,600 --> 00:24:20,420
Ở đây ta có hai tham số
a và b.

532
00:24:20,420 --> 00:24:22,440
Chúng tên là gì không quan trọng.

533
00:24:22,440 --> 00:24:25,970
Chúng chỉ có ý nghĩa trong định nghĩa hàm thôi.

534
00:24:25,970 --> 00:24:28,190
Và giờ ta sẽ cộng hai số lại

535
00:24:28,190 --> 00:24:31,860
bằng cách tính tổng a + b và trả kết quả về.

536
00:24:31,860 --> 00:24:34,760
Biến added chỉ có ý nghĩa trong hàm này thôi

537
00:24:34,760 --> 00:24:39,270
Giờ ta có thể gọi hàm addtwo(3,5)
số 8 sẽ được trả về,

538
00:24:39,270 --> 00:24:41,380
nó sẽ được gán vào biến x

539
00:24:41,380 --> 00:24:43,600
và màn hình in ra số 8.

540
00:24:43,600 --> 00:24:45,750
Bạn muốn dùng bao nhiêu tham số cũng được.

541
00:24:45,750 --> 00:24:47,230
Thứ tự cũng quan trọng,

542
00:24:47,230 --> 00:24:49,240
các biến cần đứng 
đúng thứ tự

543
00:24:49,240 --> 00:24:52,340
Khi hàm được gọi, 3 sẽ là biến a và 5 sẽ là
biến b,

544
00:24:52,340 --> 00:24:56,460
và giá trị kết quả 
sẽ được trả về.

545
00:24:56,460 --> 00:24:57,400
OK?

546
00:24:57,400 --> 00:25:01,030
Đó là các biến đầu vào.

547
00:25:01,030 --> 00:25:03,780
Như tôi đã nói,
không phải tất cả các hàm

548
00:25:03,780 --> 00:25:04,940
đều phải trả về
một giá trị.

549
00:25:04,940 --> 00:25:07,970
Nếu không trả về giá trị thì ta gọi là hàm rỗng.

550
00:25:07,970 --> 00:25:12,580
Điều đó hoàn toàn
bình thường.

551
00:25:12,580 --> 00:25:15,850
Lúc này có thể bạn vẫn chưa hiểu

552
00:25:15,850 --> 00:25:18,320
tại sao lại phải dùng đến hàm.

553
00:25:18,320 --> 00:25:21,800
Thực tế, trong 10, 11 chương đầu

554
00:25:21,800 --> 00:25:24,750
của cuốn sách này,
ta sẽ dùng rất nhiều hàm,

555
00:25:24,750 --> 00:25:28,525
nhưng sẽ không dành nhiều thời gian đi 
viết các hàm.

556
00:25:28,525 --> 00:25:31,150
Vì hầu hết các chương trình
của ta chỉ dài khoảng này thôi.

557
00:25:31,150 --> 00:25:33,660
Và ta sẽ không dùng lại
nhiều hàm trong chương trình.

558
00:25:33,660 --> 00:25:39,030
Sẽ có lúc chương trình của bạn 
sẽ trở nên phức tạp,

559
00:25:39,030 --> 00:25:41,390
lúc đó bạn sẽ cám ơn các hàm.

560
00:25:41,390 --> 00:25:43,960
Bây giờ mà bắt các bạn dùng hàm thì hơi sớm,

561
00:25:43,960 --> 00:25:45,880
mặc dù có một số bài tập

562
00:25:45,880 --> 00:25:47,870
yêu cầu sử dụng hàm

563
00:25:47,870 --> 00:25:50,900
để bạn có thể 
hiểu hàm đó.

564
00:25:50,900 --> 00:25:54,900
Nhưng khi chương trình của bạn phức tạp lên,

565
00:25:54,900 --> 00:25:56,990
rồi bạn sẽ thấy mình cứ phải làm đi làm lại

566
00:25:56,990 --> 00:25:57,730
một việc.

567
00:25:57,730 --> 00:25:59,188
Bạn sẽ phải tống tất cả 
vào một hàm

568
00:25:59,188 --> 00:26:01,450
đưa tham số vào để trả về một giá trị,

569
00:26:01,450 --> 00:26:02,470
và cứ thế mà dùng.

570
00:26:02,470 --> 00:26:04,742
Hoặc có thể làm xong
chương trình này

571
00:26:04,742 --> 00:26:06,450
bạn chuyển sang chương trình khác,
mà thấy có những thứ giống nhau

572
00:26:06,450 --> 00:26:08,533
nên bạn tạo ra một
thư viện

573
00:26:08,533 --> 00:26:09,520
để có thể 
dùng mọi nơi.

574
00:26:09,520 --> 00:26:12,090
Và ta sẽ tạo ra 
rất nhiều thư viện.

575
00:26:12,090 --> 00:26:15,700
Nửa sau của cuốn sách
sẽ nói về các thể loại thư viện

576
00:26:15,700 --> 00:26:18,057
phục vụ cho phân tích cú pháp XML,

577
00:26:18,057 --> 00:26:18,890
vân vân.

578
00:26:18,890 --> 00:26:23,670
Vậy, bạn không cần tự buộc mình làm bài nào

579
00:26:23,670 --> 00:26:26,710
cũng phải dùng hàm,
vì dùng hàm là chuyện rất tự nhiên

580
00:26:26,710 --> 00:26:29,670
khi chương trình của bạn 
lớn dần lên.

581
00:26:29,670 --> 00:26:32,360
Chỉ cần hiểu cơ chế hoạt động của nó,

582
00:26:32,360 --> 00:26:35,060
rồi sẽ đến lúc

583
00:26:35,060 --> 00:26:38,050
bạn cần dựng
hàm của riêng mình.

584
00:26:38,050 --> 00:26:40,890
Tóm lại, trong buổi hôm nay ta đã học về hàm.

585
00:26:40,890 --> 00:26:42,930
Tôi đã giới thiệu hàm, tham số,

586
00:26:42,930 --> 00:26:48,110
các hàm có sẵn,
giá trị trả về,

587
00:26:48,110 --> 00:26:50,270
mô hình lưu trữ
và sử dụng lại.

588
00:26:50,270 --> 00:26:54,380
Các bài tập cuối chương này

589
00:26:54,380 --> 00:26:58,490
khá là đơn giản,

590
00:26:58,490 --> 00:27:01,650
ta chưa nhất thiết phải

591
00:27:01,650 --> 00:27:04,260
tạo các hàm vì chương trình

592
00:27:04,260 --> 00:27:08,210
chưa đủ phức tạp, nhưng

593
00:27:08,210 --> 00:27:12,480
hãy chọn một bài bạn đã làm
để viết lại code, thêm vào đầu

594
00:27:12,480 --> 00:27:15,760
định nghĩa một hàm là computepay chẳng hạn,

595
00:27:15,760 --> 00:27:18,370
nội dung là if gì đó.

596
00:27:18,370 --> 00:27:20,690
Sau đó khi chạy code,

597
00:27:20,690 --> 00:27:22,270
bạn gọi hàm computepay ra.

598
00:27:22,270 --> 00:27:24,140
Bạn cho một đoạn code viết sẵn

599
00:27:24,140 --> 00:27:27,090
vào một hàm,
tạo ra hàm đó.

600
00:27:27,090 --> 00:27:29,890
Tôi cũng có một bài làm mẫu trên mạng,

601
00:27:29,890 --> 00:27:31,830
nó hơi phức tạp một chút.

602
00:27:31,830 --> 00:27:35,140
Bạn có thể tìm trên trang pythonlearn.com

603
00:27:35,140 --> 00:27:39,770
hay trên trang web của khóa học, ở đó sẽ có ví dụ hay,

604
00:27:39,770 --> 00:27:43,860
vì tôi muốn các bạn hiểu bài mà.

605
00:27:43,860 --> 00:27:45,320
Như tôi đã nói,
sau này bạn sẽ thấy

606
00:27:45,320 --> 00:27:47,770
được sự hữu dụng của hàm.

607
00:27:47,770 --> 00:27:49,800
Còn sắp tới ta sẽ học

608
00:27:49,800 --> 00:27:51,917
chương 5 về vòng lặp.

609
00:27:51,917 --> 00:27:53,500
Chương này sẽ thú vị lắm.

610
00:27:53,500 --> 00:27:57,960
Vòng lặp là mô hình cơ bản
thứ tư của chúng ta.

611
00:27:57,960 --> 00:28:00,670
Tôi rất mong chờ nó.

612
00:28:00,670 --> 00:28:03,940
Gặp lại các bạn ở bài học sau.

