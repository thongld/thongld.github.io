357
00:15:34,739 --> 00:15:36,530
quangdutran 08/05 Thao reviewed
và xử lí mọi thứ, thế là ta xong việc.

358
00:15:36,530 --> 00:15:39,690
Ta thấy ở đây có một biến vòng lặp

359
00:15:39,690 --> 00:15:41,340
nhưng ta không cần
tăng giá trị của nó,

360
00:15:41,340 --> 00:15:42,660
không cần làm gì hết.

361
00:15:42,660 --> 00:15:44,950
Python đã lo hết 
cho ta rồi.

362
00:15:44,950 --> 00:15:47,720
Khi ta chạy vòng lặp với các 
phần tử trong dãy đã biết

363
00:15:47,720 --> 00:15:49,627
hay sau này khi đọc một file,

364
00:15:49,627 --> 00:15:51,460
ta sẽ duyệt qua
các dòng của file đó.

365
00:15:51,460 --> 00:15:54,440
Vòng lặp "for" là một công cụ mạnh mẽ,

366
00:15:54,440 --> 00:15:56,170
có cú pháp gọn gàng.

367
00:15:56,170 --> 00:15:58,110
Thực sự hữu ích.

368
00:15:58,110 --> 00:16:00,500
Lưu ý, vòng lặp này

369
00:16:00,500 --> 00:16:02,300
không chỉ duyệt được các số.

370
00:16:02,300 --> 00:16:04,414
Tôi vừa ví dụ với một dãy 
các số giảm dần,

371
00:16:04,414 --> 00:16:06,080
nó giống với vòng lặp "while"

372
00:16:06,080 --> 00:16:07,670
tôi đã làm lúc đầu.

373
00:16:07,670 --> 00:16:10,920
Nhưng vòng lặp này sẽ
duyệt các phần tử

374
00:16:10,920 --> 00:16:14,990
trong một dãy của Python,
biểu thị bằng dấu ngoặc vuông.

375
00:16:14,990 --> 00:16:18,990
Dãy này gồm 3 chuỗi ký tự:
Joshep, Glenn và Sally.

376
00:16:18,990 --> 00:16:21,920
Chúng là các hằng chuỗi,
có dấu phẩy ở giữa,

377
00:16:21,920 --> 00:16:24,320
đó là cách ta khai một dãy.

378
00:16:24,320 --> 00:16:27,205
Biến "friends" (các bạn) là một
biến gợi nhớ.

379
00:16:27,205 --> 00:16:29,580
Python không biết 
"friends" là cái gì cả,

380
00:16:29,580 --> 00:16:31,910
nhưng tôi đặt biến
này tên là "friends".

381
00:16:31,910 --> 00:16:35,110
Và nó chứa 3 người:
Joshep, Glenn và Sally.

382
00:16:35,110 --> 00:16:37,880
Và tôi có một biến vòng lặp
là "friend" (bạn),

383
00:16:37,880 --> 00:16:40,160
tôi sẽ chạy vòng lặp hết dãy "friends" này.

384
00:16:40,160 --> 00:16:42,530
Python thì không hiểu được 

385
00:16:42,530 --> 00:16:44,280
số ít số nhiều gì đâu.

386
00:16:44,280 --> 00:16:45,863
Tôi chỉ đang chọn tên biến
như thế

387
00:16:45,863 --> 00:16:48,450
cho nó rõ nghĩa.

388
00:16:48,450 --> 00:16:51,840
Đây là một dãy các bạn 
vì nó có 3 phần tử,

389
00:16:51,840 --> 00:16:54,040
còn đây chỉ là một người thôi.

390
00:16:54,040 --> 00:16:56,250
Ở đây, "friend"

391
00:16:56,250 --> 00:16:58,620
sẽ lấy lần lượt
các giá trị Joseph, Glenn

392
00:16:58,620 --> 00:17:00,630
và Sally, và đoạn
code này

393
00:17:00,630 --> 00:17:04,770
sẽ chạy một lần
cho mỗi phần tử trong dãy.

394
00:17:04,770 --> 00:17:07,349
Biến "friend" sẽ 
lần lượt lấy

395
00:17:07,349 --> 00:17:10,170
các giá trị trong dãy.

396
00:17:10,170 --> 00:17:13,880
Vậy sẽ có 
3 dòng được in ra: Happy new year: Joseph,

397
00:17:13,880 --> 00:17:16,020
Happy new year: Glenn,
Happy new year: Sally.

398
00:17:16,020 --> 00:17:18,670
Đương nhiên, đây chính 
là biến "i".

399
00:17:18,670 --> 00:17:22,060
Ta yêu cầu Python rằng

400
00:17:22,060 --> 00:17:24,780
dù cho có bao nhiêu bạn,
với mỗi bạn hãy chạy đoạn này một lần.

401
00:17:24,780 --> 00:17:26,829
Lần lượt thay đổi biến "friend"

402
00:17:26,829 --> 00:17:28,990
tương ứng với các bạn
trong dãy.

403
00:17:28,990 --> 00:17:30,470
In ra và ta xong việc.

404
00:17:30,470 --> 00:17:31,730
OK.

405
00:17:31,730 --> 00:17:33,757
Đây là sơ đồ

406
00:17:33,757 --> 00:17:34,840
vòng lặp "for".

407
00:17:34,840 --> 00:17:36,730
Vòng lặp "for" khá
mạnh.

408
00:17:36,730 --> 00:17:39,530
Nó làm hai việc,

409
00:17:39,530 --> 00:17:42,700
Nó kiểm tra xem vòng lặp
hoàn thành hay chưa,

410
00:17:42,700 --> 00:17:45,510
tiếp tục chạy vòng lặp 
này như thế nào.

411
00:17:45,510 --> 00:17:47,010
Miễn là còn chạy,

412
00:17:47,010 --> 00:17:49,440
ta sẽ thay đổi giá trị "i" tức
biến vòng lặp.

413
00:17:49,440 --> 00:17:51,690
Nó phụ trách 
thay đổi

414
00:17:51,690 --> 00:17:54,160
giá trị của biến vòng lặp,
ta không cần viết thêm dòng nào

415
00:17:54,160 --> 00:17:57,040
để thay đổi biến vòng lặp cả.

416
00:17:57,040 --> 00:18:01,520
Chạy vào đây,
đã hoàn thành vòng lặp chưa?

417
00:18:01,520 --> 00:18:02,310
Chưa.

418
00:18:02,310 --> 00:18:04,350
Đổi "i" sang phần tử bên phải
rồi in nó ra.

419
00:18:04,350 --> 00:18:08,370
Đầu tiên là 5, 
sau đó đổi giá trị của "i".

420
00:18:08,370 --> 00:18:10,900
Cứ thế in ra rồi lại đổi giá trị.

421
00:18:10,900 --> 00:18:13,360
Và giờ vòng lặp hoàn thành.

422
00:18:13,360 --> 00:18:16,510
Biến "i" không quyết định
lúc nào xong vòng lặp.

423
00:18:16,510 --> 00:18:18,910
Vòng lặp "for" 
tự theo dõi

424
00:18:18,910 --> 00:18:22,830
khi "i" di chuyển 
giữa các phần tử và tự biết lúc nào là xong.

425
00:18:22,830 --> 00:18:24,310
Tôi sẽ lo điều đó.

426
00:18:24,310 --> 00:18:25,260
Anh xong việc rồi.

427
00:18:25,260 --> 00:18:26,600
Ở đây không có "if".

428
00:18:26,600 --> 00:18:29,140
Không phải nếu
i = 1 thì dừng.

429
00:18:29,140 --> 00:18:29,920
Không.

430
00:18:29,920 --> 00:18:31,810
Chỉ là ta giao cho chương trình 5 việc,

431
00:18:31,810 --> 00:18:34,226
làm xong 5 việc
là nó dừng lại.

432
00:18:34,226 --> 00:18:40,930
Nhắc lại, vòng lặp "for"
có hai chức năng.

433
00:18:40,930 --> 00:18:42,760
Quyết định vòng lặp 
sẽ chạy bao nhiêu lần,

434
00:18:42,760 --> 00:18:44,690
và thay đổi biến vòng lặp

435
00:18:44,690 --> 00:18:47,770
dựa trên những gì
đã khai trong mệnh đề "in".

436
00:18:47,770 --> 00:18:50,300

437
00:18:50,300 --> 00:18:53,580
Tôi nghĩ "in" (trong) là một cú pháp
khá hay.

438
00:18:53,580 --> 00:18:58,300
Nó chỉ là một từ khóa thôi
nhưng cũng như khái niệm tập hợp

439
00:18:58,300 --> 00:18:59,870
trong toán học,

440
00:18:59,870 --> 00:19:02,150
nó thể hiện một phần tử nằm trong một tập hợp.

441
00:19:02,150 --> 00:19:05,050
Tôi thấy đó là một cách hình dung rất hay.

442
00:19:05,050 --> 00:19:06,580
Và bạn có thể nghĩ

443
00:19:06,580 --> 00:19:08,380
bao quát hơn một chút,

444
00:19:08,380 --> 00:19:11,040
đây là một đoạn code lùi đầu dòng.

445
00:19:11,040 --> 00:19:15,487
Tôi muốn chạy đoạn đó
một số lần,

446
00:19:15,487 --> 00:19:18,670
với mỗi phần tử trong tập hợp,
5, 4, 3, 2, 1.

447
00:19:18,670 --> 00:19:19,940
Đó là cách tôi hình dung vòng lặp này.

448
00:19:19,940 --> 00:19:23,180
Tôi nghĩ cú pháp
của nó khá hay.

449
00:19:23,180 --> 00:19:25,500
Các ngôn ngữ khác nhau
có cú pháp vòng lặp khác nhau.

450
00:19:25,500 --> 00:19:29,030
Tôi nghĩ cú pháp này rất hay và sáng nghĩa.

451
00:19:29,030 --> 00:19:36,180

452
00:19:36,180 --> 00:19:40,470
Một cách hình dung
vòng lặp "for" qua sơ đồ là

453
00:19:40,470 --> 00:19:43,930
nó thực thi liên tục,
ta chạy quanh trong một vòng tròn.

454
00:19:43,930 --> 00:19:45,430
và rồi dừng lại.

455
00:19:45,430 --> 00:19:47,280
Một cách khác

456
00:19:47,280 --> 00:19:50,680
là nghĩ bao quát hơn một chút

457
00:19:50,680 --> 00:19:53,820
Tóm lại, tôi chỉ yêu cầu Python là

458
00:19:53,820 --> 00:19:57,930
thực thi đoạn code này

459
00:19:57,930 --> 00:20:00,820
5 lần và tôi muốn
biến "i" thay đổi

460
00:20:00,820 --> 00:20:01,880
thành các giá trị này.

461
00:20:01,880 --> 00:20:03,380
Bạn có thể hình dung vòng lặp "for" này

462
00:20:03,380 --> 00:20:06,120
đặt i bằng 5

463
00:20:06,120 --> 00:20:06,990
rồi chạy code.

464
00:20:06,990 --> 00:20:09,300
Sau đó nó đặt i = 4, rồi chạy code.

465
00:20:09,300 --> 00:20:11,680
Đặt i = 3, chạy code.

466
00:20:11,680 --> 00:20:14,795
Đặt i = 2, chạy code.
Rồi lại đặt i = 1

467
00:20:14,795 --> 00:20:15,840
và chạy code.

468
00:20:15,840 --> 00:20:19,990
Hai cách hiểu này

469
00:20:19,990 --> 00:20:22,530
là như nhau vì bạn chỉ đang

470
00:20:22,530 --> 00:20:24,580
yêu cầu Python làm cùng một việc.

471
00:20:24,580 --> 00:20:28,050
Dù cho nó làm cách nào

472
00:20:28,050 --> 00:20:30,450
thì cũng chẳng khác biệt mấy.

473
00:20:30,450 --> 00:20:32,320
Có thể nó làm theo cách này.

474
00:20:32,320 --> 00:20:35,350
Nhưng về mặt logic thì
không khác nhau mấy.

475
00:20:35,350 --> 00:20:37,160
Cũng không khác với cách này.

476
00:20:37,160 --> 00:20:39,810
Bạn chỉ việc nói chạy code này,

477
00:20:39,810 --> 00:20:41,510
thay đổi "i" theo cách này.

478
00:20:41,510 --> 00:20:44,870

479
00:20:44,870 --> 00:20:46,770
Xong.

480
00:20:46,770 --> 00:20:48,600
Ta chả phải lo gì hết.

481
00:20:48,600 --> 00:20:51,670
Bạn có thể hiểu nó chạy 
theo mô hình nào cũng được

482
00:20:51,670 --> 00:20:53,549
không quan trọng,

483
00:20:53,549 --> 00:20:54,590
vì chúng như nhau.

484
00:20:54,590 --> 00:20:57,330

485
00:20:57,330 --> 00:21:00,360
Vòng lặp hữu hạn này
rất thú vị.

486
00:21:00,360 --> 00:21:01,820
Sau vài chương nữa,

487
00:21:01,820 --> 00:21:04,430
ta sẽ chủ yếu dùng vòng lặp hữu hạn
để duyệt các dãy,

488
00:21:04,430 --> 00:21:08,400
các từ điển, bộ dữ liệu hay file.

489
00:21:08,400 --> 00:21:10,020
Đó là các dãy 
phần tử hữu hạn.

490
00:21:10,020 --> 00:21:11,728
Chúng có thể rất lớn

491
00:21:11,728 --> 00:21:13,710
nhưng hữu hạn.

492
00:21:13,710 --> 00:21:14,510
Được rồi.

493
00:21:14,510 --> 00:21:18,980
Giờ tôi muốn nói về
các cấu trúc vòng lặp (loop idioms)

494
00:21:18,980 --> 00:21:24,180
Đó là cách mà ta 
tạo ra một vòng lặp.

495
00:21:24,180 --> 00:21:28,120
Vòng lặp sẽ có 
một mục tiêu nào đó.

496
00:21:28,120 --> 00:21:30,000
Tìm số lớn nhất,
ta đã gặp ví dụ này rồi.

497
00:21:30,000 --> 00:21:33,340
Tìm số nhỏ nhất,
đếm số lượng

498
00:21:33,340 --> 00:21:35,450
Tìm dòng bắt đầu với 
kí hiệu #,

499
00:21:35,450 --> 00:21:36,980
kiểu như thế.

500
00:21:36,980 --> 00:21:40,700
Nó tự hiểu được nhiệm vụ khái quát của mình,

501
00:21:40,700 --> 00:21:43,800
và ta phải dựng một 
vòng lặp để hoàn thành nhiệm vụ đó.

502
00:21:43,800 --> 00:21:47,630
Giờ ta phải nghĩ 
giống như một cái máy tính.

503
00:21:47,630 --> 00:21:50,886
Ta phải bảo, máy ơi, làm cái này đi,

504
00:21:50,886 --> 00:21:52,260
rồi cứ thế lặp đi lặp lại.

505
00:21:52,260 --> 00:21:54,380
Bao giờ mày lặp đi lặp lại xong tao sẽ được kết quả mong muốn.

506
00:21:54,380 --> 00:21:55,800
Mày phải lặp lại cái này cả triệu lần.

507
00:21:55,800 --> 00:21:57,258
Tao không ngồi đây mà chờ đâu.

508
00:21:57,258 --> 00:21:59,030
Cuối cùng, tôi 
có cái tôi muốn.

509
00:21:59,030 --> 00:22:02,850
Tôi gọi đây là các vòng lặp thông minh,
hay làm sao để đưa trí thông minh 

510
00:22:02,850 --> 00:22:03,580
vào các vòng lặp.

511
00:22:03,580 --> 00:22:06,290

512
00:22:06,290 --> 00:22:09,410
Ví dụ, ta muốn
tìm số lớn nhất.

513
00:22:09,410 --> 00:22:11,760
Nhưng ta phải dựng một 
vòng lặp

514
00:22:11,760 --> 00:22:15,260
trả cho ta số lớn nhất
theo cách tư duy của máy tính

515
00:22:15,260 --> 00:22:18,940
Hãy nghĩ giống như
máy tính.

516
00:22:18,940 --> 00:22:21,960
Ý tưởng là ta sẽ
có một vòng lặp,

517
00:22:21,960 --> 00:22:25,950
và ta sẽ duyệt 
qua các dãy phần tử

518
00:22:25,950 --> 00:22:27,898
vòng lặp sẽ chạy 
nhiều lần.

519
00:22:27,898 --> 00:22:29,606
Nhưng ta sẽ làm theo cách là

520
00:22:29,606 --> 00:22:32,110
chuẩn bị một số thứ
trước khi vòng lặp bắt đầu,

521
00:22:32,110 --> 00:22:34,990
ta sẽ thực hiện điều gì đó
với mỗi phần tử

522
00:22:34,990 --> 00:22:36,344
đang được xử lí.

523
00:22:36,344 --> 00:22:37,760
Và cuối cùng,
ta sẽ có

524
00:22:37,760 --> 00:22:40,500
kết quả mà ta muốn

525
00:22:40,500 --> 00:22:43,310
Ở đoạn giữa này nó đang hoạt động.

526
00:22:43,310 --> 00:22:45,560
Nó hoạt động ở giữa.

527
00:22:45,560 --> 00:22:47,260
Và đây là lúc có kết quả.

528
00:22:47,260 --> 00:22:51,030
Kết quả nằm ở cuối
khi ta có được thông tin 

529
00:22:51,030 --> 00:22:52,360
mình muốn.

530
00:22:52,360 --> 00:22:57,850
Tôi sẽ dùng vòng lặp 
đơn giản này cho vài ví dụ tới đây.

531
00:22:57,850 --> 00:22:59,880
Giờ thì chưa có gì nhiều.

532
00:22:59,880 --> 00:23:02,570
Nó in ra "Before",
sau đó biến "thing"

533
00:23:02,570 --> 00:23:06,150
lần lượt lấy các giá trị
trong dãy này

534
00:23:06,150 --> 00:23:07,110
và nó được in ra màn hình.

