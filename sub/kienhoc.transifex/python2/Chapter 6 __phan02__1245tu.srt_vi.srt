161
00:06:28,783 --> 00:06:32,530
quangdutran Thao reviewed
Ta đang nhét chuỗi "banana",
tức biến fruit,

162
00:06:32,530 --> 00:06:36,610
vào trong hàm len.

163
00:06:36,610 --> 00:06:39,540
Sau đó, hàm len
sẽ hóa phép.

164
00:06:39,540 --> 00:06:42,240
Và ta sẽ có kết quả trả về.

165
00:06:42,240 --> 00:06:44,260
Số 6 sẽ thay thế đoạn này.

166
00:06:44,260 --> 00:06:48,430
Và nó sẽ nhảy vào biến x.
x sẽ mang giá trị là 6.

167
00:06:48,430 --> 00:06:51,040
Tôi bôi loạn hết cái trang này rồi.

168
00:06:51,040 --> 00:06:53,840
Hãy nghĩ về nội dung hàm len.

169
00:06:53,840 --> 00:06:55,630
Có câu lệnh def len này.

170
00:06:55,630 --> 00:06:58,680
Lấy một tham số, chạy vòng lặp gì đó.

171
00:06:58,680 --> 00:07:00,030
Nó sẽ tự tính toán.

172
00:07:00,030 --> 00:07:03,120
Đó là một hàm ta có thể viết
nhưng mà không cần.

173
00:07:03,120 --> 00:07:07,170
Vì nó có sẵn
trong Python rồi.

174
00:07:07,170 --> 00:07:10,764
Vậy ta đã nói về độ dài của chuỗi,

175
00:07:10,764 --> 00:07:12,430
gọi từng kí tự riêng trong chuỗi.

176
00:07:12,430 --> 00:07:15,570
Ta còn có thể chạy vòng lặp
qua các chuỗi.

177
00:07:15,570 --> 00:07:18,490
Ta có thể dùng toán tử index

178
00:07:18,490 --> 00:07:21,990
đưa một biến vào đó
và viết vòng lặp.

179
00:07:21,990 --> 00:07:23,530
Đây là một vòng lặp vô hạn.

180
00:07:23,530 --> 00:07:25,020
Ta có biến fruit

181
00:07:25,020 --> 00:07:27,150
chứa chuỗi kí tự "banana".

182
00:07:27,150 --> 00:07:29,600
Thiết lập index về 0

183
00:07:29,600 --> 00:07:31,640
Ta tạo một vòng lặp while.

184
00:07:31,640 --> 00:07:35,580
Ta hỏi rằng khi nào index
còn nhỏ hơn độ dài của biến fruit,

185
00:07:35,580 --> 00:07:37,706
nhớ là độ dài của biến fruit
là 6 nhé.

186
00:07:37,706 --> 00:07:39,913
Nhưng đừng để dấu 
nhỏ hơn hoặc bằng,

187
00:07:39,913 --> 00:07:41,250
vì sau đó ta sẽ gặp lỗi

188
00:07:41,250 --> 00:07:43,650
Vì kí tự cuối cùng
là ở vị trí số 5.

189
00:07:43,650 --> 00:07:45,680
Ta có thể nói biến letter
bằng fruit[index].

190
00:07:45,680 --> 00:07:48,630
Khi bắt đầu,
index sẽ là 0

191
00:07:48,630 --> 00:07:50,060
Vị trí thứ 0
trong chuỗi fruit

192
00:07:50,060 --> 00:07:51,700
Sau đó in ra index 
và letter.

193
00:07:51,700 --> 00:07:54,330
Lần đầu chạy vòng lặp,

194
00:07:54,330 --> 00:07:56,250
ta sẽ nhìn thấy 0 b.

195
00:07:56,250 --> 00:08:01,930
Sau đó thì tăng toán tử vòng lặp và quay trở lên.

196
00:08:01,930 --> 00:08:03,570
Sau đó ta in ra 1 a.

197
00:08:03,570 --> 00:08:10,580
index cứ tăng 
tới lúc nào bằng 6,

198
00:08:10,580 --> 00:08:13,570
từng kí tự trong chuỗi đã được in ra.

199
00:08:13,570 --> 00:08:16,430
Ta làm vòng lặp không chỉ để in mấy cái này.

200
00:08:16,430 --> 00:08:23,130
Ta sẽ dùng vòng lặp làm cái khác hữu ích hơn.

201
00:08:23,130 --> 00:08:26,950
Nhưng vừa rồi là để minh họa
rằng trong vòng lặp

202
00:08:26,950 --> 00:08:31,410
ta có thể duyệt qua
một chuỗi kí tự

203
00:08:31,410 --> 00:08:35,169
như khi duyệt qua
một list các số vậy.

204
00:08:35,169 --> 00:08:38,630
Vừa rồi là cách dùng vòng lặp vô hạn.

205
00:08:38,630 --> 00:08:42,039
Nếu là vòng lặp hữu hạn thì
còn hay hơn nữa.

206
00:08:42,039 --> 00:08:46,130
Giống như ta đã làm với
dãy các số,

207
00:08:46,130 --> 00:08:50,050
Python nhận biết được string và
cho phép ta viết vòng lặp for,

208
00:08:50,050 --> 00:08:53,390
dùng for và in để duyệt chuỗi kí tự.

209
00:08:53,390 --> 00:08:56,230
Với mỗi kí tự trong
biến fruit,

210
00:08:56,230 --> 00:08:58,270
nhớ rằng ở đây tôi đang dùng tên biến gợi nhớ,

211
00:08:58,270 --> 00:09:01,210
một cách đặt tên biến thông minh.

212
00:09:01,210 --> 00:09:03,760
Hãy chạy đoạn code này

213
00:09:03,760 --> 00:09:06,560
một lần cho mỗi kí tự
trong biến fruit.

214
00:09:06,560 --> 00:09:09,060
Có nghĩa là biến letter sẽ
lấy lần lượt từng

215
00:09:09,060 --> 00:09:14,430
ký tự: B-A-N-A-N-A.
Lần nào nhìn vào đây

216
00:09:14,430 --> 00:09:15,930
tôi cũng lo là mình
đã đánh vần sai.

217
00:09:15,930 --> 00:09:18,819
Tôi nghĩ lần này mình đúng.

218
00:09:18,819 --> 00:09:20,360
Nếu tôi viết lại cuốn sách này,

219
00:09:20,360 --> 00:09:21,750
tôi sẽ không dùng từ "banana" nữa.

220
00:09:21,750 --> 00:09:24,240
Vì tôi sợ viết sai 
cái từ này lắm.

221
00:09:24,240 --> 00:09:27,210
Không biết là nó có mấy chữ N nữa.

222
00:09:27,210 --> 00:09:30,760
Chúng ta đang khái quát hóa lên.

223
00:09:30,760 --> 00:09:34,500
Ta đang để cho Python 
chạy đoạn code này 

224
00:09:34,500 --> 00:09:37,400
với từng kí tự trong biến fruit.

225
00:09:37,400 --> 00:09:40,960
Rồi nó sẽ in ra từng kí tự.

226
00:09:40,960 --> 00:09:46,090
Đây là một phiên bản 
vòng lặp gọn gàng hơn.

227
00:09:46,090 --> 00:09:49,630
Dùng vòng lặp hữu hạn, từ khóa "for"

228
00:09:49,630 --> 00:09:50,640
thay cho từ "while".

229
00:09:50,640 --> 00:09:54,080
Ta có thể so sánh hai vòng lặp này.

230
00:09:54,080 --> 00:09:55,930
Chúng cùng làm một việc thôi.

231
00:09:55,930 --> 00:10:01,120
Bạn có thể thấy các chức năng của cấu trúc "for".

232
00:10:01,120 --> 00:10:03,190
Nó thiết lập index.

233
00:10:03,190 --> 00:10:06,120
Nó tìm kiếm trong biến fruit.

234
00:10:06,120 --> 00:10:08,200
Và nó tăng index lên.

235
00:10:08,200 --> 00:10:10,050
Vậy nó làm giúp ta khá nhiều việc đấy.

236
00:10:10,050 --> 00:10:12,410
Tôi đã chỉ ra trong
bài trước

237
00:10:12,410 --> 00:10:15,300
là cấu trúc for có rất nhiều chức năng.

238
00:10:15,300 --> 00:10:20,360
Nó làm đoạn code của ta
dễ hiểu hơn.

239
00:10:20,360 --> 00:10:25,330
Mấy bước này rất rối và dài

240
00:10:25,330 --> 00:10:26,540
ta không cần 
phải làm như thế.

241
00:10:26,540 --> 00:10:28,450
Vòng for đã giúp ta 

242
00:10:28,450 --> 00:10:31,910
giảm bớt đoạn lằng nhằng này.

243
00:10:31,910 --> 00:10:34,970
Ta đã học nhiều cấu trúc vòng lặp.

244
00:10:34,970 --> 00:10:37,920
Ta có thể tìm chữ cái lớn nhất,
chữ cái nhỏ nhất,

245
00:10:37,920 --> 00:10:44,194
lặp bao nhiêu lần, có bao nhiêu chữ N trong này.

246
00:10:44,194 --> 00:10:45,360
Có bao nhiêu chữ A trong này.

247
00:10:45,360 --> 00:10:48,500
Đây là một cấu trúc đếm, hay

248
00:10:48,500 --> 00:10:49,660
là tìm kí tự.

249
00:10:49,660 --> 00:10:51,380
Ta có từ "banana".

250
00:10:51,380 --> 00:10:52,690
Biến count = 0.

251
00:10:52,690 --> 00:10:55,695
Với từng chữ trong từ đó,
duyệt duyệt duyệt,

252
00:10:55,695 --> 00:10:57,260
và kết quả như thế đó

253
00:10:57,260 --> 00:10:59,030
Nó sẽ chạy đoạn này.

254
00:10:59,030 --> 00:11:02,350
Nếu có chữ a,
cộng 1 vào count.

255
00:11:02,350 --> 00:11:04,500
Tóm lại cuối cùng nó sẽ in ra

256
00:11:04,500 --> 00:11:07,615
số chữ a trong từ "banana".

257
00:11:07,615 --> 00:11:10,000
Với tôi chắc nên in ra số chữ n

258
00:11:10,000 --> 00:11:11,480
trong "banana" thì hơn.

259
00:11:11,480 --> 00:11:13,585
Vì tôi không bao giờ
xác định được "banana" có mấy chữ n.

260
00:11:13,585 --> 00:11:15,460
Có vẻ như là hai chữ.

261
00:11:15,460 --> 00:11:18,770
Hoặc là tôi đang viết sai

262
00:11:18,770 --> 00:11:21,320
Về từ "in", tôi rất thích nó nhé.

263
00:11:21,320 --> 00:11:23,020
Tôi thích cái từ "in" này ghê cơ.

264
00:11:23,020 --> 00:11:28,280
Tôi thích cú pháp này, 
với từng chữ cái trong từ "banana".

265
00:11:28,280 --> 00:11:30,750
Với tôi nó nghe thật mượt mà.

266
00:11:30,750 --> 00:11:33,440
Ý nghĩa của câu lệnh
rất rõ ràng dễ hiểu.

267
00:11:33,440 --> 00:11:36,420
Với mỗi kí tự trong từ "banana",
hãy chạy đoạn code 

268
00:11:36,420 --> 00:11:37,080
lùi đầu dòng này.

269
00:11:37,080 --> 00:11:38,730
Đẹp quá đi thôi.

270
00:11:38,730 --> 00:11:40,340
Tôi yêu từ khóa "in".

271
00:11:40,340 --> 00:11:42,730
Nó là một phần yêu thích của tôi trong Python.

272
00:11:42,730 --> 00:11:46,480

273
00:11:46,480 --> 00:11:49,990
Nhắc lại, từ khóa for giúp ta xử lý

274
00:11:49,990 --> 00:11:51,045
toàn bộ các biến vòng lặp.

275
00:11:51,045 --> 00:11:52,420
Nó quét qua dãy này.

276
00:11:52,420 --> 00:11:54,850
Đây là hình biểu diễn.

277
00:11:54,850 --> 00:11:57,900
Nhớ là vòng for
sẽ làm hết việc cho ta.

278
00:11:57,900 --> 00:12:03,370
Biến letter sẽ lấy từng
chữ cái một

279
00:12:03,370 --> 00:12:04,750
trong từ "banana".

280
00:12:04,750 --> 00:12:08,170
Câu lệnh for đang giúp ta di chuyển biến letter.

281
00:12:08,170 --> 00:12:10,980

282
00:12:10,980 --> 00:12:12,130
Được chứ?

283
00:12:12,130 --> 00:12:14,310
Đó là vòng lặp.

284
00:12:14,310 --> 00:12:16,310
Trong Python có sẵn rất nhiều

285
00:12:16,310 --> 00:12:17,768
thứ mà chúng ta ai cũng

286
00:12:17,768 --> 00:12:19,776
cần dùng.

287
00:12:19,776 --> 00:12:22,990
Xóa màn hình cũ đi.

288
00:12:22,990 --> 00:12:24,480
Đây gọi là "slicing" - cắt lát.

289
00:12:24,480 --> 00:12:28,690
Toán tử index thì tìm kiếm
các thứ trong chuỗi.

290
00:12:28,690 --> 00:12:30,400
Nhưng ta có thể
lấy một đoạn con của chuỗi,

291
00:12:30,400 --> 00:12:33,510
bằng cách dùng dấu hai chấm
trong ngoặc vuông.

292
00:12:33,510 --> 00:12:36,300
Gọi là slicing - cắt lát nhé.

293
00:12:36,300 --> 00:12:39,070
Dấu hai chấm

294
00:12:39,070 --> 00:12:43,490
giúp ta khai một vị trí bắt đầu
và một vị trí kết thúc.

295
00:12:43,490 --> 00:12:47,020
Nhưng vị trí kết thúc thì chỉ tính đến
kí tự đằng trước nó thôi, không tính kí tự 

296
00:12:47,020 --> 00:12:47,780
ở vị trí đó.

297
00:12:47,780 --> 00:12:50,530
Nhớ là không bao gồm
kí tự ở vị trí kết thúc nhé.

298
00:12:50,530 --> 00:12:53,040
Giống như kiểu bắt đầu từ 0,

299
00:12:53,040 --> 00:12:54,430
bạn sẽ quen ngay thôi.

300
00:12:54,430 --> 00:12:59,240
Nhưng lần đầu thì sẽ thấy 
hơi lạ.

301
00:12:59,240 --> 00:13:02,820
Nếu ta lấy từ 0 đến 4,
tôi đọc đoạn này như vậy.

302
00:13:02,820 --> 00:13:07,540
s sub từ 0 đến 4, hay
nói cách khác là từ 0 đến trước 4,

303
00:13:07,540 --> 00:13:08,970
nhưng không bao gồm 4.

304
00:13:08,970 --> 00:13:12,310
Hiểu là hãy in ra đoạn kí tự tính

305
00:13:12,310 --> 00:13:14,150
đến trước số 4.

306
00:13:14,150 --> 00:13:15,610
Không tính kí tự 
ở vị trí thứ 4.

307
00:13:15,610 --> 00:13:17,945
Nó in ra "mont".

308
00:13:17,945 --> 00:13:19,610
Được chứ?

309
00:13:19,610 --> 00:13:22,690
Tiếp theo là 6 cho tới 7.

310
00:13:22,690 --> 00:13:26,750
Nó bắt đầu từ 6 đến 7
nhưng không bao gồm 7.

311
00:13:26,750 --> 00:13:31,820
Và chỉ in ra chữ P.
Còn ở đây có thể

312
00:13:31,820 --> 00:13:36,160
bạn tưởng là sẽ bị lỗi.

313
00:13:36,160 --> 00:13:38,360
Nhưng với trường hợp này Python khá rộng lượng.

314
00:13:38,360 --> 00:13:40,170
Nó không báo lỗi ở đây.

315
00:13:40,170 --> 00:13:43,000
Nếu đi từ 6 tới nhưng không bao gồm 20,

316
00:13:43,000 --> 00:13:45,470
nó sẽ dừng ở vị trí 
cuối cùng của chuỗi.

317
00:13:45,470 --> 00:13:47,000
Vậy là từ 6 cho đến hết.

318
00:13:47,000 --> 00:13:49,990
Số kết thúc có vượt quá đi nữa

319
00:13:49,990 --> 00:13:51,500
thì bạn cũng sẽ không gặp lỗi.

320
00:13:51,500 --> 00:13:53,280
Nó in ra từ "python".

