1
00:00:00,000 --> 00:00:00,499
https://youtu.be/L2IUSArpG98
quangdutran 16/06 Thao reviewed

2
00:00:00,499 --> 00:00:02,800
Chào mừng các bạn
đến với chương 6.

3
00:00:02,800 --> 00:00:05,050
Chương này ta sẽ nói về
chuỗi - String.

4
00:00:05,050 --> 00:00:08,680
Bắt đầu từ nay bài sẽ khó hơn.

5
00:00:08,680 --> 00:00:12,970
Như mọi khi, tài liệu, đoạn video và các slide này

6
00:00:12,970 --> 00:00:15,500
được cấp quyền sử dụng theo giấy phép Creative Commons Attribution.

7
00:00:15,500 --> 00:00:18,292
Tôi muốn các bạn
dùng tài liệu này

8
00:00:18,292 --> 00:00:19,500
Tôi muốn tạo ra nhiều
giáo viên hơn.

9
00:00:19,500 --> 00:00:21,700
Để ai cũng có thể
dạy người khác với tài liệu này

10
00:00:21,700 --> 00:00:23,990
Các bạn có thể dùng nó tùy thích.

11
00:00:23,990 --> 00:00:26,740
Ta đã dùng string ngay từ
những buổi đầu

12
00:00:26,740 --> 00:00:28,950
Nếu ta không làm việc với
các chuỗi

13
00:00:28,950 --> 00:00:31,390
thì làm sao có thể in ra
dòng chữ "Hello World".

14
00:00:31,390 --> 00:00:34,470
Chúa cũng biết ngôn ngữ lập trình thì cần phải

15
00:00:34,470 --> 00:00:35,800
in được "Hello World".

16
00:00:35,800 --> 00:00:39,640
Ta đã dùng chúng,
đặc biệt là các hằng.

17
00:00:39,640 --> 00:00:42,910
Trong chương này 
ta sẽ tìm hiểu sâu hơn.

18
00:00:42,910 --> 00:00:43,670
Ôi.

19
00:00:43,670 --> 00:00:46,980
String là một chuỗi các
kí tự

20
00:00:46,980 --> 00:00:50,410
Bạn có thể dùng nháy đơn
hoặc nháy đôi trong Python

21
00:00:50,410 --> 00:00:51,420
để khai một chuỗi.

22
00:00:51,420 --> 00:00:54,270
Ở đây là hai hằng string:
hello và there

23
00:00:54,270 --> 00:00:58,210
và chúng được nhét vào
hai biến str1 và str2

24
00:00:58,210 --> 00:01:00,560
Ta có thể nối chúng 
bằng biểu tượng dấu cộng.

25
00:01:00,560 --> 00:01:03,860
Python đủ thông minh để nhận ra
đây là các chuỗi.

26
00:01:03,860 --> 00:01:05,922
Nó biết làm gì với chúng.

27
00:01:05,922 --> 00:01:08,380
Lưu ý là dấu cộng
sẽ không thêm khoảng trắng vào đây.

28
00:01:08,380 --> 00:01:11,750
Vì khi ta in biến bob
thì hello và there

29
00:01:11,750 --> 00:01:14,870
ở ngay sát nhau.

30
00:01:14,870 --> 00:01:18,380
Ví dụ nếu ta đang đọc

31
00:01:18,380 --> 00:01:19,780
mức lương, giờ làm các thứ,

32
00:01:19,780 --> 00:01:20,946
và ta đã làm thao tác
đổi giá trị.

33
00:01:20,946 --> 00:01:25,440
Đây là một chuỗi có các kí tự 1,2,3
chứ không phải số 123,

34
00:01:25,440 --> 00:01:27,630
nháy, 123, nháy.

35
00:01:27,630 --> 00:01:28,850
Ta không thể thêm số 1 vào đây.

36
00:01:28,850 --> 00:01:30,892
Ta sẽ gặp lỗi

37
00:01:30,892 --> 00:01:32,725
Đến giờ các bạn có thể đoán được

38
00:01:32,725 --> 00:01:34,920
ta sẽ biến cái này
thành một số nguyên,

39
00:01:34,920 --> 00:01:36,819
sử dụng hàm INT
có sẵn.

40
00:01:36,819 --> 00:01:38,360
Các bạn có thấy mình biết được nhiều Python phết rồi không?

41
00:01:38,360 --> 00:01:39,890
Tuyệt quá đúng không?

42
00:01:39,890 --> 00:01:42,040
Tôi chỉ cần nói hãy gọi hàm INT

43
00:01:42,040 --> 00:01:43,640
là các bạn hiểu ngay.

44
00:01:43,640 --> 00:01:45,855
Xin lỗi, tôi phấn khích quá.

45
00:01:45,855 --> 00:01:48,010
Ta đổi nó thành số nguyên.

46
00:01:48,010 --> 00:01:49,180
Và sau đó 
cộng thêm 1.

47
00:01:49,180 --> 00:01:50,870
Và ta có số 124.

48
00:01:50,870 --> 00:01:52,370
Đã xong.

49
00:01:52,370 --> 00:01:54,730
Ta đã làm việc rất nhiều với 
các chuỗi.

50
00:01:54,730 --> 00:01:57,150
Chuỗi và kiểu số
là hai

51
00:01:57,150 --> 00:01:59,880
kiểu dữ liệu
mà chương trình hay dùng

52
00:01:59,880 --> 00:02:03,220
Ta vừa đọc
và chuyển kiểu dữ liệu.

53
00:02:03,220 --> 00:02:05,880
Đây là hàm raw_input

54
00:02:05,880 --> 00:02:08,470
đã dùng trong các chương trình trước.

55
00:02:08,470 --> 00:02:10,040
Hàm raw_input
nhận một chuỗi

56
00:02:10,040 --> 00:02:11,400
và đặt nó vào một biến.

57
00:02:11,400 --> 00:02:14,020
Nếu tôi lấy chuỗi "Chuck",
thì biến sẽ chứa chuỗi

58
00:02:14,020 --> 00:02:20,000
C-H-U-C-K. Dù ta có đánh
số vào thì nó vẫn là chuỗi kí tự.

59
00:02:20,000 --> 00:02:23,640
Dù đánh vào 1-0-0 thì
vẫn không thể làm phép trừ 10.

60
00:02:23,640 --> 00:02:25,180
Nó sẽ hiện ra đoạn báo lỗi.

61
00:02:25,180 --> 00:02:27,240
Đoạn báo lỗi mặt buồn thiu.

62
00:02:27,240 --> 00:02:30,560

63
00:02:30,560 --> 00:02:33,470
Đương nhiên là khi chuyển đổi nó

64
00:02:33,470 --> 00:02:38,040
bằng hàm int hoặc float thì

65
00:02:38,040 --> 00:02:39,470
ta có thể trừ đi 10 rồi.

66
00:02:39,470 --> 00:02:41,379
Ta đã làm cái này
nhiều lần rồi.

67
00:02:41,379 --> 00:02:43,420
Ta đã dùng string
và điều khiển chúng,

68
00:02:43,420 --> 00:02:45,079
biến đổi chúng thành
các kiểu khác nhau.

69
00:02:45,079 --> 00:02:46,870
Giờ chúng ta sẽ

70
00:02:46,870 --> 00:02:48,670
nghiên cứu sâu hơn
về string.

71
00:02:48,670 --> 00:02:52,210
Ta thấy rằng string có thể
cho phép ta đọc

72
00:02:52,210 --> 00:02:53,620
từng kí tự trong chuỗi.

73
00:02:53,620 --> 00:02:56,440
Và ta có thể làm 
nhiều trò với chức năng đó.

74
00:02:56,440 --> 00:03:00,400
String là một chuỗi
các kí tự.

75
00:03:00,400 --> 00:03:03,280
Ta có thể xem trong nó có gì
thông qua toán tử index (chỉ mục),

76
00:03:03,280 --> 00:03:05,564
tức các ngoặc vuông.

77
00:03:05,564 --> 00:03:07,230
Ta đã thấy ngoặc vuông
trong các list.

78
00:03:07,230 --> 00:03:08,896
Bạn có thể thấy các list số 

79
00:03:08,896 --> 00:03:10,930
có điểm tương tự với

80
00:03:10,930 --> 00:03:12,900
các string là một dạng list đặc biệt

81
00:03:12,900 --> 00:03:14,340
chứa các phần tử là kí tự.

82
00:03:14,340 --> 00:03:19,220
Ta lấy chuỗi kí tự
"banana".

83
00:03:19,220 --> 00:03:21,140
Kí tự đầu tiên 
bắt đầu ở số 0.

84
00:03:21,140 --> 00:03:24,060
Toán tử này đọc là "sub".

85
00:03:24,060 --> 00:03:26,616
Biến letter bằng fruit sub 1.

86
00:03:26,616 --> 00:03:27,990
Và đó là kí tự thứ hai.

87
00:03:27,990 --> 00:03:29,680
Nghe có vẻ lạ

88
00:03:29,680 --> 00:03:32,630
khi chữ cái đầu tiên ở số 0
còn chữ cái thứ hai

89
00:03:32,630 --> 00:03:34,220
ở số 1.

90
00:03:34,220 --> 00:03:36,990
Nó giống với hệ thống 
thang máy cũ

91
00:03:36,990 --> 00:03:41,020
ở châu Âu, tầng một
đánh số 0,

92
00:03:41,020 --> 00:03:42,830
tầng hầm là -1, còn tầng hai đánh số 1.

93
00:03:42,830 --> 00:03:43,480
Hiểu không,

94
00:03:43,480 --> 00:03:44,670
nó cũng tương tự vậy.

95
00:03:44,670 --> 00:03:48,620
Thực ra, bắt đầu từ 0

96
00:03:48,620 --> 00:03:51,120
sẽ hay hơn là bắt đầu từ 1.

97
00:03:51,120 --> 00:03:52,430
Bạn sẽ quen dần thôi.

98
00:03:52,430 --> 00:03:55,000
Sau này bạn sẽ thấy nó có

99
00:03:55,000 --> 00:03:55,680
một số điểm lợi.

100
00:03:55,680 --> 00:03:59,855
Giờ hãy cứ bắt đầu với 0.

101
00:03:59,855 --> 00:04:01,300
Đó là luật rồi.

102
00:04:01,300 --> 00:04:02,960
Hãy nhớ lấy.

103
00:04:02,960 --> 00:04:06,410
Ở vị trí 0 là B,
vị trí 1 là A,

104
00:04:06,410 --> 00:04:08,820
vị trí 2 là N, cứ thế.

105
00:04:08,820 --> 00:04:11,790
Và ta gọi cú pháp này 
là fruit sub 1.

106
00:04:11,790 --> 00:04:16,160
Đó là kí tự thứ 1
của biến "fruit".

107
00:04:16,160 --> 00:04:18,220
Sau đó là một chữ A.
Vậy nên fruit[1]

108
00:04:18,220 --> 00:04:21,990
chạy vào trong "banana"
và tìm vị trí thứ 1,

109
00:04:21,990 --> 00:04:23,910
và trả lại cho ta chữ cái
ở vị trí số 1.

110
00:04:23,910 --> 00:04:25,870
sub nghĩa là thế.

111
00:04:25,870 --> 00:04:29,710
Ở trong dấu ngoặc này
có thể là một biểu thức.

112
00:04:29,710 --> 00:04:33,860
Nếu cho n = 3,
n - 1 sẽ cho kết quả là 2.

113
00:04:33,860 --> 00:04:37,160
fruit[2] sẽ là ký tự N.

114
00:04:37,160 --> 00:04:37,780
Được chứ?

115
00:04:37,780 --> 00:04:39,790
Đó là fruit[2].

116
00:04:39,790 --> 00:04:42,110
fruit[2] là kí tự
thứ 3.

117
00:04:42,110 --> 00:04:44,330
Số bắt đầu là số 0.

118
00:04:44,330 --> 00:04:49,850
Ta đọc dấu ngoặc vuông này 
là "sub", fruit sub 1, fruit sub 2.

119
00:04:49,850 --> 00:04:56,050
Python sẽ cảnh báo 
nếu bạn dùng

120
00:04:56,050 --> 00:04:57,870
số vượt quá độ dài của chuỗi.

121
00:04:57,870 --> 00:05:01,130
Chuỗi này có 3 kí tự,
thứ tự là 0, 1, 2.

122
00:05:01,130 --> 00:05:05,430
Nếu khai là sub 5
ta sẽ bị lỗi.

123
00:05:05,430 --> 00:05:08,850
Tôi mong là bạn sẽ không 
hoảng sợ

124
00:05:08,850 --> 00:05:10,280
khi nhìn thấy thông báo lỗi này.

125
00:05:10,280 --> 00:05:12,660
Cái traceback lỗi này

126
00:05:12,660 --> 00:05:14,585
chỉ là cảnh báo của Python thôi.

127
00:05:14,585 --> 00:05:18,800
Đừng xem nó như
Python đang khó chịu

128
00:05:18,800 --> 00:05:22,010
mà hãy hiểu nó là
lỗi index.

129
00:05:22,010 --> 00:05:23,870
Số thứ tự mà ta khai
vượt quá giới hạn chuỗi.

130
00:05:23,870 --> 00:05:25,649
Ờ nhỉ, sao mình lại cho 5.

131
00:05:25,649 --> 00:05:26,440
Có 3 kí tự thôi mà.

132
00:05:26,440 --> 00:05:29,110
Tớ nhầm đấy, cám ơn Python nhé.

133
00:05:29,110 --> 00:05:30,000
Tớ biết ơn lắm.

134
00:05:30,000 --> 00:05:31,370
Cám ơn nhé.

135
00:05:31,370 --> 00:05:34,890
Đương nhiên traceback này không phải mặt cười.

136
00:05:34,890 --> 00:05:37,830
Nhưng nó chỉ là mặt bối rối thôi.

137
00:05:37,830 --> 00:05:40,100
Python đang không hiểu 
gì cả

138
00:05:40,100 --> 00:05:41,975
và nó đang nói cho bạn
chỗ nó không hiểu.

139
00:05:41,975 --> 00:05:42,940
Được chứ?

140
00:05:42,940 --> 00:05:44,910
Đừng nghĩ đây là cái gì tiêu cực.

141
00:05:44,910 --> 00:05:45,910
Python không ghét bạn đâu.

142
00:05:45,910 --> 00:05:50,120
Python yêu bạn lắm, yêu cả tôi nữa.

143
00:05:50,120 --> 00:05:52,617
Vậy, string có các kí tự riêng lẻ

144
00:05:52,617 --> 00:05:54,450
mà ta có thể gọi ra bằng toán tử index.

145
00:05:54,450 --> 00:05:56,180
String cũng có độ dài.

146
00:05:56,180 --> 00:05:58,900
Ta có thể gọi một hàm viết sẵn
là "len"

147
00:05:58,900 --> 00:06:03,040
đưa chuỗi vào làm tham số, có thể là một biến

148
00:06:03,040 --> 00:06:03,960
hoặc một hằng.

149
00:06:03,960 --> 00:06:06,060
Nó sẽ cho ta biết
chuỗi có bao nhiêu kí tự.

150
00:06:06,060 --> 00:06:08,990
Chuỗi "banana" có độ dài 6 kí tự

151
00:06:08,990 --> 00:06:09,929
từ kí tự thứ 0 đến
thứ 5.

152
00:06:09,929 --> 00:06:11,220
Đừng lầm lẫn nhé.

153
00:06:11,220 --> 00:06:15,572
Kí tự cuối cùng ở vị trí 5,
nhưng nó cũng là kí tự thứ 6.

154
00:06:15,572 --> 00:06:17,030
Độ dài thì vẫn là độ dài.

155
00:06:17,030 --> 00:06:20,290
Không phải là trừ đi 1 nhé.

156
00:06:20,290 --> 00:06:22,150
Vậy "len" là một hàm có sẵn.

157
00:06:22,150 --> 00:06:23,850
Ta không cần viết ra nó.

158
00:06:23,850 --> 00:06:25,951
Như đã nói trong chương hàm,

159
00:06:25,951 --> 00:06:27,825
có những phần mà Python

160
00:06:27,825 --> 00:06:28,783
đã có sẵn rồi.

