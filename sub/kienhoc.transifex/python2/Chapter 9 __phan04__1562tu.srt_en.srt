592
00:28:26,160 --> 00:28:27,720
https://youtu.be/FS-WZWUlPlM
run this little
indented code once

593
00:28:27,720 --> 00:28:30,590
for each item in the
collection and key

594
00:28:30,590 --> 00:28:32,830
then becomes our
iteration variable,

595
00:28:32,830 --> 00:28:35,150
and key is very mnemonic here.

596
00:28:35,150 --> 00:28:37,910
It doesn't know
that they're keys.

597
00:28:37,910 --> 00:28:44,050
And so keys, the key here,
is that there's a bit,

598
00:28:44,050 --> 00:28:47,420
the important concept
here is that dictionaries

599
00:28:47,420 --> 00:28:49,100
are key value pairs.

600
00:28:49,100 --> 00:28:51,400
And so this is only
one variable and so

601
00:28:51,400 --> 00:28:53,400
it actually decides
that they've decided

602
00:28:53,400 --> 00:28:56,230
it goes through the keys,
which is actually quite useful.

603
00:28:56,230 --> 00:28:59,340
So key is going to take
on the successive, values

604
00:28:59,340 --> 00:29:02,800
of the labels, not the
successive values of the value

605
00:29:02,800 --> 00:29:04,030
stored at the labels.

606
00:29:04,030 --> 00:29:07,570
But it's really easy for
us to retrieve the contents

607
00:29:07,570 --> 00:29:10,250
at that label, counts sub key.

608
00:29:10,250 --> 00:29:13,750
So we're going to use the key
chuck, fred, jan to look up

609
00:29:13,750 --> 00:29:18,190
the 140 to 100 and so it
prints out the key and then

610
00:29:18,190 --> 00:29:20,700
the value added, the
key and the value added,

611
00:29:20,700 --> 00:29:22,170
and the key and the value.

612
00:29:22,170 --> 00:29:25,780
And so we're able to sort
of go through the dictionary

613
00:29:25,780 --> 00:29:27,530
and look at all the
key value pairs, which

614
00:29:27,530 --> 00:29:30,640
is the common thing that
you really want to do.

615
00:29:30,640 --> 00:29:31,140
OK?

616
00:29:31,140 --> 00:29:35,250

617
00:29:35,250 --> 00:29:37,695
Now there's some methods
inside of dictionaries

618
00:29:37,695 --> 00:29:40,540
that allow us to
convert dictionaries

619
00:29:40,540 --> 00:29:45,520
into lists of things and so if
you simply take a dictionary,

620
00:29:45,520 --> 00:29:49,220
so here's a little dictionary
with three items in it,

621
00:29:49,220 --> 00:29:51,970
and we can say list sub and then
give a dictionary name, right

622
00:29:51,970 --> 00:29:54,880
there, and then that
converts it into a list

623
00:29:54,880 --> 00:29:57,690
but it's just a
list of the keys.

624
00:29:57,690 --> 00:30:01,470
We can also say jjj dot keys,
kind of do the same thing,

625
00:30:01,470 --> 00:30:05,150
say give me a list
consisting of the keys.

626
00:30:05,150 --> 00:30:08,740
And then jjj dot values gives
you a list of the values.

627
00:30:08,740 --> 00:30:10,720
142 and a 100.

628
00:30:10,720 --> 00:30:12,836
Of course they're not
in the same order.

629
00:30:12,836 --> 00:30:14,210
Now interestingly,
as long as you

630
00:30:14,210 --> 00:30:17,690
don't modify the dictionary,
the order of these two things

631
00:30:17,690 --> 00:30:20,180
corresponds, as long
as in between here

632
00:30:20,180 --> 00:30:21,410
you're not changing it.

633
00:30:21,410 --> 00:30:25,010
So the first jan maps to
100, chuck maps to one,

634
00:30:25,010 --> 00:30:26,910
and fred maps to 42.

635
00:30:26,910 --> 00:30:30,051
So the order, you
can't predict the order

636
00:30:30,051 --> 00:30:32,550
they're going to come out but
these two things will come out

637
00:30:32,550 --> 00:30:36,340
in the same order whatever
that order happens to be.

638
00:30:36,340 --> 00:30:39,540
OK and so there's
one more thing.

639
00:30:39,540 --> 00:30:42,060
So we got the keys,
we've got the values,

640
00:30:42,060 --> 00:30:44,230
and we have a
thing called items.

641
00:30:44,230 --> 00:30:47,620
Items also returns a list.

642
00:30:47,620 --> 00:30:52,900
It's a list, but it's a list
of what Python calls, tuples.

643
00:30:52,900 --> 00:30:54,940
That's what the next
chapter is about.

644
00:30:54,940 --> 00:30:57,900
We'll talk more about
tuples in the next chapter.

645
00:30:57,900 --> 00:31:01,180
A tuple is a key value pair.

646
00:31:01,180 --> 00:31:03,550
So this list has
three things in it.

647
00:31:03,550 --> 00:31:06,050
One, two, three.

648
00:31:06,050 --> 00:31:07,800
The first one is
jan maps to a 100,

649
00:31:07,800 --> 00:31:10,220
the second one is
chuck maps to one,

650
00:31:10,220 --> 00:31:12,740
the third one is
fred maps to 42.

651
00:31:12,740 --> 00:31:15,560
So just kind of bear
with me for a second,

652
00:31:15,560 --> 00:31:18,990
we'll hit this a little
harder in the next chapter.

653
00:31:18,990 --> 00:31:21,700
But the place that the city
and more this works really

654
00:31:21,700 --> 00:31:23,901
beautifully is on a for loop.

655
00:31:23,901 --> 00:31:26,400
Now for those of you who have
programmed in other languages,

656
00:31:26,400 --> 00:31:28,070
this will be kind of weird.

657
00:31:28,070 --> 00:31:30,900
Because other languages
have iterations.

658
00:31:30,900 --> 00:31:33,660
But they don't have two
iteration variables.

659
00:31:33,660 --> 00:31:35,460
Python has two
iteration variables.

660
00:31:35,460 --> 00:31:37,276
It can be used for
many things but one

661
00:31:37,276 --> 00:31:38,650
of the things that
it's used for,

662
00:31:38,650 --> 00:31:42,680
that's really quite nice is
we can have two iterations

663
00:31:42,680 --> 00:31:47,070
variables, this jj items
returns pairs of things,

664
00:31:47,070 --> 00:31:50,160
and then aaa and
bb are iteration

665
00:31:50,160 --> 00:31:54,750
variables the sort of
move in, is synchronized,

666
00:31:54,750 --> 00:31:56,630
are synchronized as
they move through.

667
00:31:56,630 --> 00:32:07,290
So aaa takes on the value of
the key, bbb takes on the value.

668
00:32:07,290 --> 00:32:13,090
And then the loop runs ones then
aaa is advance to the next key,

669
00:32:13,090 --> 00:32:16,160
and bbb is advanced to the
next value simultaneously,

670
00:32:16,160 --> 00:32:17,420
synchronized.

671
00:32:17,420 --> 00:32:19,780
Then they print that
out then it advances

672
00:32:19,780 --> 00:32:22,700
to the next one, and the next
one, and they print that out.

673
00:32:22,700 --> 00:32:27,740
So they are moving in
a synchronized way.

674
00:32:27,740 --> 00:32:31,080
Now again the order Jan,
Chuck, Fred is not the same,

675
00:32:31,080 --> 00:32:34,060
but the correspondence
between Jan 100, Chuck one

676
00:32:34,060 --> 00:32:37,070
and Fred, that's going to work.

677
00:32:37,070 --> 00:32:40,230
And so basically
as these things go,

678
00:32:40,230 --> 00:32:42,390
they work their way
through whatever order

679
00:32:42,390 --> 00:32:44,070
they're stored in
the dictionary.

680
00:32:44,070 --> 00:32:45,460
So this is quite nice.

681
00:32:45,460 --> 00:32:48,900
Two iteration variables
going through key value.

682
00:32:48,900 --> 00:32:52,805
Now if I was making
these names mnemonic,

683
00:32:52,805 --> 00:32:54,180
and they made more
sense, I would

684
00:32:54,180 --> 00:32:58,570
call this the key variable and
that be the value variable.

685
00:32:58,570 --> 00:33:00,590
But for now, I'm just
using kind of silly names

686
00:33:00,590 --> 00:33:02,930
to show you that key and
value are not special,

687
00:33:02,930 --> 00:33:05,590
they're not Python
reserved words in any way,

688
00:33:05,590 --> 00:33:09,310
they're just a good way to name
these things key value pairs.

689
00:33:09,310 --> 00:33:12,030
OK.

690
00:33:12,030 --> 00:33:16,160
OK, now we're going to
circle all the way back

691
00:33:16,160 --> 00:33:19,200
to the beginning, all the way
back to the first lecture.

692
00:33:19,200 --> 00:33:24,020
And I gave you this program,
I said don't worry about it,

693
00:33:24,020 --> 00:33:25,740
will learn about it later.

694
00:33:25,740 --> 00:33:27,730
Well now later.

695
00:33:27,730 --> 00:33:30,120
At this point, you should
be able to understand

696
00:33:30,120 --> 00:33:33,520
every line of this program.

697
00:33:33,520 --> 00:33:35,320
This is the program
that's going to count

698
00:33:35,320 --> 00:33:39,110
the most common word in a file.

699
00:33:39,110 --> 00:33:40,720
So let's walk
through what it does

700
00:33:40,720 --> 00:33:45,650
and hopefully by now this
will make a lot of sense.

701
00:33:45,650 --> 00:33:46,154
OK

702
00:33:46,154 --> 00:33:47,570
So we're going to
start out, we're

703
00:33:47,570 --> 00:33:49,570
going to ask for file name.

704
00:33:49,570 --> 00:33:52,150
You're going to open
that file for read,

705
00:33:52,150 --> 00:33:55,280
then because we know it's
not a very large file, we're

706
00:33:55,280 --> 00:33:58,700
going to read it all in one
go, so handle dot read says,

707
00:33:58,700 --> 00:34:01,690
read the whole file new lines
and all, blanks, new lines,

708
00:34:01,690 --> 00:34:05,819
whatever, and put it in
a variable called text.

709
00:34:05,819 --> 00:34:07,360
Just mnemonic,
remember I'm starting,

710
00:34:07,360 --> 00:34:09,920
this one I'm using
mnemonic variable names,

711
00:34:09,920 --> 00:34:13,320
then go through that
whole string, which

712
00:34:13,320 --> 00:34:14,670
was the whole file.

713
00:34:14,670 --> 00:34:16,610
Go through and split it all.

714
00:34:16,610 --> 00:34:19,810
New lines don't hurt it, new
lines are treated like blanks,

715
00:34:19,810 --> 00:34:22,555
and it understands all that,
it throws the new lines away

716
00:34:22,555 --> 00:34:23,929
and the blanks
away and splits it

717
00:34:23,929 --> 00:34:28,540
into a beautiful list of
just words with no blanks.

718
00:34:28,540 --> 00:34:30,520
In the list of the
words in that file

719
00:34:30,520 --> 00:34:33,020
ends up in the variable words.

720
00:34:33,020 --> 00:34:37,070
Words is a list, text is
a string, words is a list.

721
00:34:37,070 --> 00:34:40,340
Then what I do is the pattern
of accumulating counters

722
00:34:40,340 --> 00:34:41,610
in a dictionary.

723
00:34:41,610 --> 00:34:45,850
I make an empty dictionary,
I have the word variable

724
00:34:45,850 --> 00:34:49,350
goes to all the words, and
then I just say counts of word

725
00:34:49,350 --> 00:34:51,370
equals counts word dot get.

726
00:34:51,370 --> 00:34:52,639
Word comma 0 plus 1.

727
00:34:52,639 --> 00:34:55,350
That, like we just
got done saying,

728
00:34:55,350 --> 00:34:59,900
it both creates and or
increments the value

729
00:34:59,900 --> 00:35:02,030
in the dictionary as needed.

730
00:35:02,030 --> 00:35:05,180
So now at this point
in the program,

731
00:35:05,180 --> 00:35:11,690
we have a full dictionary
with the word colon count.

732
00:35:11,690 --> 00:35:13,842
OK, and there's many them.

733
00:35:13,842 --> 00:35:15,050
All the words all the counts.

734
00:35:15,050 --> 00:35:16,395
Not in any particular order.

735
00:35:16,395 --> 00:35:17,770
So now what we're
going to do, is

736
00:35:17,770 --> 00:35:20,070
we're going to write
a largest loop.

737
00:35:20,070 --> 00:35:23,762
Find the largest, which is
another thing we've done.

738
00:35:23,762 --> 00:35:25,220
So not only do I
not need know what

739
00:35:25,220 --> 00:35:27,340
the largest count
I've seen so far,

740
00:35:27,340 --> 00:35:29,317
I need to know
what word that is.

741
00:35:29,317 --> 00:35:31,150
So I am going to set
the largest count we've

742
00:35:31,150 --> 00:35:33,300
seen so far to none,
set the largest

743
00:35:33,300 --> 00:35:35,420
word we've seen so far
to none, and then I'm

744
00:35:35,420 --> 00:35:38,050
going to use this two
iteration variable

745
00:35:38,050 --> 00:35:40,965
pattern to say go through
the key value pairs, word,

746
00:35:40,965 --> 00:35:43,370
and count.

747
00:35:43,370 --> 00:35:47,120
In counts item, so it's going
to just go through all of them

748
00:35:47,120 --> 00:35:50,220
and then I'm going to ask,
if the largest number I've

749
00:35:50,220 --> 00:35:53,697
seen so far is none, or
the current count that I'm

750
00:35:53,697 --> 00:35:55,530
looking at, is greater
than the largest I've

751
00:35:55,530 --> 00:36:01,150
seen so far, keep them.

752
00:36:01,150 --> 00:36:04,270
Take the current word stick
it and biggest word so far,

753
00:36:04,270 --> 00:36:07,170
take the current account stick
it in the biggest count so far.

754
00:36:07,170 --> 00:36:12,010
So this is going to run through
all of the word count pairs,

755
00:36:12,010 --> 00:36:15,700
word count key value pairs,
and then when it comes out,

756
00:36:15,700 --> 00:36:18,420
it's going to print out the
word that's the most common

757
00:36:18,420 --> 00:36:20,800
and how many times.

758
00:36:20,800 --> 00:36:24,080
So if we feed in that context
it will run all this stuff

759
00:36:24,080 --> 00:36:27,050
and print out, Oh the,
is the most common word

760
00:36:27,050 --> 00:36:29,040
and appeared seven times.

761
00:36:29,040 --> 00:36:31,505
Or if I print the stuff
that was two slides back,

762
00:36:31,505 --> 00:36:34,620
words dot txt from
the actual textbook,

763
00:36:34,620 --> 00:36:36,620
then it says the word
two is the most common

764
00:36:36,620 --> 00:36:37,810
and happened 16 times.

765
00:36:37,810 --> 00:36:43,800
So I could easily throw 10
million, 10 million words

766
00:36:43,800 --> 00:36:46,370
through this thing and it
would just be totally happy.

767
00:36:46,370 --> 00:36:47,030
Right?

768
00:36:47,030 --> 00:36:49,740
And so this is not that
complex of a problem,

769
00:36:49,740 --> 00:36:52,710
but it's using a whole bunch of
idioms that we've been using.

770
00:36:52,710 --> 00:36:55,160
The splitting of
words, the accumulation

771
00:36:55,160 --> 00:36:59,200
of multiple counter and a
dictionary, and so it's sort of

772
00:36:59,200 --> 00:37:02,760
is, the beginning of doing
some kind of data analysis

773
00:37:02,760 --> 00:37:04,930
that's hard for humans
to do, and error

774
00:37:04,930 --> 00:37:06,140
prone for humans to do.

775
00:37:06,140 --> 00:37:08,530
And so this is we're
reviewing collections,

776
00:37:08,530 --> 00:37:10,432
we've introduced dictionaries.

777
00:37:10,432 --> 00:37:12,390
We've done the most common
word pattern, talked

778
00:37:12,390 --> 00:37:14,770
about that, a lack
of order, I get

779
00:37:14,770 --> 00:37:17,450
that a bunch of times,
and we've looked ahead

780
00:37:17,450 --> 00:37:20,910
at tuples, which is the next,
the third kind of collection

781
00:37:20,910 --> 00:37:22,890
that we're going to
talk about and they're

782
00:37:22,890 --> 00:37:25,840
actually in some ways a little
simpler than dictionaries,

783
00:37:25,840 --> 00:37:27,220
and simpler than lists.

784
00:37:27,220 --> 00:37:31,240
So see you in the next lecture.

785
00:37:31,240 --> 00:37:33,088
Chapter 10, tuples.

786
00:37:33,088 --> 00:37:33,588

