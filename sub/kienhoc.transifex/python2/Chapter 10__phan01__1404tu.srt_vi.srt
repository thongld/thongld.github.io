1
00:00:00,000 --> 00:00:00,500
https://youtu.be/odIMpHInDbA
Thao Tran

2
00:00:00,500 --> 00:00:01,050
Xin chào.

3
00:00:01,050 --> 00:00:03,000
Chào mừng các bạn đến với chương 10 của

4
00:00:03,000 --> 00:00:05,260
Python for Informatics, chương này nói về tuple.

5
00:00:05,260 --> 00:00:07,600
Tôi là giảng viên Charles Severance,

6
00:00:07,600 --> 00:00:09,900
cũng chính là tác giả của cuốn sách.

7
00:00:09,900 --> 00:00:12,740
Như mọi khi, các tài liệu được cấp quyền sử dụng theo giấy phép Creative Commons

8
00:00:12,740 --> 00:00:16,830
Attribution, bao gồm các video, slide

9
00:00:16,830 --> 00:00:19,560
và cuốn sách

10
00:00:19,560 --> 00:00:23,450
Tuple là dạng bộ dữ liệu thứ ba

11
00:00:23,450 --> 00:00:24,450
mà ta đã từng nói tới.

12
00:00:24,450 --> 00:00:25,355
Ta đã học về list

13
00:00:25,355 --> 00:00:26,910
và dictionary.

14
00:00:26,910 --> 00:00:29,735
Trong bài về dictionary, chúng ta có nhắc qua về tuple.

15
00:00:29,735 --> 00:00:32,237

16
00:00:32,237 --> 00:00:34,070
Cũng không có gì nhiều để nói về tuple,

17
00:00:34,070 --> 00:00:35,445
bài giảng này sẽ ngắn thôi

18
00:00:35,445 --> 00:00:38,110
bởi vì tuple khá là giống list.

19
00:00:38,110 --> 00:00:44,850
Nó là dạng list không thay đổi được.

20
00:00:44,850 --> 00:00:50,900
Về cú pháp thì gần như giống hệt list,

21
00:00:50,900 --> 00:00:57,060
chỉ khác là dùng dấu ngoặc tròn ( ) thay cho ngoặc vuông [ ]

22
00:00:57,060 --> 00:01:00,070
Đây là một tuple 

23
00:01:00,070 --> 00:01:02,590
có 3 phần tử Glenn, Sally, Joseph.

24
00:01:02,590 --> 00:01:06,360
Chúng được đánh số 0, 1, 2.

25
00:01:06,360 --> 00:01:07,840
Vậy phần tử thứ 2 ở vị trí 1.

26
00:01:07,840 --> 00:01:11,720
x[2] chính là Joseph.

27
00:01:11,720 --> 00:01:16,880
Ta có thể đưa các phần tử vào theo chuỗi
để dùng các hàm max, min

28
00:01:16,880 --> 00:01:18,790
hay sum.

29
00:01:18,790 --> 00:01:22,160
Giá trị lớn nhất trong 1, 9, 2 là 9.

30
00:01:22,160 --> 00:01:23,680
Ta cũng có thể chạy vòng lặp với tuple.

31
00:01:23,680 --> 00:01:25,070
Ở đây y là một tuple.

32
00:01:25,070 --> 00:01:29,300
Gồm 1, 9, 2. Vòng lặp sẽ

33
00:01:29,300 --> 00:01:32,476
duyệt 3 giá trị này.

34
00:01:32,476 --> 00:01:34,100
Nó sẽ in ra 1, 9, 2.

35
00:01:34,100 --> 00:01:36,220
Chạy đoạn code lùi đầu dòng một lần

36
00:01:36,220 --> 00:01:38,420
với mỗi giá trị trong tuple.

37
00:01:38,420 --> 00:01:42,370
Về điểm này tuple rất giống với list.

38
00:01:42,370 --> 00:01:44,320
Nhưng nó cũng có những

39
00:01:44,320 --> 00:01:47,200
điểm mạnh riêng.

40
00:01:47,200 --> 00:01:48,920
Tuple không thay đổi được.

41
00:01:48,920 --> 00:01:50,920
Các bạn có nhớ ta đã so sánh list

42
00:01:50,920 --> 00:01:52,200
với chuỗi ký tự.

43
00:01:52,200 --> 00:01:54,740
Cả list và chuỗi đều là

44
00:01:54,740 --> 00:01:56,830
chuỗi các phần tử, tính từ vị trí 0,

45
00:01:56,830 --> 00:01:59,350
1, 2, v.v.

46
00:01:59,350 --> 00:02:02,550
Nhưng với một chuỗi

47
00:02:02,550 --> 00:02:05,230
3 ký tự ABC chẳng hạn,

48
00:02:05,230 --> 00:02:06,980
nếu ta muốn thay đổi ký tự thứ 3

49
00:02:06,980 --> 00:02:12,500
tức y[2] thành D thì nó sẽ kêu là không thực hiện được.

50
00:02:12,500 --> 00:02:13,710
Nhưng trong list có thể thay đổi như vậy.

51
00:02:13,710 --> 00:02:15,850
Có một list gồm 9, 8, 7,

52
00:02:15,850 --> 00:02:19,050
ta gán x[2] tức phần tử thứ 3 bằng 6

53
00:02:19,050 --> 00:02:22,070
thì phần tử đó sẽ chuyển từ 7 thành 6.

54
00:02:22,070 --> 00:02:22,600
OK.

55
00:02:22,600 --> 00:02:25,490
Vậy list thay đổi được.

56
00:02:25,490 --> 00:02:28,010
Chuỗi không thay đổi được.

57
00:02:28,010 --> 00:02:31,360

58
00:02:31,360 --> 00:02:35,710
Và tuple cũng không thay đổi được.

59
00:02:35,710 --> 00:02:37,350
Giống như chuỗi.

60
00:02:37,350 --> 00:02:41,840
Nó giống list về kiểu dữ liệu có thể lưu trữ

61
00:02:41,840 --> 00:02:43,340
nhưng giống chuỗi ở chỗ

62
00:02:43,340 --> 00:02:44,810
không thay đổi được.

63
00:02:44,810 --> 00:02:47,930
Ở đây ta tạo một tuple 3 phần tử.

64
00:02:47,930 --> 00:02:50,500
Ta thử đổi phần tử thứ ba từ 3 thành 0.

65
00:02:50,500 --> 00:02:56,850
Chương trình báo không thay đổi được.

66
00:02:56,850 --> 00:03:00,420
Vậy nó giống với list về kiểu dữ liệu

67
00:03:00,420 --> 00:03:01,280
có thể lưu trữ,

68
00:03:01,280 --> 00:03:03,820
và giống chuỗi ở chỗ khi đã tạo xong rồi

69
00:03:03,820 --> 00:03:05,040
thì không thay đổi được.

70
00:03:05,040 --> 00:03:06,770
Vậy chỗ dấu ngoặc đơn không đổi này

71
00:03:06,770 --> 00:03:08,510
là thời điểm khởi tạo.

72
00:03:08,510 --> 00:03:12,880
Khi đã đưa các giá trị vào thì
ta không thể thay đổi gì thêm.

73
00:03:12,880 --> 00:03:16,570
Cũng có nhiều thứ khác không
thực hiện được với tuple.

74
00:03:16,570 --> 00:03:17,580
Vậy sao lại phải dùng tuple?

75
00:03:17,580 --> 00:03:19,120
Lát nữa tôi sẽ giải thích cái đó.

76
00:03:19,120 --> 00:03:23,350
Đây là một tuple gồm 3 số 3, 2, 1.

77
00:03:23,350 --> 00:03:24,520
Ta không sắp xếp trật tự được.

78
00:03:24,520 --> 00:03:27,500
Vì làm như vậy là thay đổi tuple.

79
00:03:27,500 --> 00:03:28,700
Ta cũng không thể bổ sung vào.

80
00:03:28,700 --> 00:03:31,282
Không thể dùng append gắn thêm 5 vào cuối

81
00:03:31,282 --> 00:03:32,490
vì như vậy là thay đổi nó.

82
00:03:32,490 --> 00:03:33,900
Ta cũng không thể đảo ngược trình tự của nó.

83
00:03:33,900 --> 00:03:37,570
Những cái này đều không thực hiện được.

84
00:03:37,570 --> 00:03:39,660
Với list thì làm được nhưng

85
00:03:39,660 --> 00:03:42,490
với tuple thì không.

86
00:03:42,490 --> 00:03:44,290
Bạn có thể tìm đọc danh mục Python

87
00:03:44,290 --> 00:03:46,940
nhưng cũng có thể dùng ngay
hàm dir dựng sẵn, rất tốt.

88
00:03:46,940 --> 00:03:51,080
Ta đã dùng hàm dir khi tạo list để xem Python

89
00:03:51,080 --> 00:03:53,220
cho phép làm những gì với list đó.

90
00:03:53,220 --> 00:03:56,850
Ta có thể append, count, extend, index, insert, sort,

91
00:03:56,850 --> 00:03:59,470
reverse, remove, pop, v.v.

92
00:03:59,470 --> 00:04:01,260
Giờ ta cũng tạo tuple và bảo, ê Python,

93
00:04:01,260 --> 00:04:02,990
tuple này làm gì được?

94
00:04:02,990 --> 00:04:05,140
Bạn có thể dùng count hoặc index,

95
00:04:05,140 --> 00:04:07,200
tức là mấy cái khác đều không làm được.

96
00:04:07,200 --> 00:04:09,780
Như vậy nó rất là hạn chế,

97
00:04:09,780 --> 00:04:12,112

98
00:04:12,112 --> 00:04:13,820
vì cái gì làm được trên tuple

99
00:04:13,820 --> 00:04:14,904
thì cũng làm được trên list,

100
00:04:14,904 --> 00:04:16,570
nhưng không phải cái gì làm được trên list

101
00:04:16,570 --> 00:04:18,019
cũng làm được trên tuple.

102
00:04:18,019 --> 00:04:22,650
Vậy sao tôi phải dạy về tuple cho tốn hơi?

103
00:04:22,650 --> 00:04:25,689
Nó có mỗi 2 cái ngoặc đơn là khác.

104
00:04:25,689 --> 00:04:26,480
Nó có ích gì đâu?

105
00:04:26,480 --> 00:04:29,180
Nhưng thực ra, tuple dùng hiệu quả hơn nhiều.

106
00:04:29,180 --> 00:04:31,310
Vì Python không phải xử lý tình huống

107
00:04:31,310 --> 00:04:34,100
lập trình viên thay đổi nội dung tuple

108
00:04:34,100 --> 00:04:35,890
nên nó sẽ chạy nhanh hơn,

109
00:04:35,890 --> 00:04:38,170
tốn ít bộ nhớ hơn,

110
00:04:38,170 --> 00:04:44,010
khiến Python đỡ mất thời gian xử lý.

111
00:04:44,010 --> 00:04:45,260
Vậy khi nào thì dùng tuple?

112
00:04:45,260 --> 00:04:46,801
Nếu bạn muốn tạo

113
00:04:46,801 --> 00:04:49,110
một list mà bạn không cần thay đổi

114
00:04:49,110 --> 00:04:50,800
thì dùng tuple sẽ hơn.

115
00:04:50,800 --> 00:04:52,750
Trong lập trình cũng có nhiều lúc

116
00:04:52,750 --> 00:04:55,770
ta phải tạo một biến tạm thời.

117
00:04:55,770 --> 00:04:59,630
Ta tạo nó ra, sử dụng, rồi bỏ đi

118
00:04:59,630 --> 00:05:01,670
mà không bao giờ phải thay đổi nội dung,

119
00:05:01,670 --> 00:05:04,780
những lúc như vậy nên dùng tuple.

120
00:05:04,780 --> 00:05:06,700
Ta dùng tuple khi cần tạo

121
00:05:06,700 --> 00:05:08,827
những thứ dùng tạm thời.

122
00:05:08,827 --> 00:05:10,910
Vậy ta dùng tuple với các biến tạm thời,

123
00:05:10,910 --> 00:05:13,367
chúng như những list tạm thời vậy,

124
00:05:13,367 --> 00:05:14,450
vì chúng có hiệu suất cao,

125
00:05:14,450 --> 00:05:15,220
dễ khởi tạo,

126
00:05:15,220 --> 00:05:16,553
dễ bỏ đi,

127
00:05:16,553 --> 00:05:18,810
dễ duyệt.

128
00:05:18,810 --> 00:05:22,820
Một ưu điểm nữa của Python mà tôi rất thích

129
00:05:22,820 --> 00:05:26,690
là ta có thể thực hiện đồng thời 2 phép gán

130
00:05:26,690 --> 00:05:30,010
bằng cách đặt tuple vào cả vế trái và vế phải

131
00:05:30,010 --> 00:05:31,246
của câu lệnh gán.

132
00:05:31,246 --> 00:05:33,120
Thường khi nghĩ về câu lệnh gán,

133
00:05:33,120 --> 00:05:35,120
ta hình dung là nó đưa dữ liệu vào

134
00:05:35,120 --> 00:05:37,220
theo một hướng nhất định.

135
00:05:37,220 --> 00:05:40,860
Trong Python thì ta có thể đưa 2 thứ

136
00:05:40,860 --> 00:05:42,270
vào cùng một lúc.

137
00:05:42,270 --> 00:05:43,510
4 gán vào x

138
00:05:43,510 --> 00:05:45,160
và fred gán vào y.

139
00:05:45,160 --> 00:05:46,270
Đây là 1 tuple,

140
00:05:46,270 --> 00:05:47,340
đây cũng là tuple.

141
00:05:47,340 --> 00:05:50,450
Bên vế trái không thể để hằng số.

142
00:05:50,450 --> 00:05:52,860
Vế phải có thể để biến số, hằng số

143
00:05:52,860 --> 00:05:54,080
hay biểu thức.

144
00:05:54,080 --> 00:05:56,740
Nhưng ở đây thì phải là 2 biến số.

145
00:05:56,740 --> 00:06:02,182
Tương tự, 99 gán vào a
và 98 gán vào b.

146
00:06:02,182 --> 00:06:05,050
Về cú pháp, ta có thể

147
00:06:05,050 --> 00:06:07,790
bỏ không viết 2 ngoặc đơn này.

148
00:06:07,790 --> 00:06:10,440
Tôi nghĩ là bỏ ra trông đẹp hơn.

149
00:06:10,440 --> 00:06:13,810
Có ngoặc đơn hay không cũng vẫn vậy,

150
00:06:13,810 --> 00:06:17,070
ta vẫn gán được

151
00:06:17,070 --> 00:06:20,680
a và b vào tuple 99, 98.

152
00:06:20,680 --> 00:06:22,680
Vậy bạn có thể bỏ ngoặc đơn ra

153
00:06:22,680 --> 00:06:25,570
miễn là nội dung tuple vẫn rõ ràng.

154
00:06:25,570 --> 00:06:28,144
Lần đầu bạn nhìn thế này

155
00:06:28,144 --> 00:06:29,060
có thể sẽ không yên tâm lắm.

156
00:06:29,060 --> 00:06:31,810
Nhưng nó đơn giản là tuple không có dấu ngoặc thôi.

157
00:06:31,810 --> 00:06:35,300
Và 99 vẫn được gán vào a, 98 được gán vào b.

158
00:06:35,300 --> 00:06:37,990
Cái này thì ta đã từng làm rồi.

159
00:06:37,990 --> 00:06:41,530
Tôi đã giảng cái này trong bài trước

160
00:06:41,530 --> 00:06:43,830
về dictionary, vì nó cho phép ta

161
00:06:43,830 --> 00:06:46,730
duyệt qua các key và value trong dictionary

162
00:06:46,730 --> 00:06:50,600
với 2 biến vòng lặp.

163
00:06:50,600 --> 00:06:53,270
Nếu các bạn còn nhớ, đây là 1 dictionary.

164
00:06:53,270 --> 00:06:55,050
Ta đưa vào đó 2 thứ.

165
00:06:55,050 --> 00:07:05,100
Ta có thể gọi d.items để được một list các tuple,

166
00:07:05,100 --> 00:07:06,190
gồm các tuple đôi.

167
00:07:06,190 --> 00:07:08,340
Tuple đôi là cách gọi tắt cho

168
00:07:08,340 --> 00:07:10,030
tuple có 2 phần tử.

169
00:07:10,030 --> 00:07:12,600
Đây là một list gồm 2 phần tử,

170
00:07:12,600 --> 00:07:14,490
mỗi phần tử là một tuple đôi.

171
00:07:14,490 --> 00:07:19,270
Và đây là key, value, rồi key và value.

172
00:07:19,270 --> 00:07:22,590
Khi in cái này ra ta được một list.

173
00:07:22,590 --> 00:07:27,490
Vậy khi ta đưa cái này vào vòng lặp for
thì nó là một list.

174
00:07:27,490 --> 00:07:33,510
Nhưng các phần tử trong list là tuple.

175
00:07:33,510 --> 00:07:36,840
Mỗi phần tử trong list là một tuple.

176
00:07:36,840 --> 00:07:40,700
Vậy khi biến vòng lặp này đi đến đây,

177
00:07:40,700 --> 00:07:43,480
tuple được gán vào k và v,

178
00:07:43,480 --> 00:07:48,756
tức là key gán vào k và value gán vào v.

179
00:07:48,756 --> 00:07:53,630
k và v có thể để tên là gì cũng được,

180
00:07:53,630 --> 00:07:56,870
chúng chỉ là biến thứ nhất và thứ 2 thôi.

181
00:07:56,870 --> 00:08:00,350
Vậy k và v trỏ tới đây.

182
00:08:00,350 --> 00:08:05,610
Bước lặp tiếp theo, k và v lại trỏ tới đây.

183
00:08:05,610 --> 00:08:11,020
Vì thế ta mới có csev 2 và cwen 4.

184
00:08:11,020 --> 00:08:13,660
Vậy đây là phép gán tuple

185
00:08:13,660 --> 00:08:19,370
hoặc các biến vòng lặp tuple, hoặc một cặp

186
00:08:19,370 --> 00:08:22,950
biến vòng lặp duyệt qua một list.

187
00:08:22,950 --> 00:08:24,980
OK.

188
00:08:24,980 --> 00:08:27,840
Ta không hay dùng cái này.

189
00:08:27,840 --> 00:08:30,394
Nó thường chỉ hay dùng trong trường hợp

