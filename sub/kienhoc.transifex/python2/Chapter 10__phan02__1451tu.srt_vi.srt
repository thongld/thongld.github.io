190
00:08:30,394 --> 00:08:31,810
quangdutran Thao reviewed
duyệt qua một dictionary

191
00:08:31,810 --> 00:08:34,020
và bạn muốn thấy được cả các key và value.

192
00:08:34,020 --> 00:08:38,830
Sau đó dùng một phương thức của
dictionary là d.items.

193
00:08:38,830 --> 00:08:40,789
Một điểm hay của tuple

194
00:08:40,789 --> 00:08:47,570
là ta có thể so sánh các tuple 
với nhau, nhỏ hơn, lớn hơn

195
00:08:47,570 --> 00:08:48,880
hay bằng nhau.

196
00:08:48,880 --> 00:08:54,610
Trước tiên nó so sánh phần tử đầu tiên bên trái.

197
00:08:54,610 --> 00:08:56,610
Nếu giống nhau thì nhảy tới phần tử thứ hai.

198
00:08:56,610 --> 00:08:59,000
Giống nhau nữa thì nhảy sang phần tử thứ 3.

199
00:08:59,000 --> 00:09:01,766
Nếu hỏi 0, 1, 2 có nhỏ hơn 5, 1, 2 không

200
00:09:01,766 --> 00:09:04,270
thì câu trả lời là có.

201
00:09:04,270 --> 00:09:07,040
Nó chỉ cần nhìn thấy 0 và 5 thôi, thế là đã nhỏ hơn rồi

202
00:09:07,040 --> 00:09:09,220
Cứ thế tiếp tục.

203
00:09:09,220 --> 00:09:14,270
Nếu hỏi 0, 1, 2 triệu 
có nhỏ hơn 0, 3, 4 không?

204
00:09:14,270 --> 00:09:14,900
0 = 0.

205
00:09:14,900 --> 00:09:17,890
Nhảy sang số thứ hai,
1 và 3

206
00:09:17,890 --> 00:09:20,020
Không bằng nhau mà là nhỏ hơn.

207
00:09:20,020 --> 00:09:22,030
1 < 3.

208
00:09:22,030 --> 00:09:23,050
Vậy đáp án là đúng.

209
00:09:23,050 --> 00:09:24,800
Nó không tính đến mấy số này

210
00:09:24,800 --> 00:09:25,830
vì không cần thiết.

211
00:09:25,830 --> 00:09:26,020
Đúng không?

212
00:09:26,020 --> 00:09:28,240
Trường hợp này, các số phía sau sẽ bị bỏ qua.

213
00:09:28,240 --> 00:09:34,700
Nếu hỏi Jones, Sally nhỏ hơn Jones, Fred không,

214
00:09:34,700 --> 00:09:36,760
nó sẽ so sánh cái đầu tiên.

215
00:09:36,760 --> 00:09:37,880
Chúng bằng nhau.

216
00:09:37,880 --> 00:09:39,960
Nên nó sẽ so sánh từ thứ hai

217
00:09:39,960 --> 00:09:41,721
Sally nhỏ hơn Fred?

218
00:09:41,721 --> 00:09:42,220
Không.

219
00:09:42,220 --> 00:09:47,010
Vì S > F, câu trả lời là sai.

220
00:09:47,010 --> 00:09:52,440
Jones, Sally có lớn hơn Adams, Sam không?

221
00:09:52,440 --> 00:09:54,480
Jones lớn hơn Adams,

222
00:09:54,480 --> 00:09:56,610
nên các biến sau bị bỏ qua.

223
00:09:56,610 --> 00:09:59,490
Kết quả sẽ là đúng.

224
00:09:59,490 --> 00:10:02,290
Vậy các tuple có thể so sánh với nhau, nghĩa là

225
00:10:02,290 --> 00:10:05,930
ta có thể dùng các phép so sánh lớn hơn, nhỏ hơn hoặc bằng,

226
00:10:05,930 --> 00:10:09,350
bằng hay không bằng.

227
00:10:09,350 --> 00:10:12,980
Ta có thể dùng các toán tử so sánh này giữa các tuple.

228
00:10:12,980 --> 00:10:15,490
Hay đấy chứ.

229
00:10:15,490 --> 00:10:21,390
Vì những cái gì so sánh được
thì cũng sắp xếp được.

230
00:10:21,390 --> 00:10:22,810
OK.

231
00:10:22,810 --> 00:10:28,250
Đây là các key a, b, c.
a ứng với 10.

232
00:10:28,250 --> 00:10:29,030
b ứng với 1.

233
00:10:29,030 --> 00:10:30,570
c ứng với 22.

234
00:10:30,570 --> 00:10:33,190
Nếu nhìn vào các phần tử này,

235
00:10:33,190 --> 00:10:36,770
tôi được một list có 3 tuple đôi.

236
00:10:36,770 --> 00:10:41,830
Chúng chưa được sắp xếp theo thứ tự
vì dictionary không sắp xếp được

237
00:10:41,830 --> 00:10:42,610
a nối với 10.

238
00:10:42,610 --> 00:10:43,350
c nối với 22.

239
00:10:43,350 --> 00:10:44,270
Và b nối với 1.

240
00:10:44,270 --> 00:10:47,150
Thứ tự mà chúng xuất hiện thì ta 

241
00:10:47,150 --> 00:10:49,410
không thể kiểm soát được.

242
00:10:49,410 --> 00:10:53,840
Nhưng nếu đặt chúng
vào biến, gọi là t,

243
00:10:53,840 --> 00:10:56,800
t là một list các tuple,

244
00:10:56,800 --> 00:10:59,130
và ta gọi phương thức sort,

245
00:10:59,130 --> 00:11:02,800
nó sẽ so sánh các tuple

246
00:11:02,800 --> 00:11:04,140
rồi sắp xếp chúng.

247
00:11:04,140 --> 00:11:08,470
Giờ thì chúng được sắp xếp
theo thứ tự của key: a, b, c.

248
00:11:08,470 --> 00:11:10,160
Các key sẽ không bao giờ trùng nhau.

249
00:11:10,160 --> 00:11:12,180
Nên nó sẽ không bao giờ xét đến giá trị thứ 2.

250
00:11:12,180 --> 00:11:15,850
Vì chỉ có 1 key a, b hoặc c thôi.

251
00:11:15,850 --> 00:11:17,900
Không bao giờ xét đến value 10.

252
00:11:17,900 --> 00:11:26,580
Vậy các tuple được sắp xếp theo key.

253
00:11:26,580 --> 00:11:29,310
Đây là cách sắp xếp theo key

254
00:11:29,310 --> 00:11:31,770
Chúng ta có một dictionary, lấy về một list

255
00:11:31,770 --> 00:11:33,830
các tuple gồm có key và value.

256
00:11:33,830 --> 00:11:35,960
Rồi ta sắp xếp lại dictionary đó, tức là

257
00:11:35,960 --> 00:11:38,200
sắp xếp list các tuple key - value đó.

258
00:11:38,200 --> 00:11:39,850
Các tuple sẽ đứng theo thứ tự của key.

259
00:11:39,850 --> 00:11:40,350
OK.

260
00:11:40,350 --> 00:11:43,380
Đó là một cách sắp xếp.

261
00:11:43,380 --> 00:11:51,090
Có một hàm sẵn trong Python gọi là sorted,

262
00:11:51,090 --> 00:11:53,270
nó lấy tham số là một list,

263
00:11:53,270 --> 00:11:56,130
và trả về list
đã được sắp xếp

264
00:11:56,130 --> 00:11:58,820
Ta có thể bỏ qua các 
bước này

265
00:11:58,820 --> 00:12:04,150
bằng cách đặt d.items() là list các tuple chưa được sắp xếp.

266
00:12:04,150 --> 00:12:08,210
sorted(d.items()) vẫn sẽ là list các tuple đó,

267
00:12:08,210 --> 00:12:09,100
nhưng đã sắp xếp theo thứ tự.

268
00:12:09,100 --> 00:12:15,270
Chỉ cần một bước là ta đã có a, b, c

269
00:12:15,270 --> 00:12:16,480
đứng theo thứ tự

270
00:12:16,480 --> 00:12:19,340
Ta có thể kết hợp tất cả đống này

271
00:12:19,340 --> 00:12:24,000
vào một vòng for
duyệt qua k, v trong sorted(d.items())

272
00:12:24,000 --> 00:12:27,520
Nó sẽ sắp xếp các cặp key - value theo key,

273
00:12:27,520 --> 00:12:31,530
và sau đó các biến k, v sẽ duyệt qua chúng.

274
00:12:31,530 --> 00:12:35,990
Đầu tiên k sẽ là a, v là 10, 
sau đó k sẽ là b,

275
00:12:35,990 --> 00:12:37,660
v sẽ là 1.

276
00:12:37,660 --> 00:12:40,580
Khi k là c, b sẽ là 22.

277
00:12:40,580 --> 00:12:42,400
Giờ ta đã in chúng ra

278
00:12:42,400 --> 00:12:44,650
theo key xếp theo bảng chữ cái.

279
00:12:44,650 --> 00:12:45,440
OK.

280
00:12:45,440 --> 00:12:47,470
Thêm hàm sorted vào d.items,

281
00:12:47,470 --> 00:12:54,170
có nghĩa là vòng lặp sẽ chạy theo thứ tự của key,

282
00:12:54,170 --> 00:12:56,300
thứ tự bảng chữ cái của key.

283
00:12:56,300 --> 00:12:59,050
Vì hàm sorted lấy vào

284
00:12:59,050 --> 00:13:03,080
một list chưa được sắp xếp

285
00:13:03,080 --> 00:13:04,665
và trả về list đã được sắp xếp.

286
00:13:04,665 --> 00:13:07,525

287
00:13:07,525 --> 00:13:09,850
OK?

288
00:13:09,850 --> 00:13:14,020
Nếu ta đang thực hiện một thao tác, chẳng hạn

289
00:13:14,020 --> 00:13:15,640
tìm từ hay gặp nhất,

290
00:13:15,640 --> 00:13:19,080
nếu ta muốn tìm 5 từ hay gặp nhất thì sao?

291
00:13:19,080 --> 00:13:23,210
Trường hợp này ta cần
sắp xếp theo thứ tự giảm dần

292
00:13:23,210 --> 00:13:26,590
của value chứ không
phải của key nữa.

293
00:13:26,590 --> 00:13:28,830
OK?

294
00:13:28,830 --> 00:13:32,230
Ta cần sắp xếp theo value chứ không theo key nữa.

295
00:13:32,230 --> 00:13:34,160
Đây là lúc ta sẽ

296
00:13:34,160 --> 00:13:36,790
tạo một biến tạm thời.

297
00:13:36,790 --> 00:13:39,520
Làm như sau.

298
00:13:39,520 --> 00:13:42,580
Đây là một dictionary với 'a' : 10, v.v.

299
00:13:42,580 --> 00:13:44,580
Bây giờ ta muốn sắp xếp theo value.

300
00:13:44,580 --> 00:13:48,610
Ta muốn các phần tử
đứng theo thứ tự của value.

301
00:13:48,610 --> 00:13:52,322
Ta sẽ tạo một list tạm thời là tmp.

302
00:13:52,322 --> 00:13:54,280
Sau đó duyệt qua các phần tử.

303
00:13:54,280 --> 00:13:56,979

304
00:13:56,979 --> 00:13:58,770
Vòng lặp sẽ chạy và

305
00:13:58,770 --> 00:14:01,800
duyệt qua các phần tử
chưa đứng theo thứ tự.

306
00:14:01,800 --> 00:14:05,930
Ta sẽ thực hiện phép append

307
00:14:05,930 --> 00:14:08,020
để thêm vào
list này.

308
00:14:08,020 --> 00:14:14,280
Nhưng ta sẽ thêm một
tuple có dạng value, key.

309
00:14:14,280 --> 00:14:18,300
Ta đặt value trước, key sau

310
00:14:18,300 --> 00:14:19,310
trong tuple này.

311
00:14:19,310 --> 00:14:22,790
Cú pháp (v, k) ở đây

312
00:14:22,790 --> 00:14:27,210
có nghĩa là tạo ra một tuple đôi
lấy giá trị từ các biến v và k,

313
00:14:27,210 --> 00:14:30,330
rồi thêm vào list này

314
00:14:30,330 --> 00:14:34,660
Và ta sẽ có một list các tuple đôi.

315
00:14:34,660 --> 00:14:37,960
Lúc hoàn thành

316
00:14:37,960 --> 00:14:39,380
mỗi phần tử sẽ là một tuple.

317
00:14:39,380 --> 00:14:40,770
10 và a được thêm vào,

318
00:14:40,770 --> 00:14:44,030
22 và c cũng vậy.

319
00:14:44,030 --> 00:14:46,810
Chỉ đơn giản
là theo thứ tự ngược lại.

320
00:14:46,810 --> 00:14:49,190
Mỗi tuple giờ có value đứng trước

321
00:14:49,190 --> 00:14:53,690
và key đứng sau, cứ thế value trước,

322
00:14:53,690 --> 00:14:54,410
key sau.

323
00:14:54,410 --> 00:14:57,690
Đây là dữ liệu tạm thời mà ta tạo ra.

324
00:14:57,690 --> 00:15:00,830
Đây là dữ liệu tạm thời mà ta tạo ra.

325
00:15:00,830 --> 00:15:05,070
Sau đó ta sẽ gọi phương thức sort.

326
00:15:05,070 --> 00:15:07,990
Ta biết là các list có thể thay đổi được.

327
00:15:07,990 --> 00:15:09,860
Từng tuple thì không thay đổi được,

328
00:15:09,860 --> 00:15:11,810
nhưng ta có thể thay đổi thứ tự của chúng

329
00:15:11,810 --> 00:15:14,130
vì chúng đang nằm
trong một list.

330
00:15:14,130 --> 00:15:15,980
Ta chạy tmp.sort

331
00:15:15,980 --> 00:15:17,660
và khai reverse=True.

332
00:15:17,660 --> 00:15:21,390
Ta sắp xếp từ cao nhất
xuống thấp nhất.

333
00:15:21,390 --> 00:15:22,470
Được chứ?

334
00:15:22,470 --> 00:15:24,840
List tmp đã được sắp xếp.

335
00:15:24,840 --> 00:15:27,852
Giờ nó có thứ tự mới: 22, 10, 1

336
00:15:27,852 --> 00:15:30,480
đó là thứ tự cao đến thấp

337
00:15:30,480 --> 00:15:33,090
Giờ ta biết giá trị lớn nhất

338
00:15:33,090 --> 00:15:38,370
là 22, key của c.
Tiếp là 10, key của a.

339
00:15:38,370 --> 00:15:42,290
Và nhỏ nhất là 1, 
key của b.

340
00:15:42,290 --> 00:15:46,370
Mẹo ở đây là nếu muốn
sắp xếp theo cách khác

341
00:15:46,370 --> 00:15:49,272
chỉ cần tạo ra list theo trình tự 

342
00:15:49,272 --> 00:15:50,230
mà ta muốn nó được sắp xếp.

343
00:15:50,230 --> 00:15:53,270
Lúc này thì value quan trọng

344
00:15:53,270 --> 00:15:54,620
hơn là key.

345
00:15:54,620 --> 00:16:02,500
Nếu ta có một cặp 22 f,
nó sẽ xếp theo 22 trước

346
00:16:02,500 --> 00:16:06,537
rồi mới xếp theo f,
tức là nó sẽ nằm ngay sau c.

347
00:16:06,537 --> 00:16:07,870
Không có cặp giá trị nào trùng nhau.

348
00:16:07,870 --> 00:16:10,815
Nhưng có thể key c có value là 22

349
00:16:10,815 --> 00:16:12,400
và key f cũng có value là 22.

350
00:16:12,400 --> 00:16:14,800

351
00:16:14,800 --> 00:16:15,300
OK.

352
00:16:15,300 --> 00:16:18,050
Các bạn hãy đọc kĩ một chút.

353
00:16:18,050 --> 00:16:20,210
Hiểu cho thật rõ.

354
00:16:20,210 --> 00:16:22,660
Giờ tôi muốn chỉ cho bạn thấy

355
00:16:22,660 --> 00:16:26,090
một chương trình
đưa ra 10 từ phổ biến nhất.

356
00:16:26,090 --> 00:16:35,410
Lúc trước ta đã tìm từ phổ biến nhất

357
00:16:35,410 --> 00:16:37,530
bằng cách tạo một vòng lặp lấy số lớn nhất ở cuối,

358
00:16:37,530 --> 00:16:40,610
nó duyệt qua tất cả các bộ đếm
trong một dictionary

359
00:16:40,610 --> 00:16:42,130
rồi chọn số lớn nhất.

360
00:16:42,130 --> 00:16:44,130
Nhưng nếu ta muốn lấy top 10 thì sao?

361
00:16:44,130 --> 00:16:44,724
Đúng không?

362
00:16:44,724 --> 00:16:46,390
Lúc đó không nên dùng vòng lặp nữa.

363
00:16:46,390 --> 00:16:47,700
Giờ ta sẽ dùng sort.

364
00:16:47,700 --> 00:16:49,990
Ta làm như sau.

365
00:16:49,990 --> 00:16:52,630
Mở một file ra.

366
00:16:52,630 --> 00:16:55,870
Tạo một dictionary rỗng là counts.

367
00:16:55,870 --> 00:17:00,560
Sau đó tạo vòng lặp
đọc từng dòng,

368
00:17:00,560 --> 00:17:02,470
với mỗi dòng line trong fhand.

369
00:17:02,470 --> 00:17:04,720
Sau đó tách từng dòng ra thành các từ

370
00:17:04,720 --> 00:17:09,349
dựa theo dấu cách,
dùng phương thức split.

371
00:17:09,349 --> 00:17:13,540
Sau đó duyệt các từ trong từng dòng

372
00:17:13,540 --> 00:17:18,410
và dùng cấu trúc dictionary đã học.

373
00:17:18,410 --> 00:17:21,900
Đoạn counts.get(word,0) này

374
00:17:21,900 --> 00:17:25,410
nghĩa là hãy tìm trong counts.

375
00:17:25,410 --> 00:17:28,910
Nếu tồn tại 1 key là word thì trả cho tôi value trong đó.

376
00:17:28,910 --> 00:17:30,410
Nếu không thì trả về 0.

377
00:17:30,410 --> 00:17:34,120
Nó vừa tạo biến mới

378
00:17:34,120 --> 00:17:37,590
vừa cập nhật biến cũ
trong cùng một câu lệnh đơn giản.

