198
00:08:57,054 --> 00:08:58,720
huyentrangkt.hust 15/06/2016 Thao reviewed
Tôi sẽ không giải thích chi tiết

199
00:08:58,720 --> 00:08:59,800
lý do tại sao.

200
00:08:59,800 --> 00:09:01,570
Đó là một đặc điểm giúp cho

201
00:09:01,570 --> 00:09:03,060
dictionary chạy nhanh hơn,

202
00:09:03,060 --> 00:09:04,530
sử dụng kỹ thuật hashing (băm).

203
00:09:04,530 --> 00:09:06,740
Đây là cơ chế hoạt động bên trong dictionary,

204
00:09:06,740 --> 00:09:09,600
các bạn có thể tra thêm về hashing trên Wikipedia,

205
00:09:09,600 --> 00:09:14,040
tuy nhiên lập trình viên chúng ta chỉ cần quan tâm là

206
00:09:14,040 --> 00:09:18,640
list duy trì một trình tự còn dictionary

207
00:09:18,640 --> 00:09:21,040
thì không.

208
00:09:21,040 --> 00:09:23,090
Dictionary có những tính năng mà list

209
00:09:23,090 --> 00:09:25,597
không có, cái này bổ sung cho cái kia.

210
00:09:25,597 --> 00:09:27,680
Không có kiểu nào tốt hơn kiểu nào,

211
00:09:27,680 --> 00:09:28,804
chúng bổ sung cho nhau.

212
00:09:28,804 --> 00:09:31,130
Với các loại dữ liệu khác nhau

213
00:09:31,130 --> 00:09:32,980
thì list hay dictionary xử lý tốt hơn tùy thuộc

214
00:09:32,980 --> 00:09:34,830
vào vấn đề cần giải quyết.

215
00:09:34,830 --> 00:09:36,990
Tới đây, ta sẽ viết các

216
00:09:36,990 --> 00:09:38,840
chương trình sử dụng cả 2 kiểu dữ liệu.

217
00:09:38,840 --> 00:09:42,430
Ở đoạn này, tôi dùng câu lệnh gán

218
00:09:42,430 --> 00:09:47,270
để gán 23 vào ddd[age].

219
00:09:47,270 --> 00:09:51,190
Giá trị 21 chuyển thành 23, ta in ra.

220
00:09:51,190 --> 00:09:54,320
Ở phần tìm kiếm và thay đổi giá trị này,

221
00:09:54,320 --> 00:09:56,110
bạn có thể làm cả 2 cách.

222
00:09:56,110 --> 00:10:00,040
Chỉ là cách làm ở đây có khác 1 chút.

223
00:10:00,040 --> 00:10:01,640
OK.

224
00:10:01,640 --> 00:10:03,840
Hãy xem lại dãy code này 1 lần nữa.

225
00:10:03,840 --> 00:10:07,000
Tôi thích sử dụng cặp từ key và value.

226
00:10:07,000 --> 00:10:09,670
Key là cách ta tìm kiếm các thứ, trong list thì

227
00:10:09,670 --> 00:10:13,951
key là các số liên tiếp bắt đầu từ 0.

228
00:10:13,951 --> 00:10:16,200
Trong dictionary, key có thể là bất cứ thứ gì ta muốn,

229
00:10:16,200 --> 00:10:18,100
trường hợp này tôi dùng các chuỗi.

230
00:10:18,100 --> 00:10:20,410
Value là con số mà ta lưu trong key.

231
00:10:20,410 --> 00:10:25,960
Ta tạo ra một dạng danh sách với các câu lệnh như vậy,

232
00:10:25,960 --> 00:10:28,530
câu lệnh tạo ra các thứ ở đây.

233
00:10:28,530 --> 00:10:32,340
Giờ nếu ta hình dung câu lệnh gán này

234
00:10:32,340 --> 00:10:36,690
là chuyển một dữ liệu vào một chỗ mới,

235
00:10:36,690 --> 00:10:43,550
chương trình sẽ nhìn vào vị trí này

236
00:10:43,550 --> 00:10:45,360
và hiểu là ta muốn chuyển dữ liệu vào đây.

237
00:10:45,360 --> 00:10:48,240
Nên nó sẽ tìm kiếm key này

238
00:10:48,240 --> 00:10:50,180
và đó là vị trí tôi muốn thay đổi.

239
00:10:50,180 --> 00:10:52,445
Sau khi biết cần đổi vị trí nào,

240
00:10:52,445 --> 00:10:54,340
nó sẽ đưa con số 23

241
00:10:54,340 --> 00:10:57,200
vào vị trí đó.

242
00:10:57,200 --> 00:11:01,280
Đó là cách giá trị được gán thay đổi.

243
00:11:01,280 --> 00:11:04,400
Tương tự, ở dưới đây,

244
00:11:04,400 --> 00:11:06,420
ta sẽ gán 23 vào đâu đó

245
00:11:06,420 --> 00:11:09,560
và biểu thức tìm kiếm này,

246
00:11:09,560 --> 00:11:11,980
hay biểu thức index ddd['age'] này

247
00:11:11,980 --> 00:11:13,420
là vị trí ta muốn đặt nó.

248
00:11:13,420 --> 00:11:16,470
Ở đây ta tìm kiếm, vị trí ấy đâu rồi?

249
00:11:16,470 --> 00:11:21,270
Vị trí ấy chính là mục này trong dictionary.

250
00:11:21,270 --> 00:11:23,270
Giờ ta sẽ cho vào giá trị 23,

251
00:11:23,270 --> 00:11:25,070
ta biết 23 sẽ được chuyển vào đây,

252
00:11:25,070 --> 00:11:27,505
nó sẽ ghi đè lên giá trị 21, và 21

253
00:11:27,505 --> 00:11:29,070
sẽ chuyển thành 23.

254
00:11:29,070 --> 00:11:29,570
OK.

255
00:11:29,570 --> 00:11:32,070
Vậy list và dictionary khá tương tự,

256
00:11:32,070 --> 00:11:34,210
có nhiều tính năng tương tự,

257
00:11:34,210 --> 00:11:37,560
tuy nhiên cũng có 1 số điểm khác nhau.

258
00:11:37,560 --> 00:11:42,020
Ta cũng có thể trực tiếp tạo dictionary 
bằng các dấu ngoặc nhọn,

259
00:11:42,020 --> 00:11:43,450
cú pháp giống hệt như bản in ra.

260
00:11:43,450 --> 00:11:44,908
Đó là 1 đặc điểm rất hay của Python.

261
00:11:44,908 --> 00:11:46,410
Khi bạn in thứ gì đó ra,

262
00:11:46,410 --> 00:11:48,620
đó chính là cách bạn có thể trực tiếp tạo thứ đó.

263
00:11:48,620 --> 00:11:51,340
Bạn chỉ cần mở ngoặc nhọn,

264
00:11:51,340 --> 00:11:56,150
rồi viết 'chuck' : 1, 'fred' : 42, 'jan' : 100

265
00:11:56,150 --> 00:11:58,140
là các liên kết được tạo ra,

266
00:11:58,140 --> 00:12:00,580
từng cặp key - value một.

267
00:12:00,580 --> 00:12:05,782
Ta in ra không theo thứ tự,
dictionary không giữ đúng thứ tự.

268
00:12:05,782 --> 00:12:07,490
Có thể sẽ có lúc nó in đúng thứ tự,

269
00:12:07,490 --> 00:12:08,760
nhưng đó là trùng hợp thôi.

270
00:12:08,760 --> 00:12:10,120
Tất cả các ví dụ tôi vừa sử dụng

271
00:12:10,120 --> 00:12:11,495
đều không trả giá trị đúng trật tự,

272
00:12:11,495 --> 00:12:12,650
như thế đã minh họa cho ý này.

273
00:12:12,650 --> 00:12:15,020
Nếu có khi nào nó in ra đúng thứ tự

274
00:12:15,020 --> 00:12:17,180
thì cũng không phải nó bị lỗi đâu, không phải nó không

275
00:12:17,180 --> 00:12:19,550
muốn trả về đúng thứ tự mà chỉ là

276
00:12:19,550 --> 00:12:21,690
nó không có tính năng ấy thôi.

277
00:12:21,690 --> 00:12:25,129
Và nếu bạn thêm vào một giá trị,
nó có thể đảo trật tự lên.

278
00:12:25,129 --> 00:12:27,670
Bạn cũng có thể tạo một dictionary rỗng với 2 dấu ngoặc nhọn

279
00:12:27,670 --> 00:12:28,170
để không.

280
00:12:28,170 --> 00:12:33,440

281
00:12:33,440 --> 00:12:37,490
Tôi sẽ đưa ra 1 ví dụ khác.

282
00:12:37,490 --> 00:12:40,880
Tôi sẽ đưa ra 1 chuỗi các tên,

283
00:12:40,880 --> 00:12:45,660
các bạn hãy chỉ ra tên nào xuất hiện nhiều nhất

284
00:12:45,660 --> 00:12:48,270
và mỗi tên
xuất hiện bao nhiêu lần.

285
00:12:48,270 --> 00:12:49,930
Đây là tên những người có thật

286
00:12:49,930 --> 00:12:55,830
đã tham gia dự án Sakai là Stephen, Zhen, Chen

287
00:12:55,830 --> 00:12:56,660
và tôi.

288
00:12:56,660 --> 00:12:59,050
Đó là những người đã xuất hiện trong dữ liệu

289
00:12:59,050 --> 00:13:00,700
mà ta sử dụng trong khóa học này,

290
00:13:00,700 --> 00:13:04,400
OK. Tôi nghĩ tôi sẽ 
đưa ra 15 cái tên,

291
00:13:04,400 --> 00:13:06,717
các bạn hãy nghĩ cách

292
00:13:06,717 --> 00:13:08,550
để khi tôi đưa ra từng cái một,

293
00:13:08,550 --> 00:13:11,350
các bạn có thể theo dõi được chúng.

294
00:13:11,350 --> 00:13:12,390
OK?

295
00:13:12,390 --> 00:13:15,370
Tôi bắt đầu đưa ra những cái tên đây.

296
00:13:15,370 --> 00:13:53,860

297
00:13:53,860 --> 00:13:56,230
Xong rồi.

298
00:13:56,230 --> 00:13:57,630
Các bạn có đáp án chưa?

299
00:13:57,630 --> 00:14:00,960
Bạn có thể quay lại
và xem lại nó 1 lần nữa.

300
00:14:00,960 --> 00:14:05,650
Các bạn đã tìm đáp án như thế nào, sử dụng

301
00:14:05,650 --> 00:14:09,340
cấu trúc dữ liệu gì? Hay bạn chỉ thốt lên

302
00:14:09,340 --> 00:14:12,440
"Ôi phiền phức quá! Mình sẽ học Python để

303
00:14:12,440 --> 00:14:15,530
giải quyết vấn đề này."

304
00:14:15,530 --> 00:14:20,730
Các bạn có thể tạm dừng video hoặc xem lại,

305
00:14:20,730 --> 00:14:23,120
rồi viết ra cái tên

306
00:14:23,120 --> 00:14:30,210
xuất hiện nhiều nhất và số lần xuất hiện.

307
00:14:30,210 --> 00:14:32,050
Giờ tôi sẽ cho các bạn xem.

308
00:14:32,050 --> 00:14:34,460
Đây là toàn bộ danh sách. 

309
00:14:34,460 --> 00:14:35,670
Đó là tất cả các tên.

310
00:14:35,670 --> 00:14:39,080
Bây giờ ta đã nhìn được tất cả các tên,
ta sẽ sử dụng trí óc tuyệt vời của mình

311
00:14:39,080 --> 00:14:42,750
mà soi khắp đống chữ tím này,

312
00:14:42,750 --> 00:14:45,390
rồi ta sẽ nhận ra rằng vấn đề này dễ giải quyết hơn nhiều

313
00:14:45,390 --> 00:14:48,050
khi ta nhìn vào toàn bộ các tên.

314
00:14:48,050 --> 00:14:53,885
Tôi nghĩ tên xuất hiện
nhiều nhất là Zhen, 

315
00:14:53,885 --> 00:15:00,750
tên Zhen xuất hiện 5 lần.

316
00:15:00,750 --> 00:15:03,740
Còn Csev là 3 lần.

317
00:15:03,740 --> 00:15:07,580
Cwen 2 lần, Stephen Marquard

318
00:15:07,580 --> 00:15:09,260
3 lần.

319
00:15:09,260 --> 00:15:11,552
Câu hỏi đặt ra là nếu phải xử lý cả triệu cái tên như vậy

320
00:15:11,552 --> 00:15:13,301
thì cấu trúc dữ liệu nào mới hiệu quả?

321
00:15:13,301 --> 00:15:15,580
Ta sẽ phải xây dựng cấu trúc dữ liệu thế nào

322
00:15:15,580 --> 00:15:17,205
vì làm sao mà nhớ hết vào đầu được?

323
00:15:17,205 --> 00:15:20,207
Ngay cả với ngần này cái tên

324
00:15:20,207 --> 00:15:22,040
cũng đã không thể nào nhớ hết được rồi.

325
00:15:22,040 --> 00:15:26,070
Bạn phải nghĩ ra một biến nào đó

326
00:15:26,070 --> 00:15:28,210
như biến largest_so_far hồi trước vậy.

327
00:15:28,210 --> 00:15:29,720
Một biến có thể giúp bạn

328
00:15:29,720 --> 00:15:32,290
hiểu được những gì đang xảy ra.

329
00:15:32,290 --> 00:15:34,640
Kỹ thuật phổ biến nhất để

330
00:15:34,640 --> 00:15:37,100
giải quyết vấn đề này là tính số lần xuất hiện đến thời điểm hiện tại

331
00:15:37,100 --> 00:15:39,110
của từng cái tên.

332
00:15:39,110 --> 00:15:42,500
Nếu 1 tên mới xuất hiện,
bạn chỉ cần thêm nó vào danh sách.

333
00:15:42,500 --> 00:15:46,205
Đầu tiên là Csev, ta gạch 1 gạch,
rồi ta thấy Zhen,

334
00:15:46,205 --> 00:15:48,170
ta cho cô ấy 1 gạch, tiếp đó thấy Chen

335
00:15:48,170 --> 00:15:51,080
ta lại gạch 1 gạch. Tiếp đó tên Csev xuất hiện lại,

336
00:15:51,080 --> 00:15:54,090
ta đánh cho Csev gạch thứ 2, cứ tương tự

337
00:15:54,090 --> 00:15:57,020
như vậy.

338
00:15:57,020 --> 00:15:58,690
Khi hoàn thành xong thao tác, 

339
00:15:58,690 --> 00:16:02,790
bạn sẽ theo dõi được tất cả các tên.

340
00:16:02,790 --> 00:16:04,570
Bạn chỉ việc xem lại

341
00:16:04,570 --> 00:16:07,230
và tìm dãy gạch dài nhất, là cái này chẳng hạn.

342
00:16:07,230 --> 00:16:09,970
Vậy thì đó chắc chắn là 
tên xuất hiện nhiều nhất.

343
00:16:09,970 --> 00:16:12,720
Bạn cần 1 chỗ để ghi ra số lượng, 1 cấu trúc dữ liệu

344
00:16:12,720 --> 00:16:16,580
hoặc 1 mẩu giấy như ở đây. Và dictionary

345
00:16:16,580 --> 00:16:19,630
cực kì giỏi khoản này.

346
00:16:19,630 --> 00:16:23,220
Bạn có thể coi nó như 1 biểu đồ tần suất.

347
00:16:23,220 --> 00:16:25,500
Nó gồm rất nhiều bộ đếm,

348
00:16:25,500 --> 00:16:27,850
mỗi bộ đếm có chỉ mục là chuỗi ký tự.

349
00:16:27,850 --> 00:16:29,580
Ta sử dụng cách này rất nhiều.

350
00:16:29,580 --> 00:16:32,610
Đây là 1 mẫu sử dụng nhiều bộ đếm với dictionary.

351
00:16:32,610 --> 00:16:33,660
Các bộ đếm đồng thời.

352
00:16:33,660 --> 00:16:35,160
Ta đang đếm

353
00:16:35,160 --> 00:16:36,810
rất nhiều thứ, và ta

354
00:16:36,810 --> 00:16:39,440
sẽ đồng thời theo dõi

355
00:16:39,440 --> 00:16:42,560
rất nhiều bộ đếm thay vì chỉ một.

356
00:16:42,560 --> 00:16:44,970
Tổng cộng có bao nhiêu cái tên?

357
00:16:44,970 --> 00:16:47,550
12 cái. Nhưng mỗi tên xuất hiện bao nhiêu lần

358
00:16:47,550 --> 00:16:48,795
thì phải tính qua nhiều bộ đếm.

359
00:16:48,795 --> 00:16:51,840
Đó là 1 nhóm các bộ đếm đồng thời.

360
00:16:51,840 --> 00:16:55,030
Dictionary xử lý cái này rất tốt,

361
00:16:55,030 --> 00:16:56,860
nó làm rất tốt.

362
00:16:56,860 --> 00:16:58,870
Khi ta thấy tên ai đó lần đầu,

363
00:16:58,870 --> 00:17:00,490
ta có thể cho thêm 1 mục 
vào dictionary.

364
00:17:00,490 --> 00:17:06,280
Ví dụ csev 1, rồi cwen 1.

365
00:17:06,280 --> 00:17:08,160
Các mục này vẫn chưa tồn tại,

366
00:17:08,160 --> 00:17:12,089
nên khi ta viết như vậy chúng sẽ được tạo ra

367
00:17:12,089 --> 00:17:15,700
với giá trị là 1, liên kết giữa key csev

368
00:17:15,700 --> 00:17:18,410
và value 1, key cwen và value 1.

369
00:17:18,410 --> 00:17:21,890
Trong đó ta có tên Csev xuất hiện 1 lần

370
00:17:21,890 --> 00:17:25,869
và Chen Wen 1 lần. Rồi ta thấy Chen Wen lần 2,

371
00:17:25,869 --> 00:17:28,670
ta cho thêm 1 số khác vào đó.
Con số cũ là 1

372
00:17:28,670 --> 00:17:31,490
cộng thêm 1 là 2.

373
00:17:31,490 --> 00:17:35,330
Ta gán lại số đó vào rồi tính toán,

374
00:17:35,330 --> 00:17:38,480
kết quả trả về sẽ cho thấy Chen Wen xuất hiện 2 lần

375
00:17:38,480 --> 00:17:40,150
và Csev 1 lần.

376
00:17:40,150 --> 00:17:41,620
OK

377
00:17:41,620 --> 00:17:44,020
Đây là 1 cấu trúc dữ liệu tuyệt vời

378
00:17:44,020 --> 00:17:46,310
để tạo các bộ đếm đồng thời như là

379
00:17:46,310 --> 00:17:51,100
khi cần tìm từ xuất hiện nhiều nhất,
ai làm nhiều nhất, v.v.

380
00:17:51,100 --> 00:17:53,772
Khi làm bất cứ điều gì,
ta cũng phải tính toán

381
00:17:53,772 --> 00:17:55,980
xem mình có thể gặp rắc rối với Python không,

382
00:17:55,980 --> 00:17:58,770
liệu Python có quay ngón cái xuống mà kêu là

383
00:17:58,770 --> 00:18:00,230
bạn đã đi quá xa rồi không.

384
00:18:00,230 --> 00:18:02,430
1 điều mà Python
 không thích

385
00:18:02,430 --> 00:18:06,340
là khi bạn gọi ra một key chưa tồn tại.

386
00:18:06,340 --> 00:18:09,089
Ta sắp sửa tìm hiểu cách giải quyết vấn đề này đây.

387
00:18:09,089 --> 00:18:10,630
Tuy nhiên nếu bạn đơn giản chỉ
tạo ra 1 dictionary

388
00:18:10,630 --> 00:18:13,160
rồi đòi in ra kết quả của tên Csev,

389
00:18:13,160 --> 00:18:16,250
chương trình sẽ đưa ra 1 traceback

390
00:18:16,250 --> 00:18:18,390
kiểu như là cái này không tồn tại.

391
00:18:18,390 --> 00:18:20,500
Nó báo là KeyError: 'csev'

392
00:18:20,500 --> 00:18:24,810
Ta giải quyết vấn đề này bằng toán tử "in".

393
00:18:24,810 --> 00:18:27,060
Ta từng dùng toán tử "in" để kiểm tra xem 1 chuỗi con

394
00:18:27,060 --> 00:18:30,410
có nằm trong chuỗi không,
hay số có nằm trong list không.

