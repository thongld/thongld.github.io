309
00:13:46,830 --> 00:13:49,732
HanuDungNguyen Thao reviewed
nó chỉ lưu vào bộ nhớ của Python.

310
00:13:49,732 --> 00:13:53,430
Tôi lặp lại cái này hơi bị nhiều quá.

311
00:13:53,430 --> 00:13:58,340
Tiếp đến là một bài tập khó, tôi sẽ

312
00:13:58,340 --> 00:14:00,150
dành thời gian cho các bạn suy nghĩ 

313
00:14:00,150 --> 00:14:02,466
Tôi muốn bạn xem qua và thực thi

314
00:14:02,466 --> 00:14:02,965
đoạn code này.

315
00:14:02,965 --> 00:14:05,510

316
00:14:05,510 --> 00:14:09,880
Bạn thử đoán xem kết quả in ra màn hình 

317
00:14:09,880 --> 00:14:11,930
là gì?

318
00:14:11,930 --> 00:14:12,860
Có bao nhiêu dòng được in ra?

319
00:14:12,860 --> 00:14:16,030
Chương trình sẽ in ra bao nhiêu dòng kết quả?

320
00:14:16,030 --> 00:14:22,140

321
00:14:22,140 --> 00:14:25,555
Bao nhiêu bạn có kết quả là 3 dòng?

322
00:14:25,555 --> 00:14:28,320

323
00:14:28,320 --> 00:14:31,370
Bao nhiêu bạn có kết quả là 5 dòng?

324
00:14:31,370 --> 00:14:37,400
Câu trả lời đúng là 3 dòng.

325
00:14:37,400 --> 00:14:41,730
Ta thấy có tất cả 5 câu lệnh print.

326
00:14:41,730 --> 00:14:46,330
Nhưng có 2 câu print nằm trong phần này.

327
00:14:46,330 --> 00:14:50,330
Ở đây ta chưa từng gọi hàm đó ra sử dụng

328
00:14:50,330 --> 00:14:51,240
đúng chứ?

329
00:14:51,240 --> 00:14:55,941
Như vậy

330
00:14:55,941 --> 00:14:58,980
lệnh này in ra, 2 lệnh này bỏ qua.

331
00:14:58,980 --> 00:15:01,270
Lệnh này in ra và lệnh này in ra.

332
00:15:01,270 --> 00:15:04,950
Kết quả là ta có 3 lệnh in ra.

333
00:15:04,950 --> 00:15:08,340
Hàm print_lyrics được lưu trữ

334
00:15:08,340 --> 00:15:09,950
nhưng ta chưa sử dụng.

335
00:15:09,950 --> 00:15:13,500
Trong hàm này có 2 lệnh print ta chưa sử dụng.

336
00:15:13,500 --> 00:15:18,470
Kết quả in ra sẽ là "Hello, Yo, 7".

337
00:15:18,470 --> 00:15:21,130
Bởi vì thực tế ta chưa gọi hàm đó ra

338
00:15:21,130 --> 00:15:23,560
Ta phải viết print_lyrics()

339
00:15:23,560 --> 00:15:26,770
khi mà ta muốn gọi nó ra

340
00:15:26,770 --> 00:15:30,320
Vừa rồi tôi đã nhấn mạnh là khi nhìn vào dòng code này

341
00:15:30,320 --> 00:15:34,000
chương trình sẽ không thực thi nó.

342
00:15:34,000 --> 00:15:36,730
Khi ta định nghĩa một hàm, ta

343
00:15:36,730 --> 00:15:40,730
đặt tên cho nó, đặt một đoạn code trong nó,

344
00:15:40,730 --> 00:15:44,500
ta có thể gọi nó ra nhiều lần tùy thích 

345
00:15:44,500 --> 00:15:48,030
Bây giờ, khi ta gọi hàm ra, chương trình 

346
00:15:48,030 --> 00:15:48,900
sẽ chạy được nhiều hơn.

347
00:15:48,900 --> 00:15:51,101

348
00:15:51,101 --> 00:15:53,600
Python không quan tâm ta có dùng các hàm này không.

349
00:15:53,600 --> 00:15:56,750
Anh bảo tôi tạo hàm, tôi tạo xong rồi, anh không dùng đến

350
00:15:56,750 --> 00:15:57,830
cũng chả sao.

351
00:15:57,830 --> 00:15:59,750
Giờ hãy nhìn vào đoạn code này.

352
00:15:59,750 --> 00:16:01,830
Bắt đầu từ đây

353
00:16:01,830 --> 00:16:06,320
x= 5, print hello, kết quả in ra là "hello", rồi định nghĩa.

354
00:16:06,320 --> 00:16:07,210
Không có gì xảy ra ở đây

355
00:16:07,210 --> 00:16:10,580
Không có gì xảy ra ở đây, đoạn này chỉ là để ghi nhớ

356
00:16:10,580 --> 00:16:12,820
OK, tiếp đến lệnh print "Yo"

357
00:16:12,820 --> 00:16:14,960
Tiếp đó ta gọi hàm print_lyrics

358
00:16:14,960 --> 00:16:17,050
Tạm dừng ở đây

359
00:16:17,050 --> 00:16:18,630
Chạy hai dòng code này

360
00:16:18,630 --> 00:16:20,730
được kết quả là dòng này và dòng này

361
00:16:20,730 --> 00:16:23,820
Khi ta kết thúc hàm, ta quay trở lại

362
00:16:23,820 --> 00:16:24,810
x = x + 2

363
00:16:24,810 --> 00:16:26,640
In ra giá trị của x

364
00:16:26,640 --> 00:16:29,630
Giá trị của x bằng 7 được in ra

365
00:16:29,630 --> 00:16:35,580
Nhắc lại, ở đoạn đầu tiên--

366
00:16:35,580 --> 00:16:39,230
tôi ấn nhầm -- ở đoạn đầu

367
00:16:39,230 --> 00:16:40,440
chương trình không thực hiện lệnh in

368
00:16:40,440 --> 00:16:42,646
Nhưng khi gặp đoạn này, nó sẽ in.

369
00:16:42,646 --> 00:16:44,520
Bạn có thể sử dụng hàm print_lyrics thêm vài lần

370
00:16:44,520 --> 00:16:46,740
và nó vẫn sẽ chạy 

371
00:16:46,740 --> 00:16:49,180
bao nhiêu lần tùy ý bạn.

372
00:16:49,180 --> 00:16:50,650
Nó sẻ trả kết quả cho bạn

373
00:16:50,650 --> 00:16:52,470
Vậy bạn có thể gọi hàm ra.

374
00:16:52,470 --> 00:16:56,330
Đây là phần định nghĩa -- xóa cái này đã --

375
00:16:56,330 --> 00:17:03,980
Đây là phần định nghĩa hàm, đây là phần gọi hàm

376
00:17:03,980 --> 00:17:07,520
Khi ta invoke tức gọi hàm

377
00:17:07,520 --> 00:17:09,690
thì hàm được thực thi.

378
00:17:09,690 --> 00:17:11,750
Ở đây chúng ta chỉ tạo hàm

379
00:17:11,750 --> 00:17:15,820
để chương trình định nghĩa nó chứ chưa thực thi nó.

380
00:17:15,820 --> 00:17:17,440
Tôi mong là các bạn đã hiểu.

381
00:17:17,440 --> 00:17:23,450
Bây giờ nói về việc đưa dữ liệu vào hàm.

382
00:17:23,450 --> 00:17:26,359
Những hàm không lấy dữ liệu đầu vào thường sẽ ít hữu dụng hơn.

383
00:17:26,359 --> 00:17:28,020
Rất nhiều hàm lấy dữ liệu,

384
00:17:28,020 --> 00:17:29,760
lại cũng có lúc các bạn phải tạo loại hàm không lấy dữ liệu.

385
00:17:29,760 --> 00:17:31,200
Nhưng các hàm thú vị nhất 

386
00:17:31,200 --> 00:17:33,710
là loại mà bạn có thể giao dữ liệu

387
00:17:33,710 --> 00:17:36,740
để nó xử lý và trả lại kết quả.

388
00:17:36,740 --> 00:17:39,660
Ví dụ điển hình như hàm max này.

389
00:17:39,660 --> 00:17:42,860
Đây là một hàm nhận tham số

390
00:17:42,860 --> 00:17:44,350
tham số là thứ ở giữa các dấu ngoặc khi gọi hàm

391
00:17:44,350 --> 00:17:46,380
Khi gọi hàm này để sử dụng

392
00:17:46,380 --> 00:17:50,720
ta gọi đoạn nằm trong ngoặc đơn là các tham số.

393
00:17:50,720 --> 00:17:52,720
Khi thực hiện hàm

394
00:17:52,720 --> 00:17:55,099
nó sẽ lấy dữ liệu đầu vào này.

395
00:17:55,099 --> 00:17:56,390
Ta đặt tham số ở giữa 2 dấu ngoặc đơn.

396
00:17:56,390 --> 00:17:59,010

397
00:17:59,010 --> 00:18:03,020
Ví dụ, ta có một chương trình nhỏ

398
00:18:03,020 --> 00:18:08,657
chứa hàm greet.

399
00:18:08,657 --> 00:18:10,490
Bây giờ ta sẽ định nghĩa hàm này

400
00:18:10,490 --> 00:18:12,270
Ta sẽ làm như sau

401
00:18:12,270 --> 00:18:14,180
Ta sẽ lấy một tham số đầu vào

402
00:18:14,180 --> 00:18:15,830
Đưa một tham số đầu vào

403
00:18:15,830 --> 00:18:17,814
vào chương trình.

404
00:18:17,814 --> 00:18:19,980
Ta cần giữ chỗ cho tham số này

405
00:18:19,980 --> 00:18:22,770
nên trong hàm này ta sẽ sử dụng "lang".

406
00:18:22,770 --> 00:18:24,680
Đây thực ra không phải là biến.

407
00:18:24,680 --> 00:18:28,140
Nó giống như là một biến giữ chỗ.

408
00:18:28,140 --> 00:18:30,560
Nên tham số đầu tiên này

409
00:18:30,560 --> 00:18:33,000
sẽ được đặt là "lang".

410
00:18:33,000 --> 00:18:35,970
Nếu tham số đầu tiên đó bằng "es"

411
00:18:35,970 --> 00:18:38,730
ta sẽ in ra "hola"

412
00:18:38,730 --> 00:18:42,740
Nếu tham số bằng 'fr', ta in ra "Bonjour".

413
00:18:42,740 --> 00:18:44,490
Ngoài 2 trường hợp trên ta in ra "Hello".

414
00:18:44,490 --> 00:18:47,150
Giống như có 3 ngôn ngữ trên thế giới

415
00:18:47,150 --> 00:18:48,940
là tiếng Tây Ban Nha, Pháp và Anh

416
00:18:48,940 --> 00:18:51,740
Nếu không phải tiếng Tây Ban Nha hay Pháp thì là chắc chắn là Tiếng Anh

417
00:18:51,740 --> 00:18:54,380
Tôi viết tắt chữ

418
00:18:54,380 --> 00:18:56,330
để đoạn code không quá cồng kềnh.

419
00:18:56,330 --> 00:18:58,362
Tôi nhắc lại, đây chỉ là phần định nghĩa,

420
00:18:58,362 --> 00:19:00,320
nếu bạn gõ nó vào phần tương tác này

421
00:19:00,320 --> 00:19:02,160
nó sẽ hiện lên các dấu ba chấm như vậy.

422
00:19:02,160 --> 00:19:04,100
Vậy bây giờ ta đã có hàm greet.

423
00:19:04,100 --> 00:19:08,210
Ta đã mở rộng Python qua việc tự tạo hàm riêng của mình.

424
00:19:08,210 --> 00:19:11,000
Giờ ta có thể gọi greet('en')

425
00:19:11,000 --> 00:19:15,530
Chương trình chạy đoạn code này, chỉ khác là "en" là "lang".

426
00:19:15,530 --> 00:19:18,670
Từ đầu vào đó chương trình sẽ in "Hello".

427
00:19:18,670 --> 00:19:19,970
Ta được kết quả in ra là "Hello"

428
00:19:19,970 --> 00:19:23,430
Hoặc khi khác, ta có thế sử dụng hàm greet

429
00:19:23,430 --> 00:19:25,780
với tham số đầu vào là "es".

430
00:19:25,780 --> 00:19:30,720
Giờ thì giá trị của lang là 'es', sau khi thực thi dòng code 

431
00:19:30,720 --> 00:19:32,270
chương trình in ra "Hola"

432
00:19:32,270 --> 00:19:36,530
Lần khác, ta lại để giá trị lang là "fr".

433
00:19:36,530 --> 00:19:40,070
Vậy hàm được thực thi 3 lần, nhưng mỗi lần dùng một "lang" khác

434
00:19:40,070 --> 00:19:44,307
vì ta đưa vào các tham số khác nhau.

435
00:19:44,307 --> 00:19:46,390
Như vậy ta có thể viết code biểu thị mục đích chung

436
00:19:46,390 --> 00:19:49,090
bên trong hàm

437
00:19:49,090 --> 00:19:53,310
rồi tái sử dụng code đó theo nhiều cách khác nhau.

438
00:19:53,310 --> 00:19:55,410
Đây là một cơ chế rất hữu dụng

439
00:19:55,410 --> 00:19:57,350
giúp mở rộng tính năng của hàm.

440
00:19:57,350 --> 00:20:00,070

441
00:20:00,070 --> 00:20:05,310
Các hàm không nhất thiết phải thực thi gì đó.

442
00:20:05,310 --> 00:20:07,020
Một cơ chế thực sự hữu dụng trong hàm

443
00:20:07,020 --> 00:20:08,420
là giá trị trả về.

444
00:20:08,420 --> 00:20:11,280

445
00:20:11,280 --> 00:20:13,040
Một hàm có thể lấy biến rồi xử lý

446
00:20:13,040 --> 00:20:14,890
như ta đã thấy.

447
00:20:14,890 --> 00:20:17,730
Sau đó nó trả về một giá trị

448
00:20:17,730 --> 00:20:20,020
Điểm mấu chốt ở giá trị trả về là

449
00:20:20,020 --> 00:20:22,850
khi ta gọi hàm như ở đây ta gọi hàm Max,

450
00:20:22,850 --> 00:20:26,580
nó sẽ trả lại một giá trị như chữ "w" nhỏ đó.

451
00:20:26,580 --> 00:20:29,920
Giờ chúng ta sẽ tạo một hàm

452
00:20:29,920 --> 00:20:32,520
greet không nhận tham số đầu vào.

453
00:20:32,520 --> 00:20:33,670
Không nhận tham số đầu vào.

454
00:20:33,670 --> 00:20:35,210
Nhưng nó có một từ khóa khác,

455
00:20:35,210 --> 00:20:38,990
một từ dành riêng trong Python.

456
00:20:38,990 --> 00:20:43,260
và thông tin ta đặt sau câu lệnh return

457
00:20:43,260 --> 00:20:47,240
sẽ được thay thế cho biểu thức greet() này.

458
00:20:47,240 --> 00:20:50,470
Vậy dù greet có là gì, hàm vẫn sẽ chạy

459
00:20:50,470 --> 00:20:53,350
và trả về giá trị trong lệnh return.

460
00:20:53,350 --> 00:20:56,040
Ví dụ nếu ta thực hiện print greet(), "Glenn"

461
00:20:56,040 --> 00:20:57,870
kết quả trả về là "Hello, Glenn"

462
00:20:57,870 --> 00:21:01,060
vì giá trị trả về của hàm greet là chuỗi "Hello".

