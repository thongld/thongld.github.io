179
00:08:22,760 --> 00:08:27,320
https://youtu.be/O0wE2M8-ois
And if it's not, then we
get of course a trace back

180
00:08:27,320 --> 00:08:30,000
and we're used to using
reading trace backs by now,

181
00:08:30,000 --> 00:08:32,929
no such file directory
stuff dot txt oh of course

182
00:08:32,929 --> 00:08:34,789
I forgot to save it
or I typed it wrong.

183
00:08:34,789 --> 00:08:37,799

184
00:08:37,799 --> 00:08:40,750
So the next thing
we have to learn

185
00:08:40,750 --> 00:08:42,610
is the notion of the
newline character.

186
00:08:42,610 --> 00:08:45,360
We haven't seen this
so far, but there's

187
00:08:45,360 --> 00:08:47,990
a special character
in files that

188
00:08:47,990 --> 00:08:51,739
is used to indicate
the end of a line,

189
00:08:51,739 --> 00:08:53,780
because these text files
that we've been writing,

190
00:08:53,780 --> 00:08:55,620
including the Python
programs that you have,

191
00:08:55,620 --> 00:08:57,720
are organized into lines.

192
00:08:57,720 --> 00:08:59,610
Each line has a variable
length and there's

193
00:08:59,610 --> 00:09:02,890
a special non printing character
that you just don't see.

194
00:09:02,890 --> 00:09:06,440
Now you see it, because you
see a line, multiple lines,

195
00:09:06,440 --> 00:09:09,990
but you don't see
the character itself.

196
00:09:09,990 --> 00:09:14,160
So it turns out that this
character is very important,

197
00:09:14,160 --> 00:09:16,630
because the data is just a
stream of characters on disk

198
00:09:16,630 --> 00:09:18,810
and then it's
punctuated by new lines,

199
00:09:18,810 --> 00:09:22,200
to tell it when it's
time to end a line.

200
00:09:22,200 --> 00:09:25,800
So, if we are building
a string constant

201
00:09:25,800 --> 00:09:30,040
for new line is backslash n.

202
00:09:30,040 --> 00:09:33,671
And so when we make
a string that we

203
00:09:33,671 --> 00:09:35,170
want to have a new
line in it, we'll

204
00:09:35,170 --> 00:09:38,320
say hello back slash n world.

205
00:09:38,320 --> 00:09:40,020
And then if you
print it out one way

206
00:09:40,020 --> 00:09:41,400
you actually see
the backslash n,

207
00:09:41,400 --> 00:09:43,550
but then if use the
print to print it out

208
00:09:43,550 --> 00:09:47,520
you see sort of like
the-- it moves back down

209
00:09:47,520 --> 00:09:49,590
to the left margin and down.

210
00:09:49,590 --> 00:09:53,510
So sometimes you see the
slash n and sometimes it's

211
00:09:53,510 --> 00:09:58,332
shown as movement
right, it moves it.

212
00:09:58,332 --> 00:09:59,790
The other thing
that's important is

213
00:09:59,790 --> 00:10:02,860
even though we represent this as
two characters, the backslash n

214
00:10:02,860 --> 00:10:05,180
is represented as two
characters in a string,

215
00:10:05,180 --> 00:10:06,360
it's actually one character.

216
00:10:06,360 --> 00:10:10,690
So if we print it out
we see x new line y,

217
00:10:10,690 --> 00:10:13,510
and if we ask how many
characters are in stuff, which

218
00:10:13,510 --> 00:10:15,780
is this string, it says three.

219
00:10:15,780 --> 00:10:17,530
That's important.

220
00:10:17,530 --> 00:10:22,190
OK there is one, two, three, the
new line is a single character.

221
00:10:22,190 --> 00:10:25,620
This is just a syntax that
we used to sort of encode

222
00:10:25,620 --> 00:10:27,870
a new line in a string.

223
00:10:27,870 --> 00:10:29,460
OK.

224
00:10:29,460 --> 00:10:35,380
So even though these are just
a long sequence of characters

225
00:10:35,380 --> 00:10:37,610
punctuated by new
lines visually,

226
00:10:37,610 --> 00:10:39,820
text editors and
operating systems

227
00:10:39,820 --> 00:10:43,980
show these files to us
as a sequence of lines.

228
00:10:43,980 --> 00:10:46,850
And it doesn't take very long to
just start thinking about them

229
00:10:46,850 --> 00:10:48,350
as a sequence of lines.

230
00:10:48,350 --> 00:10:49,850
As a matter of fact,
maybe you never

231
00:10:49,850 --> 00:10:51,537
wish I never told
you about new lines.

232
00:10:51,537 --> 00:10:53,120
But when we start
reading files, we're

233
00:10:53,120 --> 00:10:54,980
going to have to deal
with these new lines,

234
00:10:54,980 --> 00:10:58,130
so the way that we sort of
have to mentally visualize

235
00:10:58,130 --> 00:11:00,420
of what these text
files look like,

236
00:11:00,420 --> 00:11:03,990
is they have a new line that
punctuates the end of the line.

237
00:11:03,990 --> 00:11:06,080
Now in reality if
we look at this,

238
00:11:06,080 --> 00:11:09,134
this r really comes
right after it.

239
00:11:09,134 --> 00:11:10,800
Right, this is all a
bunch of characters

240
00:11:10,800 --> 00:11:13,180
and the new lines
are punctuation.

241
00:11:13,180 --> 00:11:15,840
OK to say this is first line,
second line, third line,

242
00:11:15,840 --> 00:11:16,700
fourth line.

243
00:11:16,700 --> 00:11:18,750
So you've got to think
that each of these things

244
00:11:18,750 --> 00:11:21,675
is here sitting at
the end of the line.

245
00:11:21,675 --> 00:11:23,880
And so the number of
characters in this line

246
00:11:23,880 --> 00:11:25,050
include that new line.

247
00:11:25,050 --> 00:11:27,000
Now the new line
is one character.

248
00:11:27,000 --> 00:11:28,560
OK?

249
00:11:28,560 --> 00:11:31,880
So, how do we read these files?

250
00:11:31,880 --> 00:11:36,090
Well we've already talked
about doing an open x file.

251
00:11:36,090 --> 00:11:37,860
And I'm just--
this x file, again,

252
00:11:37,860 --> 00:11:40,450
that's just an mnemonic
name that I made up.

253
00:11:40,450 --> 00:11:43,710
This is a handle, remember
it's not all the data,

254
00:11:43,710 --> 00:11:46,060
but the handle is the way
that we can read the data,

255
00:11:46,060 --> 00:11:48,710
we can use it as
an access point.

256
00:11:48,710 --> 00:11:50,770
The coolest way to
read a file if it's

257
00:11:50,770 --> 00:11:53,160
a text file in
multiple lines, is

258
00:11:53,160 --> 00:11:58,810
to use a determinant loop, a
for loop, for cheese in x files.

259
00:11:58,810 --> 00:12:02,390
So this-- remember we would
put a list of numbers or string

260
00:12:02,390 --> 00:12:03,210
here.

261
00:12:03,210 --> 00:12:05,230
Now we've put a
file handle here.

262
00:12:05,230 --> 00:12:08,550
Python knows automatically
that each time

263
00:12:08,550 --> 00:12:10,500
we're going to run this
loop, is going to go

264
00:12:10,500 --> 00:12:11,990
to the next line of the file.

265
00:12:11,990 --> 00:12:13,120
Automatically.

266
00:12:13,120 --> 00:12:15,930
For, a cheese is just a stupid
name that I came up with,

267
00:12:15,930 --> 00:12:18,290
it probably would be better
to call it line rather

268
00:12:18,290 --> 00:12:23,030
than cheese, but for
cheese in and then it goes,

269
00:12:23,030 --> 00:12:25,760
each file and then stops
when it reads the whole file.

270
00:12:25,760 --> 00:12:30,280
So this line will print
out every line in the file.

271
00:12:30,280 --> 00:12:31,460
That's how you do it.

272
00:12:31,460 --> 00:12:39,420
These three lines open a file
read every line in the file.

273
00:12:39,420 --> 00:12:43,080
So a file handle itself, is
a special kind of a sequence,

274
00:12:43,080 --> 00:12:45,340
much like a list of
numbers or a string

275
00:12:45,340 --> 00:12:47,190
is a sequence of characters.

276
00:12:47,190 --> 00:12:49,830
So one of the things we can do,
to combine one of our counting

277
00:12:49,830 --> 00:12:53,360
idioms, is count the
number of lines in a file.

278
00:12:53,360 --> 00:12:56,990
OK and so how we would do that
as we would open the file, set

279
00:12:56,990 --> 00:12:58,410
a counter to zero,
this time I'll

280
00:12:58,410 --> 00:13:01,690
use a mnemonic variable called
count, for line in f hand

281
00:13:01,690 --> 00:13:04,010
that says, run this
indented text once

282
00:13:04,010 --> 00:13:06,540
for each line in the file,
free time in the file

283
00:13:06,540 --> 00:13:10,240
add count equals count plus
1, when the for loop is done,

284
00:13:10,240 --> 00:13:13,020
print the count.

285
00:13:13,020 --> 00:13:15,850
Pretty straightforward,
very few other languages

286
00:13:15,850 --> 00:13:18,000
are capable of
writing that program

287
00:13:18,000 --> 00:13:22,290
in as quick and as dense, as
to sync the way as Python is.

288
00:13:22,290 --> 00:13:25,100
Python does a really,
really nice job of this.

289
00:13:25,100 --> 00:13:28,130
OK so that's how
you count the lines.

290
00:13:28,130 --> 00:13:31,260
Open it write a for
loop and then add one.

291
00:13:31,260 --> 00:13:35,030
Now we can't just say, so what
you can't and this gives you

292
00:13:35,030 --> 00:13:40,620
a sense, you can't
say Len f hand.

293
00:13:40,620 --> 00:13:42,650
And that's because this
isn't really the data,

294
00:13:42,650 --> 00:13:45,980
that's sort of you have to
like pull, pull it and read

295
00:13:45,980 --> 00:13:48,580
it to get the data out of
it, but though we'll see

296
00:13:48,580 --> 00:13:51,050
another way reading it later.

297
00:13:51,050 --> 00:13:55,110
OK so that's counting
the lines in a file.

298
00:13:55,110 --> 00:13:59,000
It turns out you can also
read the entire file.

299
00:13:59,000 --> 00:14:02,110
Now if you read the entire file
it's not broken into lines.

300
00:14:02,110 --> 00:14:04,030
You're getting all the
characters punctuated

301
00:14:04,030 --> 00:14:06,350
by new lines and
you get everything.

302
00:14:06,350 --> 00:14:09,360
Now you don't want to
read this if it's too big.

303
00:14:09,360 --> 00:14:12,750
So it's going to all try to read
into the memory of the computer

304
00:14:12,750 --> 00:14:14,205
and if the memory's
not big enough

305
00:14:14,205 --> 00:14:16,100
you just slow down to a crawl.

306
00:14:16,100 --> 00:14:19,580
But it's a real tiny file,
this works just fine.

307
00:14:19,580 --> 00:14:23,100
And so we have sort of
real-- we open a file

308
00:14:23,100 --> 00:14:25,460
and we say f hand dot read.

309
00:14:25,460 --> 00:14:28,630
This is basically saying
hey, dear fhand, read it all

310
00:14:28,630 --> 00:14:32,050
and return it to me as a string.

311
00:14:32,050 --> 00:14:34,730
So that's a string with all the
lines of the file concatenated

312
00:14:34,730 --> 00:14:37,150
together with new
lines, which is actually

313
00:14:37,150 --> 00:14:38,800
exactly what's in the file.

314
00:14:38,800 --> 00:14:40,180
It's the raw data.

315
00:14:40,180 --> 00:14:42,530
That for loop sort of
looks for the new line

316
00:14:42,530 --> 00:14:44,030
and does all the
stuff automatically

317
00:14:44,030 --> 00:14:46,400
for us that's quite nice.

318
00:14:46,400 --> 00:14:49,410
So then we can like because
imp is a string at this point,

319
00:14:49,410 --> 00:14:50,940
we can just print
the length of it,

320
00:14:50,940 --> 00:14:55,680
we can say oh, there's
94,626 characters that

321
00:14:55,680 --> 00:14:56,780
came from that file.

322
00:14:56,780 --> 00:15:02,010
It reads the whole thing, whole
file, reads the whole file.

323
00:15:02,010 --> 00:15:04,380
We can also do things
like slice it now

324
00:15:04,380 --> 00:15:08,395
and so this is the first
20 characters from zero

325
00:15:08,395 --> 00:15:10,670
up to but not including 20.

326
00:15:10,670 --> 00:15:12,630
So this is our file.

327
00:15:12,630 --> 00:15:13,470
OK.

328
00:15:13,470 --> 00:15:15,660
So that's reading
through the whole file.

329
00:15:15,660 --> 00:15:17,670
So let me go back a little bit.

330
00:15:17,670 --> 00:15:20,380
This is the file that
we're going to play with,

331
00:15:20,380 --> 00:15:23,550
this file here that we're going
to play with in this class is

332
00:15:23,550 --> 00:15:24,920
a mailbox file.

333
00:15:24,920 --> 00:15:27,170
And this is actual real data
and these are real people

334
00:15:27,170 --> 00:15:29,586
and these are real dates,
having to do with an open source

335
00:15:29,586 --> 00:15:31,815
project that I worked
on called Sakai.

336
00:15:31,815 --> 00:15:36,060
I actually have a tattoo of
Sakai here on my shoulder.

337
00:15:36,060 --> 00:15:39,330
Maybe in an upcoming lecture
I'll have a short sleeve shirt

338
00:15:39,330 --> 00:15:42,470
and show you my tattoo but
for now I can't because I've

339
00:15:42,470 --> 00:15:43,740
got clothes on.

340
00:15:43,740 --> 00:15:52,020
So but this is real data, it's
the mbox dot txt and mbox dot

341
00:15:52,020 --> 00:15:52,520
txt file.

342
00:15:52,520 --> 00:15:54,030
So, so that's the
file that we're

343
00:15:54,030 --> 00:15:56,300
going to use for most of
the next few assignments.

344
00:15:56,300 --> 00:15:58,330
It'll be the same file,
you'll get tired of it,

345
00:15:58,330 --> 00:16:00,889
and you get to know all these
people Steven and Chen Wen

346
00:16:00,889 --> 00:16:02,180
and all the people in the file.

347
00:16:02,180 --> 00:16:05,720

348
00:16:05,720 --> 00:16:10,480
So we can search for
lines that have a prefix.

349
00:16:10,480 --> 00:16:14,390
This is kind of find pattern
from the looping lecture.

350
00:16:14,390 --> 00:16:17,412
So we're going to go through
a list of lines in a file

351
00:16:17,412 --> 00:16:19,370
and we're going to only
print out the ones that

352
00:16:19,370 --> 00:16:20,900
match a certain thing.

353
00:16:20,900 --> 00:16:22,636
So again, we open
the file up, we're

354
00:16:22,636 --> 00:16:24,510
going to write a for
loop that's going to say

355
00:16:24,510 --> 00:16:26,610
for each line in the file.

356
00:16:26,610 --> 00:16:30,460
If the line, and then we
can call a utility function

