1
00:00:00,000 --> 00:00:00,500
quangdutran 02/06 Thao reviewed
https://youtu.be/6KgArgGi6Mk
Dịch bởi Kiến Học
---------- KIENHOC.VN ----------

2
00:00:00,500 --> 00:00:03,680
Chào mừng đến với chương 5.
Vòng lặp và bước lặp.
   
---------- KIENHOC.VN ----------

3
00:00:03,680 --> 00:00:06,830
Như thường lệ, bài giảng này được 
cấp quyền sử dụng bởi giấy phép Creative Commons Atrribution,
   
---------- KIENHOC.VN ----------

4
00:00:06,830 --> 00:00:09,460
bao gồm âm thanh, hình ảnh,
   
---------- KIENHOC.VN ----------

5
00:00:09,460 --> 00:00:12,620
slide bài giảng, và sách.

6
00:00:12,620 --> 00:00:18,770
Giờ ta đến
với mô hình cơ bản thứ tư.

7
00:00:18,770 --> 00:00:20,710
Ta đã nói về tính tuần tự,

8
00:00:20,710 --> 00:00:22,180
bước này trước bước kia sau.

9
00:00:22,180 --> 00:00:24,596
Ta đã nói về điều kiện,
một câu lệnh có thể chạy

10
00:00:24,596 --> 00:00:25,096
có thể không.

11
00:00:25,096 --> 00:00:27,762
Trong chương 4, ta đã nói về mô hình
lưu trữ và sử dụng lại,

12
00:00:27,762 --> 00:00:30,150
giờ ta sẽ bàn về mô hình vòng lặp.

13
00:00:30,150 --> 00:00:33,220
Vòng lặp là mô hình 
nền tảng

14
00:00:33,220 --> 00:00:33,720
cuối cùng.

15
00:00:33,720 --> 00:00:35,960
Và có lẽ nó là 
mô hình quan trọng nhất,

16
00:00:35,960 --> 00:00:39,920
vì nó cho phép ta
sử dụng máy tính

17
00:00:39,920 --> 00:00:43,560
làm rất nhiều thứ 
mà con người không có sức

18
00:00:43,560 --> 00:00:45,750
làm đi làm lại mãi.

19
00:00:45,750 --> 00:00:49,970
Sau bài học này các bạn sẽ có nhiều

20
00:00:49,970 --> 00:00:52,710
kinh nghiệm lập trình cơ bản hơn.

21
00:00:52,710 --> 00:00:56,120
Ta sẽ nói về các chuỗi ký tự
rồi đến các tập tin,

22
00:00:56,120 --> 00:00:58,890
và sẽ thực hiện được nhiều thứ
sau khi học xong.

23
00:00:58,890 --> 00:01:01,700
Hãy kiên nhẫn, 
sẽ lâu đấy

24
00:01:01,700 --> 00:01:04,319
nhưng rồi ta sẽ đến đích.

25
00:01:04,319 --> 00:01:07,070
Chào mừng đến với các bước lặp.

26
00:01:07,070 --> 00:01:12,130
Đây là ví dụ mà tôi có 
ở chương

27
00:01:12,130 --> 00:01:13,180
đầu tiên.

28
00:01:13,180 --> 00:01:15,360
Nhắc lại cho bạn,

29
00:01:15,360 --> 00:01:18,270
ta có từ khóa "while".

30
00:01:18,270 --> 00:01:21,370
Từ khóa "while" hoạt động
giống "if" ở chỗ

31
00:01:21,370 --> 00:01:23,860
nó ẩn trong đó một quyết định.

32
00:01:23,860 --> 00:01:27,630
Và nó sẽ thực hiện các 
dòng lệnh thụt vào này

33
00:01:27,630 --> 00:01:30,060
hoặc là bỏ qua chúng.

34
00:01:30,060 --> 00:01:33,030
Hoặc là làm,
hoặc là bỏ qua.

35
00:01:33,030 --> 00:01:34,920
"While" khác với "if"

36
00:01:34,920 --> 00:01:38,920
là nó sẽ liên tục thực hiện các câu lệnh chừng nào

37
00:01:38,920 --> 00:01:42,500
kết quả của câu hỏi này là đúng.

38
00:01:42,500 --> 00:01:46,060
Trường hợp này, 
n là 5.

39
00:01:46,060 --> 00:01:48,160
Khi n lớn hơn 0, 
câu lệnh sẽ chạy

40
00:01:48,160 --> 00:01:49,670
giống như trong hàm if.

41
00:01:49,670 --> 00:01:53,000
In ra số 5, 
trừ đi 1 là 4.

42
00:01:53,000 --> 00:01:56,822
Trở lên trên, 
lại hỏi lại một lần nữa.

43
00:01:56,822 --> 00:01:58,030
n còn lớn hơn 0 không?

44
00:01:58,030 --> 00:02:00,880
Vì n đang là 4, 
ta tiếp tục thực hiện câu lệnh.

45
00:02:00,880 --> 00:02:03,400
In ra 4, 
n trừ đi 1.

46
00:02:03,400 --> 00:02:06,650
Rồi 3, 2.

47
00:02:06,650 --> 00:02:09,680
Cuối cùng ta 
in ra 1.

48
00:02:09,680 --> 00:02:10,979
n - 1 còn 0.

49
00:02:10,979 --> 00:02:13,200
Trở lên đây.

50
00:02:13,200 --> 00:02:17,230
Giờ n không lớn hơn 0 nữa nên ta

51
00:02:17,230 --> 00:02:19,500
chuyển ra thực hiện ngoài vòng lặp.

52
00:02:19,500 --> 00:02:20,690
Ta rời vòng lặp.

53
00:02:20,690 --> 00:02:22,510
Trong ngôn ngữ Python như vậy tức là

54
00:02:22,510 --> 00:02:26,020
ta tiếp tục sang những dòng lệnh
nằm thẳng với lệnh while.

55
00:02:26,020 --> 00:02:29,240
Các dòng mà 
lùi đầu dòng bằng với câu lệnh while.

56
00:02:29,240 --> 00:02:30,550
Nó hoạt động như thế đấy.

57
00:02:30,550 --> 00:02:33,445
Tôi in giá trị của n ở cuối
để nhắc ta rằng

58
00:02:33,445 --> 00:02:34,980
n kết thúc ở số 0.

59
00:02:34,980 --> 00:02:35,715
Không phải là 1.

60
00:02:35,715 --> 00:02:40,790
Số mà ta in ra cuối cùng 
trong vòng lặp là số 1,

61
00:02:40,790 --> 00:02:41,980
nhưng giá trị cuối của n là 0.

62
00:02:41,980 --> 00:02:44,830
Vòng lặp vẫn chạy chừng nào n

63
00:02:44,830 --> 00:02:48,450
lớn hơn 0, nên n phải nhỏ hơn hoặc bằng 0

64
00:02:48,450 --> 00:02:50,410
thì mới ra khỏi vòng lặp được.

65
00:02:50,410 --> 00:02:54,020
Đó là những điều mà 
ta đã làm.

66
00:02:54,020 --> 00:02:58,600
Từ từ đã,
còn một điều.

67
00:02:58,600 --> 00:03:00,960
Biến vòng lặp.

68
00:03:00,960 --> 00:03:04,440
Cái quan trọng là không được
để vòng lặp này chạy mãi mãi.

69
00:03:04,440 --> 00:03:06,000
Ta không muốn nó 
chạy mãi.

70
00:03:06,000 --> 00:03:08,420
Ta muốn nó chạy theo ý mình,

71
00:03:08,420 --> 00:03:11,089
có thể là trong một khoảng thời gian dài,
nhưng không phải mãi mãi.

72
00:03:11,089 --> 00:03:12,880
Phải có một cách
thoát khỏi vòng lặp,

73
00:03:12,880 --> 00:03:14,963
nếu không nó sẽ trở thành
vòng lặp vô hạn,

74
00:03:14,963 --> 00:03:16,730
ta sẽ nói về nó trang tiếp theo.

75
00:03:16,730 --> 00:03:18,440
Biến vòng lặp nói chung

76
00:03:18,440 --> 00:03:22,030
là biến mà sẽ thay đổi 
trong từng vòng lặp,

77
00:03:22,030 --> 00:03:25,859
và ta đang thay đổi nó
bằng cách trừ đi 1.

78
00:03:25,859 --> 00:03:27,650
Vậy nên các câu lệnh này 
sẽ chạy liên tục,

79
00:03:27,650 --> 00:03:29,300
và ta có thể nhận thấy 

80
00:03:29,300 --> 00:03:31,070
rồi nó sẽ kết thúc.

81
00:03:31,070 --> 00:03:31,742
Cho dù n là số nào đi nữa.

82
00:03:31,742 --> 00:03:33,700
Có thể là một số lớn, 
nhưng cuối cùng 

83
00:03:33,700 --> 00:03:35,510
nó sẽ xuống còn 0.

84
00:03:35,510 --> 00:03:39,550
Biến vòng lặp 
quyết định số lần chạy 

85
00:03:39,550 --> 00:03:41,690
của vòng lặp 
và nó cũng cho phép

86
00:03:41,690 --> 00:03:43,600
ta làm điều gì đó khác 
trong vòng lặp.

87
00:03:43,600 --> 00:03:45,349
Đây như là một vòng lặp

88
00:03:45,349 --> 00:03:47,430
chỉ để in ra giá trị 
của biến vòng lặp.

89
00:03:47,430 --> 00:03:50,454
Như thế nghĩa là vòng lặp này sẽ chạy 5 lần.

90
00:03:50,454 --> 00:03:52,620
và mỗi lần chạy thì lệnh thực hiện có thể

91
00:03:52,620 --> 00:03:53,491
sẽ khác.

92
00:03:53,491 --> 00:03:55,740
Nếu bạn chạy vòng lặp 
với các lệnh như nhau,

93
00:03:55,740 --> 00:03:57,698
lặp lại lần này qua lần khác, 
không thay đổi dữ liệu

94
00:03:57,698 --> 00:04:00,120
thì rất là vô nghĩa.

95
00:04:00,120 --> 00:04:02,610
Vậy nên không phải cứ có biến vòng lặp

96
00:04:02,610 --> 00:04:05,490
là bạn đã
tạo ra được vòng lặp chuẩn.

97
00:04:05,490 --> 00:04:09,260
Vòng lặp vô hạn là một lỗi thông thường

98
00:04:09,260 --> 00:04:10,590
ta nên tránh.

99
00:04:10,590 --> 00:04:13,040
Đây là một vòng lặp ví dụ.

100
00:04:13,040 --> 00:04:15,520
Ta bắt đầu với 
n = 5.

101
00:04:15,520 --> 00:04:18,700
Ta có một câu hỏi đó là 
khi n > 0,

102
00:04:18,700 --> 00:04:23,090
vòng lặp sẽ chạy 
chừng nào mà n > 0.

103
00:04:23,090 --> 00:04:25,780
Nhưng vấn đề là 
ta không thay đổi trong khối lệnh này,

104
00:04:25,780 --> 00:04:27,190
ta không thay đổi n.

105
00:04:27,190 --> 00:04:28,690
Có nghĩa là khi
quay lại,

106
00:04:28,690 --> 00:04:29,860
n sẽ vẫn là 5.

107
00:04:29,860 --> 00:04:31,760
Các câu lệnh này chạy, 
và n vẫn là 5.

108
00:04:31,760 --> 00:04:34,100
Lệnh tiếp tục chạy, 
n vẫn là 5.

109
00:04:34,100 --> 00:04:36,224
Đây là một vòng lặp vô hạn, 
có nghĩa là vòng lặp này

110
00:04:36,224 --> 00:04:37,080
sẽ không bao giờ dừng.

111
00:04:37,080 --> 00:04:39,580
Ta không thoát khỏi vòng lặp được.

112
00:04:39,580 --> 00:04:41,580
Nó sẽ chạy mãi,

113
00:04:41,580 --> 00:04:43,350
vì n không thay đổi.

114
00:04:43,350 --> 00:04:45,230
Hai câu lệnh này 
không thay đổi giá trị của n.

115
00:04:45,230 --> 00:04:46,670
Vậy nên trong biến vòng lặp

116
00:04:46,670 --> 00:04:48,560
cần có sự thay đổi giá trị

117
00:04:48,560 --> 00:04:51,810
để vòng lặp có tiến triển

118
00:04:51,810 --> 00:04:54,340
và biết khi nào thì dừng lại.

119
00:04:54,340 --> 00:04:55,700
Vậy đây là một vòng lặp vô hạn.

120
00:04:55,700 --> 00:04:58,650
Các bạn có thấy các chai dầu gội, dầu xả thường ghi

121
00:04:58,650 --> 00:05:01,450
"thoa dầu, gội sạch rồi lặp lại lần nữa".

122
00:05:01,450 --> 00:05:03,839
Lần sau khi đi tắm

123
00:05:03,839 --> 00:05:05,630
bạn hãy thử tìm vòng lặp vô hạn

124
00:05:05,630 --> 00:05:08,380
trên chai dầu gội và dầu xả của mình xem,

125
00:05:08,380 --> 00:05:14,370
hầu như chai nào cũng có.

126
00:05:14,370 --> 00:05:18,940
Đây là một ví dụ khác
để nhấn mạnh

127
00:05:18,940 --> 00:05:21,120
rằng ta có thể tạo ra 
vòng lặp

128
00:05:21,120 --> 00:05:22,810
không bao giờ chạy.

129
00:05:22,810 --> 00:05:25,010
Câu này giống như 
câu lệnh if.

130
00:05:25,010 --> 00:05:27,480
Câu lệnh while kiểm tra giống
câu lệnh if.

131
00:05:27,480 --> 00:05:31,720
Khi n được đặt bằng 0
và ta hỏi,

132
00:05:31,720 --> 00:05:33,530
câu lệnh sẽ đưa ra quyết định

133
00:05:33,530 --> 00:05:34,738
dựa vào điều kiện
n > 0.

134
00:05:34,738 --> 00:05:36,810
Nhưng n không lớn hơn 0

135
00:05:36,810 --> 00:05:39,030
nên nó sẽ nhảy cóc sang đoạn này.

136
00:05:39,030 --> 00:05:41,520
Nhảy thẳng từ đây đến đây

137
00:05:41,520 --> 00:05:44,710
và không thực hiện các câu lệnh này.

138
00:05:44,710 --> 00:05:49,690
Chúng ta gọi đó 
là vòng lặp "zero trip".

139
00:05:49,690 --> 00:05:53,590
Đương nhiên vòng lặp 
này khá vô nghĩa.

140
00:05:53,590 --> 00:05:57,270
Đây chỉ là ví dụ cho thấy 
câu hỏi được đặt ra 

141
00:05:57,270 --> 00:06:00,760
nằm phía trên các dòng lệnh 
tạo nên vòng lặp.

142
00:06:00,760 --> 00:06:03,290
Nếu nó sai 
thì vòng lặp sẽ không bao giờ chạy.

143
00:06:03,290 --> 00:06:07,780
Vậy rất có thể vòng lặp 
sẽ không chạy lần nào.

144
00:06:07,780 --> 00:06:09,110
Đó là về vòng lặp.

145
00:06:09,110 --> 00:06:15,545
Có nhiều cách
để điều khiển hướng đi của vòng lặp.

146
00:06:15,545 --> 00:06:17,920
Hướng cơ bản của vòng lặp
là khi đến cuối câu lệnh,

147
00:06:17,920 --> 00:06:20,445
nó lại trở về lệnh "while"
để kiểm tra.

148
00:06:20,445 --> 00:06:22,600
Đây là một cách khác 
để thoát khỏi vòng lặp,

149
00:06:22,600 --> 00:06:24,720
tức điều khiển hướng thực thi
của vòng lặp.

150
00:06:24,720 --> 00:06:27,690
Có một từ khóa nằm trong ngôn ngữ Python

151
00:06:27,690 --> 00:06:30,924
gọi là...

152
00:06:30,924 --> 00:06:33,980
Để tôi dùng màu mực xanh.

153
00:06:33,980 --> 00:06:35,249
Gọi là "break".

154
00:06:35,249 --> 00:06:36,790
"Break" là một

155
00:06:36,790 --> 00:06:38,540
từ dành riêng.

156
00:06:38,540 --> 00:06:42,940
"Break" nói rằng nếu tôi
đang ở trong vòng lặp thì hãy dừng vòng lặp lại.

157
00:06:42,940 --> 00:06:45,410
Ra khỏi vòng lặp đi.
Tôi không cần nó nữa.

158
00:06:45,410 --> 00:06:47,570
Đây là một vòng lặp.

159
00:06:47,570 --> 00:06:49,270
Vậy tôi đã giới thiệu xong về

160
00:06:49,270 --> 00:06:51,561
vòng lặp vô hạn.

161
00:06:51,561 --> 00:06:54,030
Ta vừa tạo một vòng lặp vô hạn.

162
00:06:54,030 --> 00:06:58,820
Vì câu hỏi sau "while" ở ngay đây,
và câu trả lời là 

163
00:06:58,820 --> 00:06:59,320
đúng.

164
00:06:59,320 --> 00:07:01,327
Đó là một cách tạo 
vòng lặp vô hạn.

165
00:07:01,327 --> 00:07:03,910
Ta làm điều này vì giờ 
ta có một cách khác để 

166
00:07:03,910 --> 00:07:04,410
thoát khỏi vòng lặp.

167
00:07:04,410 --> 00:07:07,080
Ta vừa tạo một vòng lặp, và nhìn vào dòng này

168
00:07:07,080 --> 00:07:10,170
ta thấy nó có vẻ là vòng lặp vô hạn

169
00:07:10,170 --> 00:07:13,360
Vòng lặp này sẽ đọc đầu vào,

170
00:07:13,360 --> 00:07:17,260
kiểm tra xem chuỗi ký tự ta gõ vào
có phải "done" hay không.

171
00:07:17,260 --> 00:07:20,661
Nếu đúng, ta sẽ nhảy ra ngoài bằng lệnh "break"

172
00:07:20,661 --> 00:07:21,660
và thoát khỏi vòng lặp.

173
00:07:21,660 --> 00:07:23,250
Nếu không thì in những 
gì ta đánh vào.

174
00:07:23,250 --> 00:07:25,370
Khi chạy chương trình vòng lặp này sẽ yêu cầu

175
00:07:25,370 --> 00:07:29,917
ta nhập chuỗi ký tự 
cho tới khi nào ta gõ "done".

176
00:07:29,917 --> 00:07:31,250
Ở đây nó đã làm đúng như vậy.

177
00:07:31,250 --> 00:07:33,375
Nó yêu cầu nhập, 
ta gõ "hello there" (xin chào), nó sẽ in ra.

178
00:07:33,375 --> 00:07:35,320
Ta gõ "finished" (kết thúc),
nó cũng in ra.

