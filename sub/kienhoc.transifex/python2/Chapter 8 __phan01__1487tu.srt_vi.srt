1
00:00:00,000 --> 00:00:00,499
https://youtu.be/nO8eU3uts0o
Thao Tran

2
00:00:00,499 --> 00:00:04,500
Chào mừng các bạn tới chương 8,
Python Lists.

3
00:00:04,500 --> 00:00:08,330
Giờ chúng ta sẽ vào việc thực sự.

4
00:00:08,330 --> 00:00:11,820
Ta sẽ làm các list, dictionary, tuple.

5
00:00:11,820 --> 00:00:13,540
Ta sẽ bắt đầu xử lý dữ liệu,

6
00:00:13,540 --> 00:00:17,280
phân tích dữ liệu, chuẩn bị để

7
00:00:17,280 --> 00:00:18,250
phân tích dữ liệu thực sự.

8
00:00:18,250 --> 00:00:21,980
Các bài giảng, âm thanh, hình ảnh, slide

9
00:00:21,980 --> 00:00:25,730
và cuốn sách được cấp quyền sử dụng 
theo giấy phép Creative Commons Attribution.

10
00:00:25,730 --> 00:00:29,320
List, dictionary và tuple,

11
00:00:29,320 --> 00:00:31,570
3 chủ đề lớn mà ta sắp học đến,

12
00:00:31,570 --> 00:00:33,610
là các bộ dữ liệu.

13
00:00:33,610 --> 00:00:37,300
Ta đã từng dùng đến list đúng không?

14
00:00:37,300 --> 00:00:40,730
Ta đã dùng list khi viết vòng lặp for.

15
00:00:40,730 --> 00:00:43,990
List trong Python nằm giữa các ngoặc vuông.

16
00:00:43,990 --> 00:00:46,560
Đây là một list các hằng số.

17
00:00:46,560 --> 00:00:48,940
Khi dạy cho các bạn về biến số,

18
00:00:48,940 --> 00:00:50,560
tôi mới chỉ nói đơn giản thôi.

19
00:00:50,560 --> 00:00:53,880
Tôi nói rằng nếu ta gán x=2

20
00:00:53,880 --> 00:00:57,530
rồi lại gán x=4 thì 
cái này sẽ được ghi đè lên cái kia.

21
00:00:57,530 --> 00:01:00,776
Bộ dữ liệu là khi ta cho nhiều thứ

22
00:01:00,776 --> 00:01:01,650
vào cùng một biến.

23
00:01:01,650 --> 00:01:05,560
Tôi sẽ phải có cách tìm kiếm các thứ này,

24
00:01:05,560 --> 00:01:11,890
nhưng nó cho phép ta đưa nhiều thứ vào một biến.

25
00:01:11,890 --> 00:01:14,541
Ví dụ ta có list friends gồm 3 chuỗi Joseph,

26
00:01:14,541 --> 00:01:16,040
Glenn, Sally, và list carryon gồm

27
00:01:16,040 --> 00:01:18,290
socks, shirt và perfume.

28
00:01:18,290 --> 00:01:20,110
Về cơ bản là vậy.

29
00:01:20,110 --> 00:01:21,730
Vậy cái gì không phải là bộ dữ liệu?

30
00:01:21,730 --> 00:01:23,380
Đó là các biến đơn giản.

31
00:01:23,380 --> 00:01:25,150
Biến đơn giản không phải bộ dữ liệu.

32
00:01:25,150 --> 00:01:27,950
Như trong ví dụ này, tôi gán

33
00:01:27,950 --> 00:01:31,250
x=2 rồi x=4. Khi in x ra thì nó sẽ là 4,

34
00:01:31,250 --> 00:01:33,430
còn 2 đã bị ghi đè lên mất.

35
00:01:33,430 --> 00:01:36,710
Nó từng có ở đấy nhưng rồi đã biến mất.

36
00:01:36,710 --> 00:01:39,300
Đó là một biến bình thường, không phải bộ,

37
00:01:39,300 --> 00:01:41,860
không thể đưa nhiều thứ vào biến.

38
00:01:41,860 --> 00:01:43,990
Nhưng khi đưa nhiều thứ vào biến

39
00:01:43,990 --> 00:01:45,500
thì ta phải có cách tìm 

40
00:01:45,500 --> 00:01:46,800
các thứ đó.

41
00:01:46,800 --> 00:01:49,280
Ta sẽ học sau.

42
00:01:49,280 --> 00:01:51,200
Vậy ta đã dùng list hằng

43
00:01:51,200 --> 00:01:53,110
trong các chương trước

44
00:01:53,110 --> 00:01:55,400
chỉ vì ta phải dùng thôi.

45
00:01:55,400 --> 00:01:57,630
Trong chương về vòng lặp for,

46
00:01:57,630 --> 00:02:00,540
ta đã dùng list các số.

47
00:02:00,540 --> 00:02:03,490
Ta đã dùng list các chuỗi, đây là

48
00:02:03,490 --> 00:02:06,470
các chuỗi "red", "yellow", "blue".

49
00:02:06,470 --> 00:02:11,520
Và các phần tử không nhất thiết

50
00:02:11,520 --> 00:02:13,680
phải cùng một kiểu dữ liệu.

51
00:02:13,680 --> 00:02:18,120
Đây là một list 3 thứ gồm chuỗi "red",

52
00:02:18,120 --> 00:02:21,340
số nguyên 24 và 

53
00:02:21,340 --> 00:02:23,010
số thực 98.6

54
00:02:23,010 --> 00:02:25,820
Ở đây tôi muốn lưu ý một điểm thú vị.

55
00:02:25,820 --> 00:02:28,630
Cái này cho thấy số thực không phải lúc nào

56
00:02:28,630 --> 00:02:32,050
cũng được thể hiện chính xác trên máy tính.

57
00:02:32,050 --> 00:02:34,680
Nó cho ta thấy
máy tính hoạt động ra sao.

58
00:02:34,680 --> 00:02:37,790
Ví dụ ở đây, 98.6 thực ra là

59
00:02:37,790 --> 00:02:38,990
98 phẩy cả đống này.

60
00:02:38,990 --> 00:02:41,290
Nên nếu nhìn thấy cái gì dạng này
các bạn đừng hoảng.

61
00:02:41,290 --> 00:02:44,750
Các số thực sẽ hiện lên dạng này.

62
00:02:44,750 --> 00:02:46,639
Một điểm thú vị, tuy rằng

63
00:02:46,639 --> 00:02:48,180
ta sẽ không dùng tới nhiều, là

64
00:02:48,180 --> 00:02:51,540
một list cũng có thể làm phần tử

65
00:02:51,540 --> 00:02:53,020
trong một list khác.

66
00:02:53,020 --> 00:02:57,460
List lớn này gồm có 3 phần tử: 1, 7

67
00:02:57,460 --> 00:03:00,120
và một list con bao gồm 5 và 6.

68
00:03:00,120 --> 00:03:02,570
Về độ dài, list này có

69
00:03:02,570 --> 00:03:04,470
3 phần tử.

70
00:03:04,470 --> 00:03:08,110
3 chứ không phải 4 vì bên trong nó chứa

71
00:03:08,110 --> 00:03:09,910
3 thứ.

72
00:03:09,910 --> 00:03:13,350
Một list rỗng chỉ có 2 ngoặc vuông. OK?

73
00:03:13,350 --> 00:03:16,780
Như tôi đã nói, ta vẫn thường dùng list.

74
00:03:16,780 --> 00:03:20,910
Ta có các biến vòng lặp.
for i in, đây là một list.

75
00:03:20,910 --> 00:03:23,880
Ta vẫn thường dùng nó.

76
00:03:23,880 --> 00:03:25,740
Tương tự, ta cũng đã dùng list

77
00:03:25,740 --> 00:03:29,015
trong vòng lặp vô hạn,
đây là một cách hay để duyệt các list

78
00:03:29,015 --> 00:03:33,090
như for friend in friends. Lặp 3 lần, 

79
00:03:33,090 --> 00:03:35,940
in ra 3 dòng, biến friend lần lượt

80
00:03:35,940 --> 00:03:38,520
nhận từng giá trị trong list

81
00:03:38,520 --> 00:03:40,400
và thực hiện lệnh.

82
00:03:40,400 --> 00:03:44,870
Tóm lại là ta đã biết về list.

83
00:03:44,870 --> 00:03:51,700
Giống như trong chuỗi, ta có thể

84
00:03:51,700 --> 00:03:54,270
dùng toán tử index,
tức ngoặc vuông,

85
00:03:54,270 --> 00:04:00,350
để tìm các phần tử trong list.
Ở đây là friend[1]

86
00:04:00,350 --> 00:04:06,120
Vẫn theo quy tắc đánh số thang máy ở châu Âu,

87
00:04:06,120 --> 00:04:08,700
phần tử đầu tiên trong list là [0],

88
00:04:08,700 --> 00:04:11,780
thứ hai là [1], thứ ba là [2].

89
00:04:11,780 --> 00:04:13,370
Khi in friend[1],

90
00:04:13,370 --> 00:04:17,190
ta được kết quả Glenn, tức phần tử thứ 2.

91
00:04:17,190 --> 00:04:20,230
Cũng như chuỗi ký tự.
Khi các bạn quen với chuỗi rồi

92
00:04:20,230 --> 00:04:22,620
thì với list và các thứ khác cũng dễ thôi.

93
00:04:22,620 --> 00:04:24,710
Hãy nhớ rằng như ta đang ở châu Âu,

94
00:04:24,710 --> 00:04:27,720
các thứ bắt đầu bằng số 0.

95
00:04:27,720 --> 00:04:31,210
Một số phần tử dữ liệu ta phải xử lý

96
00:04:31,210 --> 00:04:33,460
không thay đổi được, ví dụ như các chuỗi ký tự.

97
00:04:33,460 --> 00:04:35,500
Khi ta yêu cầu viết thường một chuỗi,

98
00:04:35,500 --> 00:04:37,490
ta nhận được một bản sao viết thường

99
00:04:37,490 --> 00:04:40,180
vì các chuỗi không thay đổi được.

100
00:04:40,180 --> 00:04:44,880
Ta có thể thấy điều đó qua ví dụ:

101
00:04:44,880 --> 00:04:46,700
fruit[0] bằng chữ b viết thường.

102
00:04:46,700 --> 00:04:49,000
Cái này không đổi

103
00:04:49,000 --> 00:04:53,050
chữ B hoa thành b thường.

104
00:04:53,050 --> 00:04:56,550
Traceback báo là đối tượng chuỗi
không hỗ trợ

105
00:04:56,550 --> 00:04:58,570
phép gán, tức là ta không được

106
00:04:58,570 --> 00:05:00,440
thay đổi chuỗi.

107
00:05:00,440 --> 00:05:03,160
Ta có thể tạo chuỗi mới, cho các thứ khác

108
00:05:03,160 --> 00:05:05,360
vào đó nhưng chuỗi đã tạo rồi

109
00:05:05,360 --> 00:05:09,170
thì không thay đổi được.
Cho nên khi gọi fruit.lower()

110
00:05:09,170 --> 00:05:12,170
ta nhận được một bản sao viết thường.

111
00:05:12,170 --> 00:05:14,730
Như vậy x là bản sao của chuỗi ban đầu

112
00:05:14,730 --> 00:05:17,200
nhưng chuỗi ban đầu khi đã gán vào biến fruit

113
00:05:17,200 --> 00:05:20,360
thì không thay đổi được.

114
00:05:20,360 --> 00:05:21,949
Tuy nhiên list thì thay đổi được,

115
00:05:21,949 --> 00:05:23,490
ta có thể thay đổi ở đoạn giữa.

116
00:05:23,490 --> 00:05:25,640
Đây là một đặc tính rất hay của list.

117
00:05:25,640 --> 00:05:29,340
Ta có list các số 2, 14, 26, 41 và 63.

118
00:05:29,340 --> 00:05:31,510
Ta viết lotto[2],

119
00:05:31,510 --> 00:05:33,680
đó sẽ là phần tử thứ 3,

120
00:05:33,680 --> 00:05:35,645
gán lotto[2] bằng 28.

121
00:05:35,645 --> 00:05:38,370
Khi in ra ta thấy số mới đã được thế vào đó.

122
00:05:38,370 --> 00:05:41,200
Cái này cho thấy ta có thể thay đổi list.

123
00:05:41,200 --> 00:05:44,660
Chuỗi thì không, list thì được.

124
00:05:44,660 --> 00:05:49,340
Ta thay đổi được list nhưng chuỗi là không đổi.

125
00:05:49,340 --> 00:05:52,910
Còn hàm len, ta đã dùng nó cho nhiều việc.

126
00:05:52,910 --> 00:05:57,310
len dùng được cho chuỗi

127
00:05:57,310 --> 00:05:58,720
và cũng dùng được cho list.

128
00:05:58,720 --> 00:06:02,122
Hàm nhận biết được tham số dạng chuỗi

129
00:06:02,122 --> 00:06:03,580
và khi đó,

130
00:06:03,580 --> 00:06:06,050
nó trả cho ta số ký tự trong chuỗi.

131
00:06:06,050 --> 00:06:09,540
Khi tham số là list,
nó trả cho ta số phần tử

132
00:06:09,540 --> 00:06:10,640
trong list.

133
00:06:10,640 --> 00:06:12,590
Có một phần tử là chuỗi,

134
00:06:12,590 --> 00:06:15,960
nhưng đối với list nó vẫn chỉ là một phần tử.

135
00:06:15,960 --> 00:06:21,040
Nên là list này có 4 phần tử, OK?

136
00:06:21,040 --> 00:06:24,880

137
00:06:24,880 --> 00:06:27,640
Hàm range là một hàm đặc biệt,

138
00:06:27,640 --> 00:06:31,470
đã đến lúc ta học về hàm range.

139
00:06:31,470 --> 00:06:33,240
Hàm range là hàm

140
00:06:33,240 --> 00:06:37,190
tạo ra một list và trả kết quả cho ta.

141
00:06:37,190 --> 00:06:38,870
Ta cho hàm range

142
00:06:38,870 --> 00:06:41,690
một tham số là số phần tử ta muốn,

143
00:06:41,690 --> 00:06:44,500
rồi hàm range tạo và trả cho ta

144
00:06:44,500 --> 00:06:50,590
một list gồm 4 con số bắt đầu từ 0 cho đến

145
00:06:50,590 --> 00:06:52,860
nhưng không bao gồm 3.

146
00:06:52,860 --> 00:06:53,990
Nghe có quen không?

147
00:06:53,990 --> 00:06:56,120
Đúng vậy.

148
00:06:56,120 --> 00:06:58,420
À tôi nhầm, từ 0 đến nhưng không bao gồm 4.

149
00:06:58,420 --> 00:07:00,650
Ở đây cũng như vậy.

150
00:07:00,650 --> 00:07:04,620
Ta có thể kết hợp hàm len và hàm range

151
00:07:04,620 --> 00:07:10,660
để tính số phần tử trong friends là 3,

152
00:07:10,660 --> 00:07:14,950
rồi tạo range(len(friends)) được 0, 1, 2.

153
00:07:14,950 --> 00:07:20,560
Tương ứng với các phần tử trong list kia.

154
00:07:20,560 --> 00:07:23,380
Ta có thể dùng cách này để dựng

155
00:07:23,380 --> 00:07:27,780
các vòng lặp duyệt qua list.

156
00:07:27,780 --> 00:07:30,950
Ta đã có một vòng lặp for cơ bản đúng không nào?

157
00:07:30,950 --> 00:07:37,150
Ta chạy vòng lặp for với mỗi biến friend

158
00:07:37,150 --> 00:07:41,230
trong list friends và kết quả là 
Happy New Year cho từng người.

159
00:07:41,230 --> 00:07:44,910
Nếu ta muốn biết vị trí của mình

160
00:07:44,910 --> 00:07:47,150
trong vòng lặp, ta có thể

161
00:07:47,150 --> 00:07:49,980
sửa vòng lặp đó một chút.

162
00:07:49,980 --> 00:07:54,400
Ta thêm biến vòng lặp i và viết for i in range(len(friends)),

163
00:07:54,400 --> 00:07:59,940
hàm range tạo list 0, 1, 2 và i

164
00:07:59,940 --> 00:08:02,730
nhận từng giá trị đó.
Sau đó, ta có thể

165
00:08:02,730 --> 00:08:04,450
tìm kiếm người bạn

166
00:08:04,450 --> 00:08:06,730
mà mình cần bằng cách

167
00:08:06,730 --> 00:08:10,650
dùng toán tử index friends[i]

168
00:08:10,650 --> 00:08:12,330
và in ra Happy New Year.

169
00:08:12,330 --> 00:08:17,890
Vậy 2 vòng lặp này tương đương nhau.

170
00:08:17,890 --> 00:08:22,280

171
00:08:22,280 --> 00:08:24,130
Vòng này với vòng này.

172
00:08:24,130 --> 00:08:28,620
Nên dùng vòng này hơn,
trừ khi bạn cần giá trị i

173
00:08:28,620 --> 00:08:31,402
cho biết vị trí, phòng trường hợp

174
00:08:31,402 --> 00:08:33,860
muốn thay đổi gì đó thì bạn có thể tìm nó

175
00:08:33,860 --> 00:08:34,780
mà thay đổi.

176
00:08:34,780 --> 00:08:39,080
Với mục đích ở đây thì 2 vòng hoàn toàn như nhau.

177
00:08:39,080 --> 00:08:42,559
Nên dùng vòng đơn giản
trừ khi bạn cần vòng phức tạp kia,

178
00:08:42,559 --> 00:08:46,190
cả 2 cùng đưa kết quả như nhau.

179
00:08:46,190 --> 00:08:49,480
Ta cũng có thể nối các list
như nối các chuỗi

180
00:08:49,480 --> 00:08:50,260
bằng dấu cộng.

181
00:08:50,260 --> 00:08:54,730

182
00:08:54,730 --> 00:08:58,730
Các toán tử Python sẽ tự nhận biết được

183
00:08:58,730 --> 00:09:01,950
rằng cả 2 đều là list.

184
00:09:01,950 --> 00:09:04,650
Chúng sẽ biết phải nối các list với nhau

185
00:09:04,650 --> 00:09:08,220
và các list 3 phần tử sẽ trở thành

