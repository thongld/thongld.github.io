357
00:16:30,460 --> 00:16:32,660
Thao Tran
trong chuỗi vì line là dạng chuỗi,

358
00:16:32,660 --> 00:16:35,210
nếu dòng đó bắt đầu bằng "From:" thì in nó ra.

359
00:16:35,210 --> 00:16:37,220
Tức là vòng lặp sẽ chạy qua

360
00:16:37,220 --> 00:16:39,050
tất cả các dòng trong file

361
00:16:39,050 --> 00:16:40,690
và in ra những dòng bắt đầu

362
00:16:40,690 --> 00:16:44,540
bằng chuỗi "From:"

363
00:16:44,540 --> 00:16:48,710
Nhắc lại, đây là một chương trình Python
hoàn chỉnh gồm 4 dòng

364
00:16:48,710 --> 00:16:51,410
để đọc file và in ra những dòng

365
00:16:51,410 --> 00:16:54,990
bắt đầu bằng "From:"

366
00:16:54,990 --> 00:17:01,060
Các bạn nên chạy thử chương trình này,

367
00:17:01,060 --> 00:17:03,830
khi đó kết quả sẽ như sau.

368
00:17:03,830 --> 00:17:05,810
Nhưng đợi chút.

369
00:17:05,810 --> 00:17:12,254
Tôi thấy các dòng bắt đầu bằng "From:" rồi,

370
00:17:12,254 --> 00:17:13,800
nhưng lại có cả mấy dòng trắng ở giữa.

371
00:17:13,800 --> 00:17:16,550

372
00:17:16,550 --> 00:17:17,780
Thế là vì sao?

373
00:17:17,780 --> 00:17:20,069
Sao ở đây lại có các dòng trắng?

374
00:17:20,069 --> 00:17:24,440
Nội dung chương trình không có in dòng trắng.

375
00:17:24,440 --> 00:17:26,430
Tôi chỉ in những dòng bắt đầu bằng "From:"

376
00:17:26,430 --> 00:17:27,690
chứ có in dòng trắng đâu, vì sao nhỉ?

377
00:17:27,690 --> 00:17:30,470

378
00:17:30,470 --> 00:17:31,220
Các bạn nghĩ sao?

379
00:17:31,220 --> 00:17:34,408
Hãy suy nghĩ một lúc nhé.

380
00:17:34,408 --> 00:17:38,100
Giảng cái bài này tôi dẫn dắt vào đề
hơi bị nhiều.

381
00:17:38,100 --> 00:17:41,100
Hóa ra vấn đề nằm ở các
ký tự newline.

382
00:17:41,100 --> 00:17:43,380
Bấy lâu nay ta vẫn

383
00:17:43,380 --> 00:17:45,270
dùng lệnh print, chả có

384
00:17:45,270 --> 00:17:46,600
vấn đề gì.

385
00:17:46,600 --> 00:17:49,060
Lệnh print tự thêm một
ký tự newline ở cuối bất cứ cái gì

386
00:17:49,060 --> 00:17:50,180
mà nó in.

387
00:17:50,180 --> 00:17:51,680
Vậy những ký tự newline
màu vàng này là

388
00:17:51,680 --> 00:17:53,280
từ lệnh print mà ra.

389
00:17:53,280 --> 00:17:58,110
Nhưng khi ta đọc file,
mỗi dòng đã kết thúc bằng newline rồi.

390
00:17:58,110 --> 00:18:00,560
Những ký tự newline màu xanh
này là của file.

391
00:18:00,560 --> 00:18:03,180

392
00:18:03,180 --> 00:18:06,300
Chúng từ trong file mà ra.

393
00:18:06,300 --> 00:18:08,560
Thành ra ta nhìn thấy 2 ký tự newline

394
00:18:08,560 --> 00:18:11,880
và nó in ra thành dòng trắng.

395
00:18:11,880 --> 00:18:14,065
Vấn đề này xử lý thế nào?

396
00:18:14,065 --> 00:18:15,440
Ta có một hàm cho chuỗi

397
00:18:15,440 --> 00:18:18,130
dùng để giải quyết vấn đề này.

398
00:18:18,130 --> 00:18:19,100
OK.

399
00:18:19,100 --> 00:18:21,600
Đó là gọi hàm strip.

400
00:18:21,600 --> 00:18:24,460
Ta đã học hàm strip,
lstrip và rstrip

401
00:18:24,460 --> 00:18:27,150
để loại bỏ các khoảng trắng
bên phải, bên trái

402
00:18:27,150 --> 00:18:28,440
hay cả hai bên.

403
00:18:28,440 --> 00:18:30,425
Lần này ta sẽ dùng hàm rstrip.

404
00:18:30,425 --> 00:18:32,050
Ta chuẩn bị đọc biến line,

405
00:18:32,050 --> 00:18:35,530
trong biến đó sẽ có ký tự newline.

406
00:18:35,530 --> 00:18:38,510
Hàm strip loại bỏ các khoảng trắng,
và ký tự newline cũng

407
00:18:38,510 --> 00:18:40,230
được tính là khoảng trắng.

408
00:18:40,230 --> 00:18:42,830
Chỗ trống hoặc newline
được coi là khoảng trắng.

409
00:18:42,830 --> 00:18:46,630
Ta sẽ thay thế bản không có newline
vào biến line,

410
00:18:46,630 --> 00:18:48,740
rồi đặt câu hỏi nó có bắt đầu bằng "From:" không

411
00:18:48,740 --> 00:18:50,380
và in ra dòng thích hợp.

412
00:18:50,380 --> 00:18:52,900
Kết quả nhận được sẽ đúng là những gì

413
00:18:52,900 --> 00:18:55,100
ta muốn tìm trong file.

414
00:18:55,100 --> 00:18:56,170
Không có ký tự newline.

415
00:18:56,170 --> 00:18:59,410
Các ký tự newline ẩn cuối dòng này

416
00:18:59,410 --> 00:19:03,230
là từ lệnh print chứ không phải từ file ra,

417
00:19:03,230 --> 00:19:04,640
vì newline trong file đã

418
00:19:04,640 --> 00:19:07,960
bị hàm này loại bỏ.

419
00:19:07,960 --> 00:19:09,730
OK.

420
00:19:09,730 --> 00:19:13,380
Một dạng vòng lặp với file nữa

421
00:19:13,380 --> 00:19:17,520
mà ta từng làm là dạng nhảy cóc.

422
00:19:17,520 --> 00:19:19,962
Dạng không phải nhảy cóc 

423
00:19:19,962 --> 00:19:21,420
thì ta tìm kiếm các dòng

424
00:19:21,420 --> 00:19:23,800
bắt đầu bằng "From:" và

425
00:19:23,800 --> 00:19:25,640
thực hiện lệnh gì đó.

426
00:19:25,640 --> 00:19:29,619
Nhưng có lúc ta muốn thực hiện với tất cả,

427
00:19:29,619 --> 00:19:31,910
ta sẽ bỏ qua một số dòng

428
00:19:31,910 --> 00:19:33,368
rồi mới thực hiện lệnh gì đó.

429
00:19:33,368 --> 00:19:36,470
Dạng nhảy cóc dùng lệnh continue.

430
00:19:36,470 --> 00:19:38,870
Mấy dòng đầu tiên vẫn vậy.

431
00:19:38,870 --> 00:19:41,790
Ta mở file, đọc từng dòng trong file

432
00:19:41,790 --> 00:19:43,800
rồi bỏ đi các khoảng trắng.

433
00:19:43,800 --> 00:19:45,660
Rồi bạn sẽ gõ 3 dòng này đến phát mệt

434
00:19:45,660 --> 00:19:47,290
vì sẽ phải dùng trong nhiều bài lắm.

435
00:19:47,290 --> 00:19:49,690
Mở file ra, bắt đầu đọc,

436
00:19:49,690 --> 00:19:51,870
xóa khoảng trắng trên mỗi dòng.

437
00:19:51,870 --> 00:19:57,770
Ta có thể viết để tìm kiếm theo một điều kiện.

438
00:19:57,770 --> 00:20:01,260
Ở đây, tôi nói là
if not line.startswith('From:')

439
00:20:01,260 --> 00:20:05,240
tức là với mọi dòng không bắt đầu bằng "From:"

440
00:20:05,240 --> 00:20:06,030
thì continue.

441
00:20:06,030 --> 00:20:08,600
Ta đã học là lệnh continue quay trở lên trên.

442
00:20:08,600 --> 00:20:11,740
Nó kết thúc bước lặp và

443
00:20:11,740 --> 00:20:15,210
không chạy code bên dưới nữa.

444
00:20:15,210 --> 00:20:18,137
Sau đó ta có thể thực hiện lệnh gì đó.

445
00:20:18,137 --> 00:20:19,595
Tôi đã lật ngược cách làm.

446
00:20:19,595 --> 00:20:23,307
Tôi bảo là tôi cần các dòng

447
00:20:23,307 --> 00:20:25,015
bắt đầu bằng "From:", nên

448
00:20:25,015 --> 00:20:26,764
tôi sẽ bỏ qua những dòng không thỏa điều kiện,

449
00:20:26,764 --> 00:20:27,880
vậy tôi sẽ dùng continue.

450
00:20:27,880 --> 00:20:31,620
Cách nào cũng làm được, tùy theo độ phức tạp

451
00:20:31,620 --> 00:20:34,010
hoặc là, thường thì dạng này rất thích hợp dùng

452
00:20:34,010 --> 00:20:36,300
khi dưới đây có nhiều dòng code,

453
00:20:36,300 --> 00:20:39,300
ta có nhiều thứ phải thực hiện.

454
00:20:39,300 --> 00:20:43,430
Ta cũng có thể dùng "in" để lọc các dòng.

455
00:20:43,430 --> 00:20:47,170
Tôi sẽ tìm các dòng có

456
00:20:47,170 --> 00:20:51,280
chứa @uct.ac.za

457
00:20:51,280 --> 00:20:54,417
Tôi lại mở file ra,

458
00:20:54,417 --> 00:20:55,833
duyệt qua từng dòng,

459
00:20:55,833 --> 00:20:57,990
xóa các khoảng trắng,

460
00:20:57,990 --> 00:21:06,540
và nếu trong dòng không có chuỗi ký tự này

461
00:21:06,540 --> 00:21:07,940
thì chạy continue.

462
00:21:07,940 --> 00:21:10,660
Đây là cách bỏ qua các dòng

463
00:21:10,660 --> 00:21:14,010
không chứa chuỗi này.

464
00:21:14,010 --> 00:21:17,199
Các dòng này đều có. 
Chỗ này cũng có.

465
00:21:17,199 --> 00:21:18,740
Rồi ta in chúng ra.

466
00:21:18,740 --> 00:21:23,180
Ta in những dòng thỏa mãn điều kiện này.

467
00:21:23,180 --> 00:21:23,780
OK.

468
00:21:23,780 --> 00:21:27,550
Vậy "in" là một cách tìm kiếm khác.

469
00:21:27,550 --> 00:21:30,620
Như là bắt đầu bằng gì đó, v.v.

470
00:21:30,620 --> 00:21:33,390
Ngoài ra ta cũng có thể

471
00:21:33,390 --> 00:21:37,600
đếm số dòng.

472
00:21:37,600 --> 00:21:41,910
Đây là cấu trúc để yêu cầu nhập tên file.

473
00:21:41,910 --> 00:21:46,370
Sau này cứ mỗi lần muốn mở một file mới

474
00:21:46,370 --> 00:21:48,730
lại phải viết lại code thì mệt lắm,

475
00:21:48,730 --> 00:21:51,460
có thể lúc này ta muốn mở mbox,

476
00:21:51,460 --> 00:21:54,920
lúc khác lại mở mbox-short 
để thử nghiệm chương trình

477
00:21:54,920 --> 00:21:56,599
với nhiều dữ liệu khác nhau.

478
00:21:56,599 --> 00:21:57,890
Cấu trúc này như sau.

479
00:21:57,890 --> 00:22:01,910
Ta thêm dòng raw_input yêu cầu nhập tên file,

480
00:22:01,910 --> 00:22:04,660
rồi gõ tên file vào đó.

481
00:22:04,660 --> 00:22:07,010
Chương trình sẽ mở file mà ta

482
00:22:07,010 --> 00:22:09,115
nhập tên, phần còn lại

483
00:22:09,115 --> 00:22:11,270
thì ta đã rõ rồi.

484
00:22:11,270 --> 00:22:14,090
Đọc toàn bộ file,

485
00:22:14,090 --> 00:22:17,190
nếu dòng bắt đầu bằng "Subject:"
thì cộng thêm 1 vào count.

486
00:22:17,190 --> 00:22:21,860
Kết quả có 1797 dòng như vậy trong mbox.txt

487
00:22:21,860 --> 00:22:25,900
27 dòng như vậy trong mbox-short.txt

488
00:22:25,900 --> 00:22:26,490
OK.

489
00:22:26,490 --> 00:22:29,030
Đó là yêu cầu nhập tên file.

490
00:22:29,030 --> 00:22:33,540
Câu lệnh open sẽ thất bại

491
00:22:33,540 --> 00:22:37,070
nếu tên file không tồn tại,
nên ta có thể thêm cấu trúc try và except

492
00:22:37,070 --> 00:22:38,190
vào đó.

493
00:22:38,190 --> 00:22:40,620
Nếu bạn chỉ viết code để mình dùng và

494
00:22:40,620 --> 00:22:43,820
thấy không có vấn đề gì,
thì không cần phải thêm try và except.

495
00:22:43,820 --> 00:22:50,630
Nhưng nếu bạn muốn
phòng trường hợp gặp lỗi tên file

496
00:22:50,630 --> 00:22:55,880
thì hãy thêm 4 dòng sau vào đoạn open.

497
00:22:55,880 --> 00:22:59,047
Ta đoán được đoạn code này
có thể sẽ gặp lỗi.

498
00:22:59,047 --> 00:23:01,380
Ta biết nó sẽ gặp lỗi nếu

499
00:23:01,380 --> 00:23:04,470
nhập vào một tên file sai
như là na na boo boo,

500
00:23:04,470 --> 00:23:06,520
đúng không, open sẽ gặp lỗi.

501
00:23:06,520 --> 00:23:07,750
Vậy ta phải làm gì?

502
00:23:07,750 --> 00:23:08,960
Ta dùng try và except.

503
00:23:08,960 --> 00:23:11,530
Ta dùng try để bảo hiểm

504
00:23:11,530 --> 00:23:14,170
cho dòng lệnh này,

505
00:23:14,170 --> 00:23:17,260
nếu nó thất bại
ta sẽ in một thông báo

506
00:23:17,260 --> 00:23:20,510
rồi exit() để thoát ra.

507
00:23:20,510 --> 00:23:27,520
Nếu tên file chính xác thì chương trình chạy được,

508
00:23:27,520 --> 00:23:31,650
nó bỏ qua phần except và
chạy code, in ra số dòng.

509
00:23:31,650 --> 00:23:33,480
Như trường hợp này.

510
00:23:33,480 --> 00:23:38,100
Nhưng nếu tên file bị lỗi thì chạy đến đây,

511
00:23:38,100 --> 00:23:43,310
open gặp lỗi, chạy đoạn except,
in thông báo ra rồi dừng lại.

512
00:23:43,310 --> 00:23:46,790
Đó là cách xử lý file lỗi bằng cấu trúc này,

513
00:23:46,790 --> 00:23:48,370
nó sẽ không hiện traceback.

514
00:23:48,370 --> 00:23:48,870
Rồi.

515
00:23:48,870 --> 00:23:53,820

516
00:23:53,820 --> 00:23:58,630
Bài giảng hôm nay ngắn vậy thôi.

517
00:23:58,630 --> 00:24:01,470
Ta đã xong Chương 7.

518
00:24:01,470 --> 00:24:05,690
Mở file, đọc file,

519
00:24:05,690 --> 00:24:09,370
dùng rstrip xóa khoảng trắng cuối dòng,

520
00:24:09,370 --> 00:24:11,670
dùng các hàm với chuỗi.

521
00:24:11,670 --> 00:24:14,640
Ta đã vận dụng mọi kiến thức đã học

522
00:24:14,640 --> 00:24:18,360
để viết các chương trình ngắn.

523
00:24:18,360 --> 00:24:22,137
Kể từ bây giờ,

524
00:24:22,137 --> 00:24:23,970
ta sẽ kết hợp mọi thứ

525
00:24:23,970 --> 00:24:26,140
để lập trình thực sự,

526
00:24:26,140 --> 00:24:28,100
vì ta đã nắm được các tính năng cơ bản

527
00:24:28,100 --> 00:24:30,370
của Python qua các chương đầu.

528
00:24:30,370 --> 00:24:32,494
Giờ ta có thể làm việc với dữ liệu.

529
00:24:32,494 --> 00:24:34,910
Sau này ta sẽ làm nhiều thao tác phức tạp hơn nữa

530
00:24:34,910 --> 00:24:36,510
với dữ liệu.

531
00:24:36,510 --> 00:24:39,520
Hẹn gặp lại các bạn
ở bài giảng sau.

