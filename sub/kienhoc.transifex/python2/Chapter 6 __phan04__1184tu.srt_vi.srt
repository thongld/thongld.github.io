481
00:20:57,310 --> 00:20:59,660
hanudungnguyen Thao reviewed
Nhưng một ứng dụng của hàm lower là

482
00:20:59,660 --> 00:21:02,830
khi tìm kiếm mà không quan tâm vấn đề chữ hoa hay thường,

483
00:21:02,830 --> 00:21:04,710
ta chuyển tất cả về dạng viết thường.

484
00:21:04,710 --> 00:21:06,543
Đó là lúc cần chuyển sang chuỗi viết thường.

485
00:21:06,543 --> 00:21:08,810
Vậy còn tùy xem bạn có cần phân biệt 
chữ hoa, chữ thường không.

486
00:21:08,810 --> 00:21:14,270
Đó là một lí do để dùng các hàm này.

487
00:21:14,270 --> 00:21:16,280
Đây là hàm Replace

488
00:21:16,280 --> 00:21:19,370
Nó cũng không thay đổi giá trị biến.

489
00:21:19,370 --> 00:21:21,610
Giá trị của greet là "Hello Bob"

490
00:21:21,610 --> 00:21:27,040
Cấu trúc greet.replace này thay thế mọi cụm "Bob"

491
00:21:27,040 --> 00:21:28,360
bằng "Jane".

492
00:21:28,360 --> 00:21:33,550
Nó trả lại cho ta bản sao nstr = "Hello Jane".

493
00:21:33,550 --> 00:21:35,800
greet không bị thay đổi.

494
00:21:35,800 --> 00:21:38,280
Hàm replace tạo ra một bản sao.

495
00:21:38,280 --> 00:21:43,800
Sau đó, nó chỉnh sửa theo yêu cầu của ta.

496
00:21:43,800 --> 00:21:48,200
Hàm replace thay thế tất cả các cụm xuất hiện trong chuỗi.

497
00:21:48,200 --> 00:21:50,399
Giá trị của greet vẫn là "Hello Bob".

498
00:21:50,399 --> 00:21:51,690
Dòng này ở đây không cần thiết,

499
00:21:51,690 --> 00:21:53,990
tôi cho vào để các bạn dễ nhớ thôi.

500
00:21:53,990 --> 00:21:55,300
greet vẫn là "Hello Bob".

501
00:21:55,300 --> 00:21:57,240
Ta lại gán "Hello Bob" vào đó.

502
00:21:57,240 --> 00:21:59,380
Thay thế tất cả các chữ cái o viết thường

503
00:21:59,380 --> 00:22:03,780
bằng X viết hoa. Ta được kết quả này.

504
00:22:03,780 --> 00:22:06,120
Vậy hàm replace soát qua cả chuỗi,

505
00:22:06,120 --> 00:22:09,800
soát soát soát và thay thế tất cả.

506
00:22:09,800 --> 00:22:11,717
OK?

507
00:22:11,717 --> 00:22:14,050
Một việc ta hay phải làm nữa là

508
00:22:14,050 --> 00:22:16,990
loại bỏ các khoảng trắng.

509
00:22:16,990 --> 00:22:18,970
Thỉnh thoảng sẽ có các chuỗi chứa

510
00:22:18,970 --> 00:22:22,920
các khoảng trắng hoặc kí tự không in ra được

511
00:22:22,920 --> 00:22:25,250
ở đầu và ở cuối.

512
00:22:25,250 --> 00:22:26,390
Ta có thể loại bỏ (strip) những kí tự này.

513
00:22:26,390 --> 00:22:28,730
Có 3 hàm được xây dựng sẵn 

514
00:22:28,730 --> 00:22:33,940
trong Python giúp ta làm điểu đó.

515
00:22:33,940 --> 00:22:38,330
Hàm lstrip giúp loại bỏ các kí tự ở bên trái.

516
00:22:38,330 --> 00:22:43,770
Hàm rstrip loại bỏ từ bên phải.

517
00:22:43,770 --> 00:22:45,580
Nó sẽ bỏ đi các khoảng trắng này.

518
00:22:45,580 --> 00:22:49,150
Các khoảng trắng sẽ biến mất.

519
00:22:49,150 --> 00:22:50,940
Hàm này loại bỏ những đoạn như vậy.

520
00:22:50,940 --> 00:22:51,080
Ô

521
00:22:51,080 --> 00:22:53,080
Đây là những cái sẽ bị loại bỏ.

522
00:22:53,080 --> 00:22:56,060
Phải tẩy cái này đi.

523
00:22:56,060 --> 00:22:57,260
Tôi sẽ dùng màu mực trắng.

524
00:22:57,260 --> 00:23:00,760
Còn hàm strip() thì loại bỏ các kí tự trắng

525
00:23:00,760 --> 00:23:04,150
cả bên phải lẫn bên trái

526
00:23:04,150 --> 00:23:07,300
Ta sẽ thường xuyên sử dụng các hàm này.

527
00:23:07,300 --> 00:23:09,960
Trong Python ta hay phải dọn dẹp dữ liệu.

528
00:23:09,960 --> 00:23:12,376
Thỉnh thoảng, nếu có các khoảng trắng ở đầu hoặc ở cuối,

529
00:23:12,376 --> 00:23:13,950
ta cần bỏ qua chúng.

530
00:23:13,950 --> 00:23:15,050
Nên ta loại chúng đi.

531
00:23:15,050 --> 00:23:18,020
Ta vứt chúng đi.

532
00:23:18,020 --> 00:23:20,030
Khi tìm kiếm dữ liệu, có những lúc

533
00:23:20,030 --> 00:23:21,990
ta chỉ tìm kiếm một tiền tố (prefix).

534
00:23:21,990 --> 00:23:25,380
Đây là hàm startswith()

535
00:23:25,380 --> 00:23:27,400
trả về kết quả True hoặc False

536
00:23:27,400 --> 00:23:29,780
Ở đây, ta thử biến line này

537
00:23:29,780 --> 00:23:31,380
 có bắt đầu bẳng chuỗi "Please" hay không?

538
00:23:31,380 --> 00:23:32,450
Câu trả lời là True.

539
00:23:32,450 --> 00:23:34,886
Nó bắt đầu bằng chuỗi "Please".

540
00:23:34,886 --> 00:23:38,340
Tiếp theo, ta kiểm tra line có bắt đầu bằng chữ "p" không?

541
00:23:38,340 --> 00:23:39,630
Câu trả lời là False.

542
00:23:39,630 --> 00:23:42,660
Nó không bắt đầu bằng chữ "p".

543
00:23:42,660 --> 00:23:44,980
Còn nhiều hàm như vậy nữa.

544
00:23:44,980 --> 00:23:48,570

545
00:23:48,570 --> 00:23:52,090
Đọc dữ liệu và chia tách dữ liệu là một trong

546
00:23:52,090 --> 00:23:54,400
những phần ta sẽ tập trung đi sâu

547
00:23:54,400 --> 00:23:57,120
trong các chương đầu của cuốn sách này.

548
00:23:57,120 --> 00:23:59,700
Vì Python đặc biệt giỏi

549
00:23:59,700 --> 00:24:02,810
chia dữ liệu thành các phần nhỏ và lấy ra những phần

550
00:24:02,810 --> 00:24:04,500
mà bạn muốn.

551
00:24:04,500 --> 00:24:06,910
Hãy thử nhìn vào dòng này

552
00:24:06,910 --> 00:24:11,120
Dòng chữ này được lấy từ một hòm thư email

553
00:24:11,120 --> 00:24:13,310
có thật.

554
00:24:13,310 --> 00:24:16,210
Nếu bạn xem email trên ổ cứng, 

555
00:24:16,210 --> 00:24:18,690
các hòm email sẽ có dạng như thế này.

556
00:24:18,690 --> 00:24:20,470
Thực ra là có rất nhiều dòng.

557
00:24:20,470 --> 00:24:23,596
Sau này ta sẽ đọc các file toàn là email.

558
00:24:23,596 --> 00:24:24,970
Nhưng hiện tại ta sẽ

559
00:24:24,970 --> 00:24:26,900
sử dụng một dòng này thôi.

560
00:24:26,900 --> 00:24:31,870
Ta không chính xác biết độ dài của các dòng 

561
00:24:31,870 --> 00:24:34,610
Đầu tiên là From rồi đến địa chỉ email.

562
00:24:34,610 --> 00:24:38,010
Rồi thêm thời gian mà mail được gửi.

563
00:24:38,010 --> 00:24:42,430
Nhưng phần chính ta quan tâm là ở đây,

564
00:24:42,430 --> 00:24:45,450
là tên miền của địa chỉ email.

565
00:24:45,450 --> 00:24:45,950
Đúng không?

566
00:24:45,950 --> 00:24:48,110
Ta muốn tách phần này ra

567
00:24:48,110 --> 00:24:51,080
Ta có một biến với giá trị là cả dòng này.

568
00:24:51,080 --> 00:24:52,860
Ta muốn lấy tên miền đó ra.

569
00:24:52,860 --> 00:24:56,310
Ở đây ta kết hợp tất cả các thứ đã học.

570
00:24:56,310 --> 00:24:59,370
Cùng xem cách làm nhé.

571
00:24:59,370 --> 00:25:00,950
Ta có dòng này.

572
00:25:00,950 --> 00:25:02,080
Nó là một chuỗi dài.

573
00:25:02,080 --> 00:25:03,980
Thường thì ta đọc cái này từ một file

574
00:25:03,980 --> 00:25:05,380
chứ không cho nó vào hằng chuỗi.

575
00:25:05,380 --> 00:25:06,921
Nhưng bây giờ ta tạm để hằng chuỗi đã

576
00:25:06,921 --> 00:25:09,940
vì chương sau mới học về file.

577
00:25:09,940 --> 00:25:12,460
Bây giờ ta sẽ

578
00:25:12,460 --> 00:25:13,529
làm thế này.

579
00:25:13,529 --> 00:25:14,820
Ta sẽ nhìn vào dòng này

580
00:25:14,820 --> 00:25:16,611
Sau đó, ta đi tìm dấu @

581
00:25:16,611 --> 00:25:18,480
Muốn biết dấu @ ở đâu,

582
00:25:18,480 --> 00:25:21,840
ta gọi data.find('@')

583
00:25:21,840 --> 00:25:24,330
và đặt kết quả trong biến atpos.

584
00:25:24,330 --> 00:25:26,236
Kết quả nhận được là 21

585
00:25:26,236 --> 00:25:29,330
Chương trình sẽ tìm kiếm cho đến khi thấy dấu "@"

586
00:25:29,330 --> 00:25:31,680
và trả lại kết quả là vị trí tìm thấy.

587
00:25:31,680 --> 00:25:35,300
Tiếp theo, từ chỗ này cho đến

588
00:25:35,300 --> 00:25:38,640
cuối chuỗi, ta cần tìm vị trí khoảng trắng

589
00:25:38,640 --> 00:25:40,180
đầu tiên.

590
00:25:40,180 --> 00:25:43,800
Ta đặt biến sppose

591
00:25:43,800 --> 00:25:45,890
là vị trí của kí tự trắng (space).

592
00:25:45,890 --> 00:25:51,310
data.find tìm kiếm khoảng trắng bắt đầu từ kí tự @.


593
00:25:51,310 --> 00:25:53,330
Tức là bắt đầu từ vị trí 21.

594
00:25:53,330 --> 00:25:55,170
Bắt đầu từ vị trí 21,

595
00:25:55,170 --> 00:25:56,710
chương trình tìm chỗ trống tiếp theo.

596
00:25:56,710 --> 00:25:59,770
Và tôi tìm thấy nó ở vị trí 31.

597
00:25:59,770 --> 00:26:03,250
Giờ thì ta biết @ ở đâu,

598
00:26:03,250 --> 00:26:05,095
biết khoảng trắng ở đâu.

599
00:26:05,095 --> 00:26:07,660
Ta muốn lấy ra đoạn

600
00:26:07,660 --> 00:26:11,960
từ ký tự nằm liền sau @ cho đến, nhưng không bao gồm

601
00:26:11,960 --> 00:26:14,220
khoảng trắng.

602
00:26:14,220 --> 00:26:18,180
Ta có thể sử dụng toán tử cắt.

603
00:26:18,180 --> 00:26:23,230
Ta bắt đầu từ vị trí @, cộng thêm 1.

604
00:26:23,230 --> 00:26:24,490
Nó sẽ tiến sang phải 1 vị trí.

605
00:26:24,490 --> 00:26:28,260
Đó là chữ cái u. Sau đó làm phép cắt cho đến

606
00:26:28,260 --> 00:26:30,850
nhưng không bao gồm khoảng trắng.

607
00:26:30,850 --> 00:26:34,500
Cái này dùng tốt đấy chứ hả - Cho đến 

608
00:26:34,500 --> 00:26:37,140
nhưng không bao gồm.

609
00:26:37,140 --> 00:26:41,310

610
00:26:41,310 --> 00:26:43,840
Ta sẽ lấy phần tách được này

611
00:26:43,840 --> 00:26:47,730
tức đoạn dữ liệu nhỏ ở đây,

612
00:26:47,730 --> 00:26:49,480
rồi gán vào biến host.

613
00:26:49,480 --> 00:26:52,300
Xong ta in nó ra là nhận được đoạn cần tìm.

614
00:26:52,300 --> 00:26:53,990
OK?

615
00:26:53,990 --> 00:26:57,000
Ở đây, ta có một số dữ liệu cần tách ra.

616
00:26:57,000 --> 00:26:58,250
Ta tìm kiếm vị trí dấu @.

617
00:26:58,250 --> 00:27:00,390
Ta thấy nó ở vị trí 21

618
00:27:00,390 --> 00:27:02,220
Bắt đầu từ vị trí 21,

619
00:27:02,220 --> 00:27:05,690
ta tìm một khoảng trắng ở phía sau, vị trí 31.

620
00:27:05,690 --> 00:27:10,750
Ta lấy từ vị trí 22 cho đến nhưng không bao gồm vị trí 31.

621
00:27:10,750 --> 00:27:12,584
Đoạn này nằm ở vị trí nào không quan trọng,

622
00:27:12,584 --> 00:27:14,249
vì khi ta đọc các dòng thế này từ file

623
00:27:14,249 --> 00:27:16,080
thì chúng có độ dài khác nhau.

624
00:27:16,080 --> 00:27:19,000
Chương trình vẫn sẽ tìm thấy dấu @ và khoảng trắng

625
00:27:19,000 --> 00:27:20,020
phía sau @.

626
00:27:20,020 --> 00:27:23,630
Rồi nó sẽ tách ra được biến host.

627
00:27:23,630 --> 00:27:24,360
OK?

628
00:27:24,360 --> 00:27:31,716
Cấu trúc đơn giản này gọi là phân tích văn bản (parsing text).

629
00:27:31,716 --> 00:27:34,120
Tìm cái này, tìm cái kia.

630
00:27:34,120 --> 00:27:35,150
Tách đoạn này ra.

631
00:27:35,150 --> 00:27:38,200
Tìm bên trong cái này...

632
00:27:38,200 --> 00:27:41,610
nó sẽ thực hiện tất cả những cái đó.

633
00:27:41,610 --> 00:27:43,830
Vừa rồi ta đã học về chuỗi - string.

634
00:27:43,830 --> 00:27:45,177
Tiếp theo ta sẽ học về các file.

635
00:27:45,177 --> 00:27:46,760
File bao gồm rất nhiều chuỗi.

636
00:27:46,760 --> 00:27:49,280
Vậy là ta sẽ bắt đầu ghép các thứ lại với nhau.

637
00:27:49,280 --> 00:27:52,900
Chương sau là một chương rất quan trọng,

638
00:27:52,900 --> 00:27:55,660
ta sẽ móc nối các kiến thức đã học với nhau.

639
00:27:55,660 --> 00:27:58,410
Hẹn gặp lại các bạn.

