186
00:09:08,220 --> 00:09:11,120
Thao Tran
list 6 phần tử, list thứ 2 được nối vào sau

187
00:09:11,120 --> 00:09:12,100
list thứ nhất.

188
00:09:12,100 --> 00:09:15,740
c là một list mới,
không ảnh hưởng gì đến list ban đầu.

189
00:09:15,740 --> 00:09:19,060

190
00:09:19,060 --> 00:09:21,150
Ta cũng có thể cắt các list.

191
00:09:21,150 --> 00:09:22,590
Rất giống chuỗi đúng không?

192
00:09:22,590 --> 00:09:25,460
Cái gì cũng tương tự như chuỗi,
vòng lặp for,

193
00:09:25,460 --> 00:09:28,590
phép nối, rồi phép cắt này đều giống với chuỗi,

194
00:09:28,590 --> 00:09:32,320
y hệt vậy.

195
00:09:32,320 --> 00:09:37,080
Ví dụ, 1 tính đến nhưng không bao gồm,

196
00:09:37,080 --> 00:09:38,830
hãy nhớ là tính đến nhưng không bao gồm

197
00:09:38,830 --> 00:09:41,080
tham số thứ 2 nhé. Vậy cái này bắt đầu từ [1]

198
00:09:41,080 --> 00:09:43,600
tức vị trí thứ 2.

199
00:09:43,600 --> 00:09:47,415
Tính đến nhưng không
bao gồm 3, tức vị trí thứ 3.

200
00:09:47,415 --> 00:09:49,690
Đây là  vị trí 1, 2, 3.

201
00:09:49,690 --> 00:09:52,500
Vậy đoạn cắt ra là 41, 12.

202
00:09:52,500 --> 00:09:54,760
Bắt đầu từ vị trí 1, tính đến nhưng không bao gồm

203
00:09:54,760 --> 00:09:55,410
vị trí 3.

204
00:09:55,410 --> 00:09:58,670

205
00:09:58,670 --> 00:10:01,480
Tương tự ta cũng có thể bỏ tham số đầu,

206
00:10:01,480 --> 00:10:03,990
nghĩa là tính đến nhưng không bao gồm vị trí 4,

207
00:10:03,990 --> 00:10:08,580
tức vị trí 0, 1, 2, 3 và không bao gồm 4.

208
00:10:08,580 --> 00:10:11,160
Kết quả là đoạn này.

209
00:10:11,160 --> 00:10:15,010
Nếu cắt từ vị trí 3 đến hết, nhớ là

210
00:10:15,010 --> 00:10:17,500
số vị trí bắt đầu từ 0 nên từ vị trí 3 đến hết

211
00:10:17,500 --> 00:10:22,420
sẽ là 0, 1, 2, từ con số 3 cho đến hết.

212
00:10:22,420 --> 00:10:27,050
Tức là cắt ra 3, 74, 15.
Còn cắt ra cả list.

213
00:10:27,050 --> 00:10:29,650
Như thế này là cắt ra cả list 
nên 2 list này như nhau.

214
00:10:29,650 --> 00:10:33,260
Vậy cắt list cũng giống cắt chuỗi,
bắt đầu từ tham số thứ nhất, tính đến

215
00:10:33,260 --> 00:10:36,410
nhưng không bao gồm tham số thứ 2.

216
00:10:36,410 --> 00:10:40,420
Có một số phương thức để thao tác với list
bạn có thể đọc online

217
00:10:40,420 --> 00:10:43,030
trên tài liệu về Python.

218
00:10:43,030 --> 00:10:44,940
Ta có thể dùng các hàm dựng sẵn,

219
00:10:44,940 --> 00:10:49,540
cũng không để làm gì mấy
khi ta chạy các chương trình

220
00:10:49,540 --> 00:10:51,000
nhưng nó cũng hữu dụng.
Tôi thích là

221
00:10:51,000 --> 00:10:54,430
mình có thể tương tác với chương trình
xem nó làm được những gì.

222
00:10:54,430 --> 00:10:58,000
Ở đây tôi tạo một list,
list là một kiểu dữ liệu riêng.

223
00:10:58,000 --> 00:11:00,340
Tôi dùng hàm dir xem ta có thể thao tác gì với list này.

224
00:11:00,340 --> 00:11:03,260
Ta có các phương thức như append, count, extend, index, insert,

225
00:11:03,260 --> 00:11:04,920
pop, remove, reverse và sort.

226
00:11:04,920 --> 00:11:08,300
Các bạn có thể tìm đọc kỹ hơn về những cái này.

227
00:11:08,300 --> 00:11:11,630
Tôi sẽ hướng dẫn một vài cái thôi.

228
00:11:11,630 --> 00:11:14,890
Ta có thể dựng một list
bằng phương thức append (nối thêm).

229
00:11:14,890 --> 00:11:16,980
Cú pháp stuff = list() ở đây

230
00:11:16,980 --> 00:11:19,530
nó là một hàm khởi tạo

231
00:11:19,530 --> 00:11:22,470
trả cho ta một list rỗng.

232
00:11:22,470 --> 00:11:26,300
2 dấu ngoặc đóng vào nghĩa là list rỗng.

233
00:11:26,300 --> 00:11:28,100
Tạo list rỗng xong

234
00:11:28,100 --> 00:11:30,120
ta gọi phương thức append.

235
00:11:30,120 --> 00:11:33,290
Nhớ là list có thể thay đổi được.

236
00:11:33,290 --> 00:11:35,560
Ta bắt đầu với một list rỗng

237
00:11:35,560 --> 00:11:38,180
rồi nối thêm từ 'book' vào cuối list,

238
00:11:38,180 --> 00:11:39,715
tiếp đó nối thêm '99'.

239
00:11:39,715 --> 00:11:43,170

240
00:11:43,170 --> 00:11:43,937
Chờ chút.

241
00:11:43,937 --> 00:11:44,645
Tôi viết sai rồi.

242
00:11:44,645 --> 00:11:50,670

243
00:11:50,670 --> 00:11:55,200
Giờ tôi sẽ sửa lỗi sai,
các bạn xem tôi sửa này.

244
00:11:55,200 --> 00:11:57,850
Hô biến!

245
00:11:57,850 --> 00:12:00,670
Tôi đã hóa phép sửa xong rồi,
tuyệt không?

246
00:12:00,670 --> 00:12:04,020
Tôi có phép thuật sửa slide đấy.

247
00:12:04,020 --> 00:12:07,457
Tôi chỉ cần búng tay phát là slide được sửa xong rồi.

248
00:12:07,457 --> 00:12:08,040
Tiếp tục nào.

249
00:12:08,040 --> 00:12:10,240
Ta nối thêm '99' và in list ra.

250
00:12:10,240 --> 00:12:13,680
Giờ nó gồm có 'book' và '99',
cho thấy các phần tử

251
00:12:13,680 --> 00:12:16,780
của list không nhất thiết phải cùng kiểu dữ liệu.

252
00:12:16,780 --> 00:12:20,380
Sau đó ta lại nối thêm 'cookie'
và giờ nó thành 'book', '99', 'cookie'.

253
00:12:20,380 --> 00:12:20,880
OK?

254
00:12:20,880 --> 00:12:23,256
append thì ta ít dùng thế này mà

255
00:12:23,256 --> 00:12:24,880
hay dùng trong vòng lặp hơn,

256
00:12:24,880 --> 00:12:26,664
dựng list qua các bước lặp.

257
00:12:26,664 --> 00:12:28,080
Nhưng tóm lại đây là cách tạo list rỗng

258
00:12:28,080 --> 00:12:33,360
rồi dần dần xây dựng nó.

259
00:12:33,360 --> 00:12:35,630
Khá giống với chuỗi, ta có thể

260
00:12:35,630 --> 00:12:39,610
hỏi xem trong list có phần tử nào đó không.
Đây là list some

261
00:12:39,610 --> 00:12:42,900
gồm 5 con số.

262
00:12:42,900 --> 00:12:44,210
Trong some có 9 không?

263
00:12:44,210 --> 00:12:45,505
Có, true.

264
00:12:45,505 --> 00:12:47,720
Trong some có 15 không?

265
00:12:47,720 --> 00:12:48,790
False.

266
00:12:48,790 --> 00:12:56,690
20 not in some, đây là cú pháp hợp lệ nhé,
trong some không có 20 đúng không?

267
00:12:56,690 --> 00:12:58,310
Đúng rồi, không có. OK?

268
00:12:58,310 --> 00:13:02,940
Cái này không thay đổi list,
mà chỉ đặt câu hỏi.

269
00:13:02,940 --> 00:13:05,320
Đây là các phép toán logic
thường dùng trong

270
00:13:05,320 --> 00:13:08,930
câu lệnh if hay while, một dạng logic

271
00:13:08,930 --> 00:13:12,630
nào đó bạn muốn thiết lập, OK?

272
00:13:12,630 --> 00:13:15,010
List có một trình tự.

273
00:13:15,010 --> 00:13:17,720
Khi ta đưa từng phần tử vào,
cái đầu tiên vào trước,

274
00:13:17,720 --> 00:13:20,840
tiếp đến cái thứ 2, v.v.

275
00:13:20,840 --> 00:13:23,460
Ta cũng có thể cho list tự động sắp xếp lại.

276
00:13:23,460 --> 00:13:25,670
Một trong những thao tác với list,

277
00:13:25,670 --> 00:13:27,430
giờ ta sẽ bắt đầu thấy được khả năng của nó,

278
00:13:27,430 --> 00:13:28,800
là tự sắp xếp (sort) bản thân.

279
00:13:28,800 --> 00:13:32,020
Đây là một list các chuỗi.
Chương trình có thể sắp xếp số

280
00:13:32,020 --> 00:13:33,580
và rất nhiều thứ khác.

281
00:13:33,580 --> 00:13:37,240
Cú pháp friends.sort() nghĩa là
ê chào các bạn,

282
00:13:37,240 --> 00:13:38,490
hãy tự sắp xếp lại nào.

283
00:13:38,490 --> 00:13:39,735
List sẽ có sự thay đổi.

284
00:13:39,735 --> 00:13:42,530

285
00:13:42,530 --> 00:13:45,140
Trong trường hợp này list được xếp lại

286
00:13:45,140 --> 00:13:49,280
theo bảng chữ cái: Glenn, Joseph và Sally.

287
00:13:49,280 --> 00:13:52,310
Nó đã được thay đổi
nên bây giờ friends[1]

288
00:13:52,310 --> 00:13:55,850
phải là Joseph vì nó ở vị trí thứ 2. OK?

289
00:13:55,850 --> 00:14:00,030
Phương thức sort ra lệnh

290
00:14:00,030 --> 00:14:03,660
list tự sắp xếp lại, và sau đó nó sẽ thành như thế luôn.

291
00:14:03,660 --> 00:14:06,810

292
00:14:06,810 --> 00:14:11,510
Các bạn có thể sẽ không thích

293
00:14:11,510 --> 00:14:13,730
slide này lắm vì nó chứa

294
00:14:13,730 --> 00:14:16,790
một đống hàm dựng sẵn để dùng với list.

295
00:14:16,790 --> 00:14:23,070
Có nhiều thứ như là max, min, len.

296
00:14:23,070 --> 00:14:24,820
Tôi chỉ cho các bạn

297
00:14:24,820 --> 00:14:27,060
cách tạo mấy vòng lặp kia là vì

298
00:14:27,060 --> 00:14:29,390
tôi nghĩ nó quan trọng thôi.

299
00:14:29,390 --> 00:14:32,620
Đây là cách đơn giản nhất để duyệt
và tìm phần tử lớn nhất,

300
00:14:32,620 --> 00:14:35,370
nhỏ nhất, tính tổng, v.v.

301
00:14:35,370 --> 00:14:38,140
Đây là một list số.

302
00:14:38,140 --> 00:14:40,749
Ta có thể tính số phần tử bằng hàm count.

303
00:14:40,749 --> 00:14:42,040
Ta có thể tìm số lớn nhất

304
00:14:42,040 --> 00:14:43,477
là 74.

305
00:14:43,477 --> 00:14:44,310
Tìm số nhỏ nhất

306
00:14:44,310 --> 00:14:46,260
là 3.

307
00:14:46,260 --> 00:14:48,380
Tính tổng tất cả các phần tử

308
00:14:48,380 --> 00:14:50,790
là 154, giống với các số ta đã dùng

309
00:14:50,790 --> 00:14:52,290
ở bài giảng trước.

310
00:14:52,290 --> 00:14:53,900
Trung bình cộng là bao nhiêu?

311
00:14:53,900 --> 00:14:58,120
Tức là tổng của các phần tử chia số phần tử.

312
00:14:58,120 --> 00:15:00,100
Cái này dễ hiểu hơn nhiều,
nếu có một

313
00:15:00,100 --> 00:15:01,770
list số như thế này, bạn

314
00:15:01,770 --> 00:15:04,610
chỉ việc hỏi số nào lớn nhất,
không cần viết hẳn vòng lặp để tìm.

315
00:15:04,610 --> 00:15:09,580
Tôi chỉ dạy cái đó để
minh họa cách hoạt động của vòng lặp.

316
00:15:09,580 --> 00:15:13,990
Đây là một cách ta có thể thay đổi

317
00:15:13,990 --> 00:15:16,580
các chương trình ta đã viết.

318
00:15:16,580 --> 00:15:19,790
Vậy có 2 cách viết chương trình tính tổng.

319
00:15:19,790 --> 00:15:23,040
Thay vì xét dữ liệu theo list

320
00:15:23,040 --> 00:15:25,610
ta có thể viết vòng lặp while

321
00:15:25,610 --> 00:15:28,850
để đọc một dãy các số cho đến khi ta bảo dừng,

322
00:15:28,850 --> 00:15:31,540
rồi tính trung bình cộng của các số đó.

323
00:15:31,540 --> 00:15:35,020
Đọc một dãy các số

324
00:15:35,020 --> 00:15:38,200
và chờ đến khi nhận được chữ "done" 
thì tính trung bình cộng các số đó.

325
00:15:38,200 --> 00:15:40,460
Chương trình thực hiện như sau.

326
00:15:40,460 --> 00:15:43,250
Ta tạo biến total = 0 và count = 0,

327
00:15:43,250 --> 00:15:46,080
tạo vòng lặp vô hạn while True

328
00:15:46,080 --> 00:15:48,920
rồi yêu cầu nhập số.

329
00:15:48,920 --> 00:15:51,780
Đầu vào nhận được là một chuỗi ký tự,
nhớ rằng raw_input luôn

330
00:15:51,780 --> 00:15:55,290
trả cho ta một chuỗi.
Sau đó nếu đầu vào là "done"

331
00:15:55,290 --> 00:15:56,810
thì ta break.

332
00:15:56,810 --> 00:15:58,890
Đây là một phiên bản
của câu lệnh if mà không

333
00:15:58,890 --> 00:16:02,020
phải lùi đầu dòng, chỉ cần đặt break vào đây

334
00:16:02,020 --> 00:16:04,150
để thoát khỏi vòng lặp khi cần.

335
00:16:04,150 --> 00:16:05,990
Đây là lúc cần thoát vòng lặp.

336
00:16:05,990 --> 00:16:09,830
Rồi ta chuyển đổi giá trị thành số thực,

337
00:16:09,830 --> 00:16:12,590
dùng hàm float để chuyển biến input thành số thực,

338
00:16:12,590 --> 00:16:14,920
rồi ta dùng cấu trúc cộng dồn này:

339
00:16:14,920 --> 00:16:18,017
total = total + value, 
count = count + 1.

340
00:16:18,017 --> 00:16:19,600
Khi vòng lặp chạy, các số này

341
00:16:19,600 --> 00:16:21,244
sẽ tăng dần lên, và rồi

342
00:16:21,244 --> 00:16:22,910
ta sẽ thoát khỏi vòng lặp,

343
00:16:22,910 --> 00:16:25,906
tính và in ra trung bình cộng.

344
00:16:25,906 --> 00:16:27,780
Đó là số thực cho nên

345
00:16:27,780 --> 00:16:29,870
trung bình cộng cũng sẽ là số thực.

346
00:16:29,870 --> 00:16:31,430
Vậy đó là một cách làm.

347
00:16:31,430 --> 00:16:34,790
Đó là một cách viết chương trình

348
00:16:34,790 --> 00:16:37,990
tính trung bình cộng, tức tạo 
một trung bình cộng tạm thời

349
00:16:37,990 --> 00:16:40,080
trong quá trình đọc số.

350
00:16:40,080 --> 00:16:43,180
Nhưng còn một cách khác cũng

351
00:16:43,180 --> 00:16:45,890
hiệu quả tương tự, là

352
00:16:45,890 --> 00:16:48,040
sử dụng list.

353
00:16:48,040 --> 00:16:53,300
Ta tạo một list số, ở đây numlist là

354
00:16:53,300 --> 00:16:56,830
tên biến gợi nhớ, 
đây là một list rỗng.

355
00:16:56,830 --> 00:16:59,140
Tôi tạo một vòng lặp vô hạn

356
00:16:59,140 --> 00:17:02,060
để yêu cầu nhập số,

357
00:17:02,060 --> 00:17:06,750
khi nào nhận được "done" thì
break để thoát vòng lặp.

358
00:17:06,750 --> 00:17:12,390
Chuyển đổi giá trị inp thành số thực

359
00:17:12,390 --> 00:17:14,450
rồi dùng append nối vào list.

360
00:17:14,450 --> 00:17:17,560
Mỗi lần ta đọc một số, list sẽ

361
00:17:17,560 --> 00:17:18,800
mở rộng thêm.

362
00:17:18,800 --> 00:17:22,040
Ta nhập bao nhiêu số thì list sẽ

363
00:17:22,040 --> 00:17:23,520
có bấy nhiêu phần tử.

364
00:17:23,520 --> 00:17:26,770
Trong trường hợp này, ở đây ta gõ "done"

365
00:17:26,770 --> 00:17:28,319
thì list sẽ có 3 con số

366
00:17:28,319 --> 00:17:30,152
vì ta đã chạy append 3 lần.

367
00:17:30,152 --> 00:17:32,690
Các số đã thêm vào là 3, 9 và 5

368
00:17:32,690 --> 00:17:37,140
cùng nằm trong list.
Ta thoát khỏi vòng lặp.

369
00:17:37,140 --> 00:17:40,340
Sau đó ta tính tổng tất cả
các số trong list đó

370
00:17:40,340 --> 00:17:42,690
và chia cho số phần tử của list.

