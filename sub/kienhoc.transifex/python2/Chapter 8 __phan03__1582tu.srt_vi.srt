371
00:17:42,690 --> 00:17:44,050
Thao Tran
Rồi in trung bình cộng ra.

372
00:17:44,050 --> 00:17:46,190
Vậy 2 chương trình này cơ bản

373
00:17:46,190 --> 00:17:49,150
là như nhau, có khác chăng là

374
00:17:49,150 --> 00:17:54,180
giả sử có tới 10 triệu con số,

375
00:17:54,180 --> 00:17:59,167
thì chương trình này sẽ tốn mất 40MB bộ nhớ.

376
00:17:59,167 --> 00:18:01,250
Với một số máy thì dung lượng đó không đáng kể

377
00:18:01,250 --> 00:18:05,200
nhưng nếu cần để ý bộ nhớ
thì cái này phải lưu tất cả các số,

378
00:18:05,200 --> 00:18:07,690
còn cái kia thực ra chỉ tính toán thôi.

379
00:18:07,690 --> 00:18:10,220
Nên nếu phải xử lý một lượng số lớn

380
00:18:10,220 --> 00:18:12,820
thì sẽ có sự khác biệt.
List thì liên tục mở rộng

381
00:18:12,820 --> 00:18:15,690
và lưu tất cả các số
để cuối cùng cộng lại,

382
00:18:15,690 --> 00:18:18,560
còn bên này thì chứa rất ít dữ liệu thôi.

383
00:18:18,560 --> 00:18:21,770
Nhưng với dãy tầm mấy nghìn hoặc

384
00:18:21,770 --> 00:18:23,560
thậm chí mấy trăm nghìn số

385
00:18:23,560 --> 00:18:26,970
thì 2 cách này cũng tương đương nhau.

386
00:18:26,970 --> 00:18:29,170
Thỉnh thoảng ta còn cần phải

387
00:18:29,170 --> 00:18:31,640
chồng chất phức tạp hơn thế này

388
00:18:31,640 --> 00:18:33,960
ta cần sắp xếp số, tìm số lớn nhất,

389
00:18:33,960 --> 00:18:35,970
hay tìm cái gì đó khác.

390
00:18:35,970 --> 00:18:39,180
Nhưng việc tạo list và nối thêm từng thứ

391
00:18:39,180 --> 00:18:41,270
vào list qua mỗi bước lặp,

392
00:18:41,270 --> 00:18:43,580
rồi sau cùng thực hiện một thao tác với cả list,

393
00:18:43,580 --> 00:18:45,450
là một cấu trúc khá hữu hiệu.

394
00:18:45,450 --> 00:18:47,910
Đây cũng là một cấu trúc hữu hiệu,

395
00:18:47,910 --> 00:18:49,520
ở đây ta cho

396
00:18:49,520 --> 00:18:51,930
các biến chồng chất lên trong vòng lặp.

397
00:18:51,930 --> 00:18:55,420
Còn ở đây ta chồng chất dữ liệu trong vòng lặp

398
00:18:55,420 --> 00:18:58,470
rồi tính toán hết ở cuối chương trình.

399
00:18:58,470 --> 00:19:03,140
Tùy theo tình huống mà dùng các cách khác nhau.

400
00:19:03,140 --> 00:19:03,836
OK, tiếp.

401
00:19:03,836 --> 00:19:06,620

402
00:19:06,620 --> 00:19:08,980
Nối các chuỗi và list.

403
00:19:08,980 --> 00:19:12,450
Có một phương thức,
một tính năng của chuỗi

404
00:19:12,450 --> 00:19:16,230
rất hữu hiệu khi chia tách dữ liệu.

405
00:19:16,230 --> 00:19:18,870

406
00:19:18,870 --> 00:19:21,440
Đó là split (tách).

407
00:19:21,440 --> 00:19:25,250
Đây là chuỗi "With three words"

408
00:19:25,250 --> 00:19:30,810
có khoảng trắng ở giữa các từ.

409
00:19:30,810 --> 00:19:35,370
abc.split tức là hãy phân tách chuỗi này,
tìm các khoảng trắng

410
00:19:35,370 --> 00:19:37,580
tách chuỗi thành nhiều phần rồi

411
00:19:37,580 --> 00:19:43,790
trả cho tôi một list có mỗi phần tử 
là một từ được ngắt ra

412
00:19:43,790 --> 00:19:47,220
bởi dấu cách. OK?

413
00:19:47,220 --> 00:19:51,630
Vậy chuỗi được tách thành 3 phần

414
00:19:51,630 --> 00:19:55,830
và ta được một list các từ.
Rất hữu hiệu đúng không?

415
00:19:55,830 --> 00:19:58,330
Khi tách chuỗi này ra ta nhận lại một list

416
00:19:58,330 --> 00:20:01,990
gồm có 3 từ. Từ đầu tiên,

417
00:20:01,990 --> 00:20:04,190
stuff[0] là "With".

418
00:20:04,190 --> 00:20:06,310
Ở đây có rất nhiều thứ phải phân tách.

419
00:20:06,310 --> 00:20:08,920
Ta có thể dùng vòng lặp for
và nhiều cách khác

420
00:20:08,920 --> 00:20:11,280
nhưng tách bằng những cách đó rất vất vả.

421
00:20:11,280 --> 00:20:13,570
Mà việc này lại phải làm thường xuyên

422
00:20:13,570 --> 00:20:17,950
nên phương thức dựng sẵn này của Python rất tiện lợi.

423
00:20:17,950 --> 00:20:19,340
OK?

424
00:20:19,340 --> 00:20:21,030
split tách một chuỗi thành nhiều phần

425
00:20:21,030 --> 00:20:24,720
và tạo một list các chuỗi.
Ta coi các chuỗi đó như các từ

426
00:20:24,720 --> 00:20:26,400
và ta có thể truy cập một từ nào đó

427
00:20:26,400 --> 00:20:28,120
hoặc chạy vòng lặp qua tất cả các từ.

428
00:20:28,120 --> 00:20:29,830
Ở đây, lại với biến stuff,

429
00:20:29,830 --> 00:20:34,300
ta chạy vòng lặp for 3 lần

430
00:20:34,300 --> 00:20:36,410
với mỗi từ trong list.

431
00:20:36,410 --> 00:20:38,470
Thường thì ta sẽ phải làm những thao tác khác

432
00:20:38,470 --> 00:20:39,850
chứ không chỉ in ra, nhưng qua đây

433
00:20:39,850 --> 00:20:43,442
các bạn thấy ta có thể dùng split

434
00:20:43,442 --> 00:20:45,650
kèm theo vòng lặp for duyệt qua

435
00:20:45,650 --> 00:20:48,390
từng từ mà không mất nhiều công tìm dấu cách.

436
00:20:48,390 --> 00:20:53,460
Việc đó để cho Python gánh vác hết, OK?

437
00:20:53,460 --> 00:20:58,170
Ta hãy xem một vài bài mẫu

438
00:20:58,170 --> 00:21:01,540
để các bạn hiểu rõ hơn về split.

439
00:21:01,540 --> 00:21:08,490
split coi nhiều dấu cách như một dấu cách

440
00:21:08,490 --> 00:21:11,330
nên nếu ta chia qua rất nhiều dấu cách thì

441
00:21:11,330 --> 00:21:15,770
nó cũng bỏ qua hết mà trả cho ta 4 từ.

442
00:21:15,770 --> 00:21:20,140
1, 2, 3, 4 và rồi bỏ hết dấu cách

443
00:21:20,140 --> 00:21:23,130
vì nó mặc định là ta muốn làm vậy. Rất tốt.

444
00:21:23,130 --> 00:21:28,710
Ta cũng có thể dùng split với các ký tự khác.

445
00:21:28,710 --> 00:21:30,670
Thỉnh thoảng dữ liệu sẽ chứa

446
00:21:30,670 --> 00:21:32,920
dấu chấm phẩy, dấu phẩy,

447
00:21:32,920 --> 00:21:36,810
hai chấm hay tab gì đó,

448
00:21:36,810 --> 00:21:39,440
và bạn có nhiệm vụ lôi dữ liệu đó ra.

449
00:21:39,440 --> 00:21:42,890
Vậy ta có thể tách theo một ký tự khác.

450
00:21:42,890 --> 00:21:45,580
Ở đây khi dùng split theo cách

451
00:21:45,580 --> 00:21:48,740
thông thường, chương trình sẽ
bỏ qua dấu chấm phẩy,

452
00:21:48,740 --> 00:21:50,420
nó chỉ tìm dấu cách thôi nên

453
00:21:50,420 --> 00:21:55,250
ta chỉ nhận lại một chuỗi nguyên các dấu chấm phẩy.

454
00:21:55,250 --> 00:22:00,220
Nhưng nếu ta đưa dấu chấm phẩy vào làm tham số

455
00:22:00,220 --> 00:22:04,140
để tách, thì nó sẽ tách dựa theo dấu chấm phẩy

456
00:22:04,140 --> 00:22:07,580
và trả 3 chuỗi 'first', 'second', 'third'.

457
00:22:07,580 --> 00:22:08,090
OK?

458
00:22:08,090 --> 00:22:10,030
Ta nhận được 3 từ.

459
00:22:10,030 --> 00:22:13,030
Vậy ta có thể dùng split theo dấu cách

460
00:22:13,030 --> 00:22:20,340
hoặc các ký tự khác nữa. OK?

461
00:22:20,340 --> 00:22:23,630
Ta hãy xem xem có thể áp dụng cái này

462
00:22:23,630 --> 00:22:25,270
vào một số dạng bài thường gặp

463
00:22:25,270 --> 00:22:26,910
trong chương này ra sao. Ta sẽ

464
00:22:26,910 --> 00:22:29,210
đọc một số dữ liệu hòm thư.

465
00:22:29,210 --> 00:22:33,280

466
00:22:33,280 --> 00:22:36,820
Ở đây ta có một chương trình nhỏ.

467
00:22:36,820 --> 00:22:39,540
3 dòng đầu ta đã viết rất nhiều lần.

468
00:22:39,540 --> 00:22:42,460
Mở file, viết vòng lặp for duyệt

469
00:22:42,460 --> 00:22:45,120
qua từng dòng trong file,

470
00:22:45,120 --> 00:22:48,120
loại đi khoảng trắng cuối mỗi dòng.

471
00:22:48,120 --> 00:22:50,970
3 dòng này lúc nào ta cũng phải viết.

472
00:22:50,970 --> 00:22:54,645
Trong toàn bộ file,

473
00:22:54,645 --> 00:22:56,020
ta cần tìm các dòng bắt đầu

474
00:22:56,020 --> 00:22:58,160
bằng "From " có dấu cách theo sau.

475
00:22:58,160 --> 00:23:00,450
Vậy nếu dòng không bằng đầu bằng "From "

476
00:23:00,450 --> 00:23:03,720
có dấu cách theo sau,
dấu cách đây này, thì continue.

477
00:23:03,720 --> 00:23:08,480
Với cách đó ta sẽ bỏ qua các dòng 
không thỏa điều kiện này.

478
00:23:08,480 --> 00:23:10,310
File có mấy nghìn dòng nhưng

479
00:23:10,310 --> 00:23:13,260
chỉ vài dòng thỏa điều kiện thôi. OK?

480
00:23:13,260 --> 00:23:16,680
Ta sẽ tìm xem

481
00:23:16,680 --> 00:23:21,750
mail được gửi vào ngày nào

482
00:23:21,750 --> 00:23:24,010
trong tuần.

483
00:23:24,010 --> 00:23:26,300
Vậy ta dùng đoạn code này

484
00:23:26,300 --> 00:23:27,720
loại đi các dòng không phù hợp.

485
00:23:27,720 --> 00:23:30,260
Rồi ta lấy dòng đó

486
00:23:30,260 --> 00:23:34,080
và tách nó ra.

487
00:23:34,080 --> 00:23:38,330
Ta biết rằng ngày trong tuần là phần tử word[2].

488
00:23:38,330 --> 00:23:41,610
Đây là word[0], đây là word[1],

489
00:23:41,610 --> 00:23:43,080
còn đây là word[2].

490
00:23:43,080 --> 00:23:46,490
Nhắc lại, word[0], [1], [2].

491
00:23:46,490 --> 00:23:50,550
Ta chỉ việc in ra [2].

492
00:23:50,550 --> 00:23:53,730
Ta bỏ đi hết các dòng trừ dòng chứa "From ",

493
00:23:53,730 --> 00:23:59,150
tách dòng đó ra và lấy từ thứ 3 tức [2].

494
00:23:59,150 --> 00:24:00,640
Từ đó ta có thể tạo nhanh một chương trình

495
00:24:00,640 --> 00:24:06,030
lấy thông tin ngày trong tuần từ email.

496
00:24:06,030 --> 00:24:07,360
OK?

497
00:24:07,360 --> 00:24:12,040
Thao tác rất nhanh vì split lo hết việc khó rồi.

498
00:24:12,040 --> 00:24:14,790
Nếu bạn xem lại chương về chuỗi,

499
00:24:14,790 --> 00:24:18,030
bạn sẽ thấy ta làm việc này rất vất vả.

500
00:24:18,030 --> 00:24:21,090
Đây là một cấu trúc phức tạp khác.

501
00:24:21,090 --> 00:24:25,640
Bây giờ nếu ta muốn làm lại một việc
đã làm cuối chương 6,

502
00:24:25,640 --> 00:24:29,660
chương về chuỗi, ta muốn tách ra

503
00:24:29,660 --> 00:24:33,360
đoạn dữ liệu này.

504
00:24:33,360 --> 00:24:36,190
Ta tách dòng này

505
00:24:36,190 --> 00:24:41,500
thành các phần 0, 1, 2, 3, 4,

506
00:24:41,500 --> 00:24:42,460
5 và 6.

507
00:24:42,460 --> 00:24:44,700
Ta tách theo dấu cách,

508
00:24:44,700 --> 00:24:51,230
vậy địa chỉ email đó sẽ là words[1].

509
00:24:51,230 --> 00:24:54,330
Địa chỉ email là đoạn

510
00:24:54,330 --> 00:24:57,490
nhỏ nằm giữa 2 dấu cách này.

511
00:24:57,490 --> 00:25:03,540
Ta lôi địa chỉ mail ở words[1] ra

512
00:25:03,540 --> 00:25:04,700
được thế này.

513
00:25:04,700 --> 00:25:07,500
Nó nằm trong biến email này.

514
00:25:07,500 --> 00:25:10,540
Nhưng ta không muốn cả địa chỉ

515
00:25:10,540 --> 00:25:12,770
mà chỉ muốn phần sau @,

516
00:25:12,770 --> 00:25:17,510
và ta có thể tìm ký tự @

517
00:25:17,510 --> 00:25:29,070
nhưng ta cũng có thể tách thêm lần nữa.

518
00:25:29,070 --> 00:25:30,830
Với biến email,

519
00:25:30,830 --> 00:25:33,950
tức đoạn chữ này,

520
00:25:33,950 --> 00:25:37,020
ta tách nó thêm một lần nữa

521
00:25:37,020 --> 00:25:38,620
dựa vào ký tự @,

522
00:25:38,620 --> 00:25:40,890
tức là nó sẽ được tách ở vị trí này

523
00:25:40,890 --> 00:25:44,010
thành 2 phần.

524
00:25:44,010 --> 00:25:50,290
Các phần đó trở thành một list
có vị trí sub[0] là tên người

525
00:25:50,290 --> 00:25:55,120
và vị trí sub[1] là tên host của

526
00:25:55,120 --> 00:25:57,710
địa chỉ mail.

527
00:25:57,710 --> 00:26:00,250
Sau đó ta chỉ cần

528
00:26:00,250 --> 00:26:08,000
phần [1], chính là đoạn này.

529
00:26:08,000 --> 00:26:10,780
Ta lấy nó ra.

530
00:26:10,780 --> 00:26:13,300
Trước đây ta làm theo cách

531
00:26:13,300 --> 00:26:15,510
tìm kiếm và

532
00:26:15,510 --> 00:26:17,870
cắt chuỗi ra,

533
00:26:17,870 --> 00:26:19,410
nhưng cách này làm hay hơn.

534
00:26:19,410 --> 00:26:21,550
Ta tách nó 2 lần

535
00:26:21,550 --> 00:26:23,300
và ta biết mình đang cần phần nào.

536
00:26:23,300 --> 00:26:26,040
Tôi gọi đây là cấu trúc split kép,

537
00:26:26,040 --> 00:26:28,470
tách một chuỗi thành list,

538
00:26:28,470 --> 00:26:29,970
lấy một phần ra 

539
00:26:29,970 --> 00:26:33,060
tách tiếp, tùy theo dữ liệu cần tìm.

540
00:26:33,060 --> 00:26:36,780
Đây chỉ là một cách làm chứ không phải cách duy nhất.

541
00:26:36,780 --> 00:26:41,970
OK, đó là về list. Ta đã học khái niệm

542
00:26:41,970 --> 00:26:44,530
bộ dữ liệu như list bao gồm nhiều phần tử,

543
00:26:44,530 --> 00:26:48,020
các vòng lặp vô hạn. 
Ta đã học những thứ này rồi,

544
00:26:48,020 --> 00:26:51,070
rất giống với chuỗi, chỉ khác là các phần tử

545
00:26:51,070 --> 00:26:53,110
mạnh hơn và có thể thay đổi được.

546
00:26:53,110 --> 00:26:54,820
Ta vẫn dùng toán tử dấu ngoặc,

547
00:26:54,820 --> 00:26:58,680
các hàm max, min, sum

548
00:26:58,680 --> 00:27:02,350
nhưng trên một dòng thay vì trong vòng lặp.

549
00:27:02,350 --> 00:27:04,280
Một thứ nữa ta sẽ dùng thường xuyên

550
00:27:04,280 --> 00:27:08,020
là dùng split để phân tách các chuỗi, split đơn

551
00:27:08,020 --> 00:27:11,090
và split kép được mở rộng từ split đơn.

552
00:27:11,090 --> 00:27:13,500
Hẹn gặp lại các bạn ở bài sau,

553
00:27:13,500 --> 00:27:15,710
tôi sẽ giảng về dictionary (từ điển).

