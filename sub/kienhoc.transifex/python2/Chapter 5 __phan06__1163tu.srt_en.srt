891
00:38:59,240 --> 00:39:00,350
https://youtu.be/6KgArgGi6Mk
No, it's not.

892
00:39:00,350 --> 00:39:01,770
Negative one is smaller.

893
00:39:01,770 --> 00:39:03,870
The second number is 41.

894
00:39:03,870 --> 00:39:06,120
Is that smaller than negative 1?

895
00:39:06,120 --> 00:39:07,870
No, it is not.

896
00:39:07,870 --> 00:39:08,910
The next number's 12.

897
00:39:08,910 --> 00:39:10,686
Is that smaller than negative 1?

898
00:39:10,686 --> 00:39:11,660
No.

899
00:39:11,660 --> 00:39:14,130
Negative 1 is smaller than 12.

900
00:39:14,130 --> 00:39:15,000
Three?

901
00:39:15,000 --> 00:39:17,450
No, not smaller.

902
00:39:17,450 --> 00:39:19,024
74?

903
00:39:19,024 --> 00:39:20,850
No, not smaller.

904
00:39:20,850 --> 00:39:22,360
15?

905
00:39:22,360 --> 00:39:24,510
Not smaller.

906
00:39:24,510 --> 00:39:27,670
So we're all done, yay,
and the smallest number

907
00:39:27,670 --> 00:39:33,540
we saw in the list
is negative one?

908
00:39:33,540 --> 00:39:35,710
Negative one wasn't
even in the list.

909
00:39:35,710 --> 00:39:37,876
So that's not a
very good program.

910
00:39:37,876 --> 00:39:41,860

911
00:39:41,860 --> 00:39:44,860
So let's take a look at what
went wrong with this program.

912
00:39:44,860 --> 00:39:48,240
So we fixed it, we fixed
it as best we could.

913
00:39:48,240 --> 00:39:50,190
We made it, we changed
the words largest

914
00:39:50,190 --> 00:39:52,056
to smallest, yay, that'll fix.

915
00:39:52,056 --> 00:39:53,930
Just makes it more
readable, doesn't actually

916
00:39:53,930 --> 00:39:54,930
change the program.

917
00:39:54,930 --> 00:39:56,490
And we made this less than.

918
00:39:56,490 --> 00:39:58,530
So now what happens
is it comes in,

919
00:39:58,530 --> 00:40:01,770
if 3 is less than negative 1,
smallest so far, of course,

920
00:40:01,770 --> 00:40:03,525
is negative one.

921
00:40:03,525 --> 00:40:05,520
This just never runs.

922
00:40:05,520 --> 00:40:06,500
This never runs.

923
00:40:06,500 --> 00:40:10,610
And so as we print, smallest
so far stays negative 1.

924
00:40:10,610 --> 00:40:16,340
And oops, that should be
negative one right there.

925
00:40:16,340 --> 00:40:18,450
Sorry, forgot to fix that.

926
00:40:18,450 --> 00:40:20,670
Here, let me magically fix that.

927
00:40:20,670 --> 00:40:23,620

928
00:40:23,620 --> 00:40:27,320
So let's take a look at
what went wrong with this.

929
00:40:27,320 --> 00:40:28,510
So here we have the code.

930
00:40:28,510 --> 00:40:29,843
Smallest so far as negative one.

931
00:40:29,843 --> 00:40:31,740
We have it fixed so
that we're looking

932
00:40:31,740 --> 00:40:34,090
for smaller numbers
rather than larger numbers

933
00:40:34,090 --> 00:40:36,050
by turning this to less than.

934
00:40:36,050 --> 00:40:40,890
But the first time through,
smallest so far is negative 1,

935
00:40:40,890 --> 00:40:42,990
and the_num is three.

936
00:40:42,990 --> 00:40:47,140
Three is not less than
negative 1, so we skip through.

937
00:40:47,140 --> 00:40:50,470
And the printout of the first
line is negative one, three.

938
00:40:50,470 --> 00:40:53,380
And doesn't take long to
realize that it's just

939
00:40:53,380 --> 00:40:54,610
going to keep doing this.

940
00:40:54,610 --> 00:40:57,720
Smallest so far is going to
stay negative one no matter

941
00:40:57,720 --> 00:40:59,570
what we look at on this side.

942
00:40:59,570 --> 00:41:02,240
And then we're going
to come out the end,

943
00:41:02,240 --> 00:41:05,876
and we end up with
negative one as the answer.

944
00:41:05,876 --> 00:41:07,138
Not very good.

945
00:41:07,138 --> 00:41:09,890

946
00:41:09,890 --> 00:41:17,140
So the question is what
should we make this value be?

947
00:41:17,140 --> 00:41:19,694
Negative one, it barely
worked in the largest,

948
00:41:19,694 --> 00:41:21,610
because we were working
with positive numbers.

949
00:41:21,610 --> 00:41:22,984
And so starting
with negative one

950
00:41:22,984 --> 00:41:25,655
as the largest so far was a
reasonable assumption, as long

951
00:41:25,655 --> 00:41:27,030
as the numbers
were all positive.

952
00:41:27,030 --> 00:41:29,700

953
00:41:29,700 --> 00:41:32,946
What would be the
number to choose here?

954
00:41:32,946 --> 00:41:34,070
Think about that for a sec.

955
00:41:34,070 --> 00:41:35,610
Pause if you have to.

956
00:41:35,610 --> 00:41:37,510
Let me clear it.

957
00:41:37,510 --> 00:41:40,570
Let me make it real clear.

958
00:41:40,570 --> 00:41:42,430
What's the right
thing to put here?

959
00:41:42,430 --> 00:41:46,530

960
00:41:46,530 --> 00:41:49,300
So what, a million?

961
00:41:49,300 --> 00:41:52,910

962
00:41:52,910 --> 00:41:55,450
That might work.

963
00:41:55,450 --> 00:41:56,820
Million might work.

964
00:41:56,820 --> 00:42:05,890
But what if all these numbers
were larger than a million?

965
00:42:05,890 --> 00:42:07,110
Then that wouldn't work.

966
00:42:07,110 --> 00:42:10,430
So the problem is,
there's no real good value

967
00:42:10,430 --> 00:42:13,270
unless you could make
this be somehow infinity.

968
00:42:13,270 --> 00:42:15,950

969
00:42:15,950 --> 00:42:18,340
You could make this be infinity.

970
00:42:18,340 --> 00:42:22,050
But there's a way to
do this in Python,

971
00:42:22,050 --> 00:42:24,050
and it's a really kind
of cool technique.

972
00:42:24,050 --> 00:42:26,640
It's a way we signal ourselves.

973
00:42:26,640 --> 00:42:29,570
And that is, we're going
to use a special value.

974
00:42:29,570 --> 00:42:31,530
Not negative 1,
it's not a number.

975
00:42:31,530 --> 00:42:35,890
And the special value
we're going to use is none.

976
00:42:35,890 --> 00:42:37,550
It's a different type.

977
00:42:37,550 --> 00:42:41,139
It's not a number, it's
itself its own type.

978
00:42:41,139 --> 00:42:43,680
So we're going to do is we're
going to mark smallest as none.

979
00:42:43,680 --> 00:42:48,220
And at a high level, what
we're really saying is

980
00:42:48,220 --> 00:42:50,010
we haven't seen anything so far.

981
00:42:50,010 --> 00:42:52,950
The smallest we've
seen so far is none.

982
00:42:52,950 --> 00:42:55,140
We've not seen anything so far.

983
00:42:55,140 --> 00:42:57,856
Now we have to change our
little if inside the loop,

984
00:42:57,856 --> 00:43:00,410
this is this intelligence
in the middle.

985
00:43:00,410 --> 00:43:04,450
First, we say, if smallest
is none, is is an operator.

986
00:43:04,450 --> 00:43:06,300
Part of the Python language.

987
00:43:06,300 --> 00:43:10,200
If smallest is none,
exactly the same as none,

988
00:43:10,200 --> 00:43:12,477
then the smallest we've
seen so far is the value.

989
00:43:12,477 --> 00:43:14,310
Now, this is going to
happen the first time.

990
00:43:14,310 --> 00:43:17,320

991
00:43:17,320 --> 00:43:18,987
Because smallest
starts out none.

992
00:43:18,987 --> 00:43:21,070
And then as soon as we
said smallest to the value,

993
00:43:21,070 --> 00:43:22,528
it's going to be
that first number,

994
00:43:22,528 --> 00:43:24,010
so it's going to be nine.

995
00:43:24,010 --> 00:43:27,110
So smallest is quickly
going to become nine.

996
00:43:27,110 --> 00:43:30,740
Then we print out
the smallest is nine

997
00:43:30,740 --> 00:43:33,010
after we've seen the nine.

998
00:43:33,010 --> 00:43:37,050
Then we go up to the top and
we say, is smallest none?

999
00:43:37,050 --> 00:43:41,320
And the answer is, no it's not,
because smallest is now nine.

1000
00:43:41,320 --> 00:43:43,200
Then this else if
is going to ask,

1001
00:43:43,200 --> 00:43:46,090
is the value we're
looking at, which is 41,

1002
00:43:46,090 --> 00:43:47,680
is the value less than smallest?

1003
00:43:47,680 --> 00:43:50,410
Well, no it is not.

1004
00:43:50,410 --> 00:43:52,530
Nine is smaller than 41.

1005
00:43:52,530 --> 00:43:57,170
And so in a sense, after the
first time this statement

1006
00:43:57,170 --> 00:43:59,890
is executed, this is going
to always be false, right?

1007
00:43:59,890 --> 00:44:01,860
Because smallest
is no longer none.

1008
00:44:01,860 --> 00:44:04,820
And this is going to be the
thing that really is operating.

1009
00:44:04,820 --> 00:44:06,240
And then it's going to work.

1010
00:44:06,240 --> 00:44:10,930
And smallest will become 9, the
smallest so far is 9, but then

1011
00:44:10,930 --> 00:44:12,860
we see the 3 finally.

1012
00:44:12,860 --> 00:44:16,890
And the value 3 is less than
9, and so then we take 3,

1013
00:44:16,890 --> 00:44:18,680
and you stick it into smallest.

1014
00:44:18,680 --> 00:44:20,260
And we end up with this.

1015
00:44:20,260 --> 00:44:23,824
And then the loop runs some more
times, and when we're all done

1016
00:44:23,824 --> 00:44:25,510
we have 3.

1017
00:44:25,510 --> 00:44:29,280
So the trick here is
we put this none in,

1018
00:44:29,280 --> 00:44:31,180
and we have a
little more if code

1019
00:44:31,180 --> 00:44:34,342
to check to see if we
haven't seen anything so far.

1020
00:44:34,342 --> 00:44:36,050
You can think of this
as a way to trigger

1021
00:44:36,050 --> 00:44:38,585
on the first iteration.

1022
00:44:38,585 --> 00:44:41,320

1023
00:44:41,320 --> 00:44:43,486
Special code that's
really going to-- it

1024
00:44:43,486 --> 00:44:45,360
looks at it on each
iteration, but it's never

1025
00:44:45,360 --> 00:44:48,260
true after the first iteration.

1026
00:44:48,260 --> 00:44:49,410
So that's just a technique.

1027
00:44:49,410 --> 00:44:52,260

1028
00:44:52,260 --> 00:44:54,030
So this is an is not operator.

1029
00:44:54,030 --> 00:44:56,490
I think it's a
real elegant thing.

1030
00:44:56,490 --> 00:44:59,975
Don't start overusing it.

1031
00:44:59,975 --> 00:45:04,030
At a low level, its real
meaning is exactly the same

1032
00:45:04,030 --> 00:45:07,570
as in type and value.

1033
00:45:07,570 --> 00:45:10,510
There's a is, and
there's an is not.

1034
00:45:10,510 --> 00:45:15,530
But don't do things like
saying, if i equal-- oops.

1035
00:45:15,530 --> 00:45:18,340

1036
00:45:18,340 --> 00:45:20,090
Won't even let myself
type the bad code.

1037
00:45:20,090 --> 00:45:25,050
If i is 4, don't say that.

1038
00:45:25,050 --> 00:45:25,740
Don't say that.

1039
00:45:25,740 --> 00:45:27,740
Don't do if i is 4.

1040
00:45:27,740 --> 00:45:30,490

1041
00:45:30,490 --> 00:45:32,260
It may work in
certain situations,

1042
00:45:32,260 --> 00:45:34,510
it's really best used in
very limited situations

1043
00:45:34,510 --> 00:45:36,760
where you're checking for
some of these special values

1044
00:45:36,760 --> 00:45:39,035
like none, and false.

1045
00:45:39,035 --> 00:45:41,590

1046
00:45:41,590 --> 00:45:44,970
The problem is if you
use equality here,

1047
00:45:44,970 --> 00:45:49,090
it tries to convert
values, and it may end up

1048
00:45:49,090 --> 00:45:51,010
giving you a false yes.

1049
00:45:51,010 --> 00:45:56,180
And so is is a stronger
equality than simple equals.

1050
00:45:56,180 --> 00:46:00,470
Equals is same
numeric value, where

1051
00:46:00,470 --> 00:46:02,680
is is exactly the same thing.

1052
00:46:02,680 --> 00:46:04,740
But don't overuse is.

1053
00:46:04,740 --> 00:46:07,590
Use double equals
95% of the time,

1054
00:46:07,590 --> 00:46:10,220
and use is when you're
checking if it's

1055
00:46:10,220 --> 00:46:13,880
one of these special
constants like true or false.

1056
00:46:13,880 --> 00:46:16,570
OK?

1057
00:46:16,570 --> 00:46:18,616
So this is iterations.

1058
00:46:18,616 --> 00:46:20,865
I mean, our loops are going
to get more sophisticated,

1059
00:46:20,865 --> 00:46:22,780
and we have more
interesting things to do.

1060
00:46:22,780 --> 00:46:25,860
But we talked about
some indefinite loops,

1061
00:46:25,860 --> 00:46:28,300
definite loops,
iteration variables.

1062
00:46:28,300 --> 00:46:32,910
Some patterns like maximum,
minimum, summing, averaging.

1063
00:46:32,910 --> 00:46:35,640
We introduced the
concept of none.

1064
00:46:35,640 --> 00:46:38,349
And so this is,
we're getting there.

1065
00:46:38,349 --> 00:46:40,640
We've got a couple more
chapters before we really start

1066
00:46:40,640 --> 00:46:41,930
hitting the data analysis.

1067
00:46:41,930 --> 00:46:44,680
So see you in the next lecture.

