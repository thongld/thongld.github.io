592
00:28:26,160 --> 00:28:27,720
Thao Tran
hãy chạy đoạn code lùi vào này một lần

593
00:28:27,720 --> 00:28:30,590
với mỗi phần tử trong bộ

594
00:28:30,590 --> 00:28:32,830
và key sẽ là biến vòng lặp của ta.

595
00:28:32,830 --> 00:28:35,150
key chỉ là tên biến gợi nhớ,

596
00:28:35,150 --> 00:28:37,910
chứ chương trình không nhận biết 
được chúng là key đâu.

597
00:28:37,910 --> 00:28:44,050
Về các key thì

598
00:28:44,050 --> 00:28:47,420
mấu chốt ở đây là, dictionary

599
00:28:47,420 --> 00:28:49,100
là các cặp key - value.

600
00:28:49,100 --> 00:28:51,400
Đây chỉ là một biến

601
00:28:51,400 --> 00:28:53,400
nên nó tự quyết định là

602
00:28:53,400 --> 00:28:56,230
sẽ duyệt qua các key, cái này thực ra rất hữu dụng.

603
00:28:56,230 --> 00:28:59,340
Vậy biến key ở đây sẽ lần lượt nhận lấy

604
00:28:59,340 --> 00:29:02,800
các label chứ không phải các giá trị

605
00:29:02,800 --> 00:29:04,030
lưu trong label.

606
00:29:04,030 --> 00:29:07,570
Nhưng ta có thể lấy nội dung từ các label

607
00:29:07,570 --> 00:29:10,250
rất dễ dàng với counts[key].

608
00:29:10,250 --> 00:29:13,750
Vậy ta sẽ dùng các key chuck, fred và jan

609
00:29:13,750 --> 00:29:18,190
để lấy ra các giá trị 1, 42, 100. Sau đó in ra

610
00:29:18,190 --> 00:29:20,700
key cùng với value tương ứng,

611
00:29:20,700 --> 00:29:22,170
key rồi lại value.

612
00:29:22,170 --> 00:29:25,780
Như vậy ta có thể duyệt qua dictionary

613
00:29:25,780 --> 00:29:27,530
mà xem các cặp key - value,

614
00:29:27,530 --> 00:29:30,640
thao tác này sẽ phải làm thường xuyên.

615
00:29:30,640 --> 00:29:31,140
OK?

616
00:29:31,140 --> 00:29:35,250

617
00:29:35,250 --> 00:29:37,695
Dictionary có một số phương thức

618
00:29:37,695 --> 00:29:40,540
giúp ta chuyển đổi dictionary

619
00:29:40,540 --> 00:29:45,520
thành các list.

620
00:29:45,520 --> 00:29:49,220
Đây là một dictionary với 3 phần tử,

621
00:29:49,220 --> 00:29:51,970
Ta viết list, dấu ngoặc và tên dictionary,

622
00:29:51,970 --> 00:29:54,880
rồi nó sẽ được chuyển thành dạng list

623
00:29:54,880 --> 00:29:57,690
nhưng chỉ là list các key thôi.

624
00:29:57,690 --> 00:30:01,470
Ta cũng có thể viết jjj.keys()
với kết quả tương tự,

625
00:30:01,470 --> 00:30:05,150
nó đưa cho ta một list các key.

626
00:30:05,150 --> 00:30:08,740
Rồi jjj.values đưa ra một list các value.

627
00:30:08,740 --> 00:30:10,720
1, 42, 100.

628
00:30:10,720 --> 00:30:12,836
Tất nhiên không theo trật tự.

629
00:30:12,836 --> 00:30:14,210
Điểm thú vị là nếu bạn

630
00:30:14,210 --> 00:30:17,690
không chỉnh sửa dictionary thì thứ tự của 2 cái này

631
00:30:17,690 --> 00:30:20,180
tương ứng với nhau, miễn là ở đoạn giữa này

632
00:30:20,180 --> 00:30:21,410
bạn không thay đổi gì nó.

633
00:30:21,410 --> 00:30:25,010
jan tương ứng với 100,
chuck ứng với 1,

634
00:30:25,010 --> 00:30:26,910
fred ứng với 42.

635
00:30:26,910 --> 00:30:30,051
Ta không thể đoán trước thứ tự

636
00:30:30,051 --> 00:30:32,550
xuất hiện các phần tử nhưng các cặp này sẽ xuất hiện

637
00:30:32,550 --> 00:30:36,340
tương ứng với nhau dù thứ tự có là gì đi nữa.

638
00:30:36,340 --> 00:30:39,540
OK, còn một điều nữa.

639
00:30:39,540 --> 00:30:42,060
Ở đây ta đã dùng keys và values,

640
00:30:42,060 --> 00:30:44,230
còn có một phương thức gọi là items.

641
00:30:44,230 --> 00:30:47,620
items cũng trả cho ta một list.

642
00:30:47,620 --> 00:30:52,900
Nó là một dãy các thứ trong Python gọi là tuple.

643
00:30:52,900 --> 00:30:54,940
Đó là nội dung chương sau.

644
00:30:54,940 --> 00:30:57,900
Ta sẽ học về tuple trong chương sau.

645
00:30:57,900 --> 00:31:01,180
Một tuple là một cặp key - value.

646
00:31:01,180 --> 00:31:03,550
Vậy list này có 3 phần tử,

647
00:31:03,550 --> 00:31:06,050
một, hai, ba.

648
00:31:06,050 --> 00:31:07,800
Đầu tiên là jan ứng với 100,

649
00:31:07,800 --> 00:31:10,220
thứ 2 là chuck ứng với 1,

650
00:31:10,220 --> 00:31:12,740
thứ 3 là fred ứng với 42.

651
00:31:12,740 --> 00:31:15,560
Bây giờ tạm hiểu vậy đã,

652
00:31:15,560 --> 00:31:18,990
tôi sẽ giải thích kĩ hơn trong chương sau.

653
00:31:18,990 --> 00:31:21,700
Nhưng cấu trúc này hữu hiệu nhất là

654
00:31:21,700 --> 00:31:23,901
khi dùng cho vòng lặp for.

655
00:31:23,901 --> 00:31:26,400
Các bạn đã từng lập trình bằng ngôn ngữ khác

656
00:31:26,400 --> 00:31:28,070
có thể sẽ thấy hơi lạ.

657
00:31:28,070 --> 00:31:30,900
Các ngôn ngữ khác cũng có bước lặp

658
00:31:30,900 --> 00:31:33,660
nhưng không có 2 biến vòng lặp.

659
00:31:33,660 --> 00:31:35,460
Python có 2 biến vòng lặp.

660
00:31:35,460 --> 00:31:37,276
Ta có thể dùng nó làm nhiều thứ

661
00:31:37,276 --> 00:31:38,650
nhưng một thứ rất hay là

662
00:31:38,650 --> 00:31:42,680
ta có thể dùng 2 biến vòng lặp.

663
00:31:42,680 --> 00:31:47,070
jjj.items() trả cho ta các cặp,

664
00:31:47,070 --> 00:31:50,160
aaa và bbb là các biến vòng lặp

665
00:31:50,160 --> 00:31:54,750
đi kèm với nhau,

666
00:31:54,750 --> 00:31:56,630
chúng khớp với nhau.

667
00:31:56,630 --> 00:32:07,290
aaa nhận giá trị key và bbb nhận giá trị value.

668
00:32:07,290 --> 00:32:13,090
Sau khi vòng lặp chạy 1 lần, aaa tiếp tục
nhận key tiếp theo,

669
00:32:13,090 --> 00:32:16,160
đồng thời bbb nhận value tiếp theo

670
00:32:16,160 --> 00:32:17,420
tương ứng.

671
00:32:17,420 --> 00:32:19,780
Nó in ra rồi

672
00:32:19,780 --> 00:32:22,700
cứ tiếp tục nhận giá trị và in ra.

673
00:32:22,700 --> 00:32:27,740
Vậy chúng di chuyển tương ứng với nhau.

674
00:32:27,740 --> 00:32:31,080
Thứ tự jan, chuck, fred không như ban đầu

675
00:32:31,080 --> 00:32:34,060
nhưng vẫn giữ nguyên jan ứng với 100, chuck với 1

676
00:32:34,060 --> 00:32:37,070
và fred với 42.

677
00:32:37,070 --> 00:32:40,230
Về cơ bản,
cặp key - value này

678
00:32:40,230 --> 00:32:42,390
vẫn song hành với nhau bất kể

679
00:32:42,390 --> 00:32:44,070
trình tự chúng được lưu trữ trong dictionary là gì.

680
00:32:44,070 --> 00:32:45,460
Rất là hay.

681
00:32:45,460 --> 00:32:48,900
2 biến vòng lặp lần lượt nhận các key và value.

682
00:32:48,900 --> 00:32:52,805
Nếu để cho các tên biến dễ nhớ hơn

683
00:32:52,805 --> 00:32:54,180
và dễ hiểu hơn, tôi sẽ

684
00:32:54,180 --> 00:32:58,570
đặt chúng là biến key và biến value.

685
00:32:58,570 --> 00:33:00,590
Nhưng giờ tôi tạm dùng mấy tên linh tinh

686
00:33:00,590 --> 00:33:02,930
để chỉ cho các bạn rằng key và value 
không phải các từ đặc biệt,

687
00:33:02,930 --> 00:33:05,590
không phải từ dành riêng trong Python

688
00:33:05,590 --> 00:33:09,310
mà chỉ là tên gọi các cặp key - value cho dễ nhớ.

689
00:33:09,310 --> 00:33:12,030
OK.

690
00:33:12,030 --> 00:33:16,160
Bây giờ ta sẽ quay lại hồi đầu,

691
00:33:16,160 --> 00:33:19,200
quay lại bài giảng đầu tiên.

692
00:33:19,200 --> 00:33:24,020
Tôi đã đưa cho các bạn chương trình này
và bảo bây giờ chưa phải lo,

693
00:33:24,020 --> 00:33:25,740
ta sẽ học về nó sau.

694
00:33:25,740 --> 00:33:27,730
Giờ là lúc cần đây.

695
00:33:27,730 --> 00:33:30,120
Đến giờ chắc các bạn đã hiểu được

696
00:33:30,120 --> 00:33:33,520
toàn bộ chương trình này.

697
00:33:33,520 --> 00:33:35,320
Đây là chương trình đếm xem

698
00:33:35,320 --> 00:33:39,110
từ nào hay gặp nhất trong file.

699
00:33:39,110 --> 00:33:40,720
Ta hãy cùng xem lại nó

700
00:33:40,720 --> 00:33:45,650
và hi vọng rằng bây giờ nó đã dễ hiểu với các bạn.

701
00:33:45,650 --> 00:33:46,154
OK

702
00:33:46,154 --> 00:33:47,570
Bắt đầu, 

703
00:33:47,570 --> 00:33:49,570
ta yêu cầu nhập tên file.

704
00:33:49,570 --> 00:33:52,150
Ta sẽ mở file này để đọc,

705
00:33:52,150 --> 00:33:55,280
file này không quá lớn nên

706
00:33:55,280 --> 00:33:58,700
ta có thể đọc hết luôn một lượt.
handle.read() nghĩa là

707
00:33:58,700 --> 00:34:01,690
đọc toàn bộ file, bao gồm các
khoảng trắng và ký tự newline,

708
00:34:01,690 --> 00:34:05,819
rồi đặt nó vào một biến gọi là text.

709
00:34:05,819 --> 00:34:07,360
Ở đây tôi vẫn dùng

710
00:34:07,360 --> 00:34:09,920
các tên biến gợi nhớ.

711
00:34:09,920 --> 00:34:13,320
Rồi duyệt qua cả chuỗi ký tự này,

712
00:34:13,320 --> 00:34:14,670
tức toàn bộ file.

713
00:34:14,670 --> 00:34:16,610
Duyệt qua và tách hết ra.

714
00:34:16,610 --> 00:34:19,810
Ký tự newline coi như các khoảng trắng,

715
00:34:19,810 --> 00:34:22,555
chương trình tự hiểu như vậy,
nó loại các newline

716
00:34:22,555 --> 00:34:23,929
và khoảng trắng đi rồi tách file

717
00:34:23,929 --> 00:34:28,540
thành một list các từ, không có khoảng trắng.

718
00:34:28,540 --> 00:34:30,520
List các từ trong file đó

719
00:34:30,520 --> 00:34:33,020
đưa vào biến words.

720
00:34:33,020 --> 00:34:37,070
words là một list, text là một chuỗi.

721
00:34:37,070 --> 00:34:40,340
Sau đó dùng cấu trúc các bộ đếm cộng dồn

722
00:34:40,340 --> 00:34:41,610
trong dictionary.

723
00:34:41,610 --> 00:34:45,850
Ta tạo một dictionary rỗng, biến word

724
00:34:45,850 --> 00:34:49,350
duyệt qua list words,
rồi ta viết

725
00:34:49,350 --> 00:34:51,370
counts[word] = counts.get(word,0) + 1

726
00:34:51,370 --> 00:34:52,639
counts[word] = counts.get(word,0) + 1

727
00:34:52,639 --> 00:34:55,350
Như thế nghĩa là

728
00:34:55,350 --> 00:34:59,900
nó tạo ra hoặc tăng các giá trị

729
00:34:59,900 --> 00:35:02,030
trong dictionary nếu cần.

730
00:35:02,030 --> 00:35:05,180
Đến đoạn này,

731
00:35:05,180 --> 00:35:11,690
ta có 1 dictionary hoàn chỉnh dạng word : count.

732
00:35:11,690 --> 00:35:13,842
Có rất nhiều cặp word (từ) và count (tần suất)

733
00:35:13,842 --> 00:35:15,050
như vậy.

734
00:35:15,050 --> 00:35:16,395
Không theo trình tự nào cả.

735
00:35:16,395 --> 00:35:17,770
Bây giờ ta sẽ viết vòng lặp

736
00:35:17,770 --> 00:35:20,070
tìm số lớn nhất.

737
00:35:20,070 --> 00:35:23,762
Ta từng học tìm số lớn nhất rồi.

738
00:35:23,762 --> 00:35:25,220
Ta không chỉ cần biết

739
00:35:25,220 --> 00:35:27,340
tần suất lớn nhất cho đến giờ

740
00:35:27,340 --> 00:35:29,317
mà còn cần biết đó là từ gì.

741
00:35:29,317 --> 00:35:31,150
Vậy ta sẽ đặt giá trị tần suất lớn nhất

742
00:35:31,150 --> 00:35:33,300
ta từng gặp là None, đặt từ xuất hiện

743
00:35:33,300 --> 00:35:35,420
nhiều nhất đến nay là None

744
00:35:35,420 --> 00:35:38,050
rồi dùng cấu trúc 2 biến vòng lặp này

745
00:35:38,050 --> 00:35:40,965
để duyệt qua các cặp key - value, ở đây là

746
00:35:40,965 --> 00:35:43,370
word - count

747
00:35:43,370 --> 00:35:47,120
trong counts.items(), chương trình sẽ duyệt qua từng cặp.

748
00:35:47,120 --> 00:35:50,220
Rồi ta sẽ hỏi xem tần suất lớn nhất từng gặp

749
00:35:50,220 --> 00:35:53,697
có phải None không, hay là tần suất

750
00:35:53,697 --> 00:35:55,530
đang xét lớn hơn số lớn nhất

751
00:35:55,530 --> 00:36:01,150
từng gặp thì lưu nó vào.

752
00:36:01,150 --> 00:36:04,270
Lấy từ đang xét thế vào bigword,

753
00:36:04,270 --> 00:36:07,170
lấy tần suất đang xét và thế vào bigcount.

754
00:36:07,170 --> 00:36:12,010
Chương trình sẽ duyệt qua tất cả các cặp word - count,

755
00:36:12,010 --> 00:36:15,700
tức các cặp key - value, rồi khi in kết quả

756
00:36:15,700 --> 00:36:18,420
nó sẽ đưa ra từ hay gặp nhất

757
00:36:18,420 --> 00:36:20,800
và số lần xuất hiện.

758
00:36:20,800 --> 00:36:24,080
Với bài vừa rồi, khi chạy code xong

759
00:36:24,080 --> 00:36:27,050
chương trình sẽ in ra rằng từ hay gặp nhất là "the",

760
00:36:27,050 --> 00:36:29,040
xuất hiện 7 lần.

761
00:36:29,040 --> 00:36:31,505
Hoặc với ví dụ cách đây 2 slide,

762
00:36:31,505 --> 00:36:34,620
file words.txt từ trong sách giáo khoa,

763
00:36:34,620 --> 00:36:36,620
thì từ hay gặp nhất là "to"

764
00:36:36,620 --> 00:36:37,810
xuất hiện 16 lần.

765
00:36:37,810 --> 00:36:43,800
Vậy tôi có thể quăng vào đây 10 triệu từ

766
00:36:43,800 --> 00:36:46,370
và chương trình vẫn chạy ngon lành.

767
00:36:46,370 --> 00:36:47,030
Được chưa?

768
00:36:47,030 --> 00:36:49,740
Vậy vấn đề này cũng không quá phức tạp,

769
00:36:49,740 --> 00:36:52,710
nhưng nó dùng rất nhiều cấu trúc ta đã học.

770
00:36:52,710 --> 00:36:55,160
Tách chuỗi, các bộ đếm cộng dồn,

771
00:36:55,160 --> 00:36:59,200
và cả dictionary, ta đã bắt đầu

772
00:36:59,200 --> 00:37:02,760
làm các thao tác phân tích dữ liệu

773
00:37:02,760 --> 00:37:04,930
mà con người khó xử lý được và

774
00:37:04,930 --> 00:37:06,140
dễ mắc lỗi khi làm.

775
00:37:06,140 --> 00:37:08,530
Bài hôm nay ta đã
ôn lại bộ dữ liệu.

776
00:37:08,530 --> 00:37:10,432
học về dictionary.

777
00:37:10,432 --> 00:37:12,390
Ta học cấu trúc tìm từ hay gặp nhất,

778
00:37:12,390 --> 00:37:14,770
nhấn mạnh dictionary không có trật tự,

779
00:37:14,770 --> 00:37:17,450
cái đó rất hay gặp. Ta cũng đã

780
00:37:17,450 --> 00:37:20,910
nhắc đến tuple, loại bộ dữ liệu thứ 3

781
00:37:20,910 --> 00:37:22,890
mà ta sẽ học. Nó đơn giản

782
00:37:22,890 --> 00:37:25,840
hơn dictionary và list

783
00:37:25,840 --> 00:37:27,220
một chút.

784
00:37:27,220 --> 00:37:31,240
Hẹn gặp lại các bạn ở bài tiếp theo.

785
00:37:31,240 --> 00:37:33,088
Chương 10, tuples.

786
00:37:33,088 --> 00:37:33,588

