1
00:00:00,000 --> 00:00:00,500
https://youtu.be/O0wE2M8-ois
Thao Tran

2
00:00:00,500 --> 00:00:03,110
Chào mừng các bạn đến chương 7 cuốn Python for Informatics Exploring

3
00:00:03,110 --> 00:00:03,780
Information.

4
00:00:03,780 --> 00:00:05,321
Tôi là Charles Severance,
tác giả cuốn sách

5
00:00:05,321 --> 00:00:06,490
và người dẫn chương trình hôm nay.

6
00:00:06,490 --> 00:00:09,760
Chương trình này được tài trợ bởi...

7
00:00:09,760 --> 00:00:13,410
tôi nhầm, các tài liệu được cấp quyền sử dụng theo giấy phép Creative Commons Attribution,

8
00:00:13,410 --> 00:00:17,700
gồm âm thanh, hình ảnh, các slide và

9
00:00:17,700 --> 00:00:18,730
cả cuốn sách.

10
00:00:18,730 --> 00:00:24,350
Bắt đầu nào.

11
00:00:24,350 --> 00:00:31,140
Cho đến nay chúng ta vẫn viết code

12
00:00:31,140 --> 00:00:34,290
và ra lệnh cho CPU.

13
00:00:34,290 --> 00:00:39,260
Chờ chút để tôi đi lấy CPU và các thứ, tôi sẽ quay lại ngay.

14
00:00:39,260 --> 00:00:44,376

15
00:00:44,376 --> 00:00:44,875
A.

16
00:00:44,875 --> 00:00:49,542

17
00:00:49,542 --> 00:00:53,760
OK đây rồi.

18
00:00:53,760 --> 00:00:55,000
Tôi lấy đồ ra rồi.

19
00:00:55,000 --> 00:01:00,880
Các bạn có nhớ mấy thứ trong bài 1 không?

20
00:01:00,880 --> 00:01:03,070
Cái này để đây.

21
00:01:03,070 --> 00:01:05,860
Các bạn có nhớ bo mạch chủ 
giới thiệu từ bài 1 không?

22
00:01:05,860 --> 00:01:07,380
Bo mạch chủ này là cái 

23
00:01:07,380 --> 00:01:11,140
vẽ trên màn hình đây, CPU cắm vào đây,

24
00:01:11,140 --> 00:01:12,930
bộ nhớ cắm vào đây.

25
00:01:12,930 --> 00:01:18,020
Ta đã học rằng CPU 

26
00:01:18,020 --> 00:01:20,840
gần giống với một bộ não.

27
00:01:20,840 --> 00:01:24,240
CPU hỏi "tiếp theo là gì?",

28
00:01:24,240 --> 00:01:26,270
các chỉ thị được truyền vào qua các chân cắm này.

29
00:01:26,270 --> 00:01:28,550
Trong đó chứa những dữ liệu

30
00:01:28,550 --> 00:01:30,030
tương đối lâu bền.

31
00:01:30,030 --> 00:01:34,810
Các biến được lưu trữ hầu hết trong thanh RAM này.

32
00:01:34,810 --> 00:01:37,209
Khi ta viết chương trình, các chương trình Python

33
00:01:37,209 --> 00:01:39,000
nằm trong thanh RAM này,

34
00:01:39,000 --> 00:01:44,200
chúng được truyền vào CPU qua các con chip,

35
00:01:44,200 --> 00:01:46,019
các chân cắm ở đây.

36
00:01:46,019 --> 00:01:47,810
Thực ra nó không phải nối như vậy đâu.

37
00:01:47,810 --> 00:01:50,260
Cho đến giờ 

38
00:01:50,260 --> 00:01:53,480
ta mới làm việc với ngôn ngữ lập trình

39
00:01:53,480 --> 00:01:54,510
Python thôi.

40
00:01:54,510 --> 00:01:59,660
Như vậy ta mới chỉ hoạt động ở đây.

41
00:01:59,660 --> 00:02:02,800
Ta đưa dữ liệu Python vào bộ nhớ chính,

42
00:02:02,800 --> 00:02:07,610
là cái này, và ta đã đưa các

43
00:02:07,610 --> 00:02:11,390
chỉ thị cho bộ xử lý trung tâm CPU khi

44
00:02:11,390 --> 00:02:14,050
nó cần và rồi chương trình sẽ dừng lại.

45
00:02:14,050 --> 00:02:15,560
Vậy đến giờ ta mới

46
00:02:15,560 --> 00:02:20,480
làm việc trong vùng này thôi.

47
00:02:20,480 --> 00:02:22,290
Ta chưa vượt ra ngoài bao giờ.

48
00:02:22,290 --> 00:02:25,560
Bây giờ ta sẽ vượt ra khỏi

49
00:02:25,560 --> 00:02:29,190
CPU và bộ nhớ.

50
00:02:29,190 --> 00:02:32,930
Ta vẫn sẽ viết chương trình, lưu trữ các biến trong đây

51
00:02:32,930 --> 00:02:38,530
nhưng giờ ta sẽ dùng đến ổ đĩa, tức bộ nhớ phụ,

52
00:02:38,530 --> 00:02:41,040
lưu trữ lâu bền.

53
00:02:41,040 --> 00:02:46,110
Để tôi lấy chiếc Raspberry Pi.

54
00:02:46,110 --> 00:02:48,010
Raspberry Pi của tôi đây.

55
00:02:48,010 --> 00:02:49,870
Chiếc Raspberry Pi này là

56
00:02:49,870 --> 00:02:55,900
phiên bản máy tính nhỏ, có CPU, bộ nhớ

57
00:02:55,900 --> 00:02:58,810
và bộ xử lý đồ họa ngay trên con chip nhỏ này.

58
00:02:58,810 --> 00:03:01,690
Nhưng bộ nhớ phụ của nó

59
00:03:01,690 --> 00:03:05,070
là cái thẻ SD nho nhỏ này. 
Đấy là bộ nhớ phụ

60
00:03:05,070 --> 00:03:06,066
của Raspberry Pi.

61
00:03:06,066 --> 00:03:07,440
Cấu trúc của chiếc Raspberry Pi

62
00:03:07,440 --> 00:03:10,610
giống hệt với bất cứ máy tính cá nhân nào khác.

63
00:03:10,610 --> 00:03:13,141
Chỉ là nó nhỏ hơn và rẻ hơn thôi.

64
00:03:13,141 --> 00:03:14,640
Nếu bạn lập trình bằng

65
00:03:14,640 --> 00:03:16,400
chiếc Raspberry Pi,

66
00:03:16,400 --> 00:03:17,790
đã đến lúc vượt ra ngoài.

67
00:03:17,790 --> 00:03:21,170
Các chương trình đều ở trong này,
CPU ở trong này

68
00:03:21,170 --> 00:03:24,370
ta chỉ phải hoạt động trong đó.

69
00:03:24,370 --> 00:03:27,530
Nhưng tất nhiên, khi lưu trữ file thì

70
00:03:27,530 --> 00:03:29,150
bạn lưu trữ vào đây.

71
00:03:29,150 --> 00:03:30,800
Bây giờ ta sẽ xem tới dữ liệu

72
00:03:30,800 --> 00:03:32,760
trên ổ đĩa.

73
00:03:32,760 --> 00:03:38,160
Đã đến lúc sang tới bộ nhớ phụ.

74
00:03:38,160 --> 00:03:40,915
Ta sang phần bộ nhớ phụ nào.

75
00:03:40,915 --> 00:03:43,130
Raspberry Pi nằm yên đây nhé.

76
00:03:43,130 --> 00:03:43,940
OK?

77
00:03:43,940 --> 00:03:45,860
Giờ ta sẽ lấy dữ liệu để làm việc.

78
00:03:45,860 --> 00:03:48,410
Những thứ ta đã làm lúc trước

79
00:03:48,410 --> 00:03:51,110
là để chuẩn bị cho những việc

80
00:03:51,110 --> 00:03:52,780
bây giờ ta sẽ thực hiện.

81
00:03:52,780 --> 00:03:54,572
Trong đây ta có các file dữ liệu.

82
00:03:54,572 --> 00:03:55,946
Ta vẫn đang tạo các file dữ liệu,

83
00:03:55,946 --> 00:03:58,440
mỗi chương trình Python ta viết trên máy tính

84
00:03:58,440 --> 00:04:00,970
được lưu lại thành một file,

85
00:04:00,970 --> 00:04:04,390
Python đọc và chạy file đó.

86
00:04:04,390 --> 00:04:08,980
Nhưng bây giờ ta sẽ thực sự làm việc với dữ liệu.

87
00:04:08,980 --> 00:04:11,610
Ta sẽ làm việc với các file.

88
00:04:11,610 --> 00:04:15,440
Bộ nhớ phụ thì lớn hơn

89
00:04:15,440 --> 00:04:18,790
rất nhiều.

90
00:04:18,790 --> 00:04:21,085
Bộ nhớ chính của máy tính cũng khá lớn,

91
00:04:21,085 --> 00:04:23,630
chỉ là nó không đủ lớn để chứa mọi thứ

92
00:04:23,630 --> 00:04:26,020
máy có khả năng chứa.

93
00:04:26,020 --> 00:04:28,740
Các file ta sẽ xử lý không phải thuộc dạng

94
00:04:28,740 --> 00:04:31,390
hình ảnh, video Quicktime gì cả,

95
00:04:31,390 --> 00:04:33,950
mà là các file text (văn bản).

96
00:04:33,950 --> 00:04:37,422
Chủ đề khóa học này là xử lý các text.

97
00:04:37,422 --> 00:04:39,130
Có thể là lấy từ Internet,

98
00:04:39,130 --> 00:04:41,155
có thể là đọc từ file,

99
00:04:41,155 --> 00:04:43,280
nói chung là xử lý và sử dụng những gì ta

100
00:04:43,280 --> 00:04:46,050
đã học như vòng lặp, chuỗi, v.v.

101
00:04:46,050 --> 00:04:50,600
để giải nghĩa một chuỗi thông tin.

102
00:04:50,600 --> 00:04:51,550
OK?

103
00:04:51,550 --> 00:04:55,410
Để truy cập thông tin trong file

104
00:04:55,410 --> 00:04:57,680
ta phải mở file đó ra.

105
00:04:57,680 --> 00:04:59,620
Ta không thể cứ cho là

106
00:04:59,620 --> 00:05:02,290
thông tin luôn có ngay đấy,

107
00:05:02,290 --> 00:05:05,470
vì có quá nhiều dữ liệu, Python không thể

108
00:05:05,470 --> 00:05:06,180
biết hết được.

109
00:05:06,180 --> 00:05:07,980
Ổ cứng máy tính có tới

110
00:05:07,980 --> 00:05:11,890
hàng trăm nghìn file,

111
00:05:11,890 --> 00:05:13,460
ai biết được ta muốn đọc file nào.

112
00:05:13,460 --> 00:05:15,790
Vậy ta phải thực hiện một bước

113
00:05:15,790 --> 00:05:19,860
là gọi ra hàm open dựng sẵn.

114
00:05:19,860 --> 00:05:21,860
Ta khai báo file mình cần xử lý

115
00:05:21,860 --> 00:05:23,570
trong hàng trăm nghìn file đó,

116
00:05:23,570 --> 00:05:27,510
sau đó ta sẽ được kết nối với file ấy.

117
00:05:27,510 --> 00:05:31,820
Hàm open được dựng sẵn trong Python,

118
00:05:31,820 --> 00:05:33,930
để tôi tắt cái này đã.

119
00:05:33,930 --> 00:05:37,780
Hàm open được dựng sẵn trong Python

120
00:05:37,780 --> 00:05:39,820
và nó lấy vào 2 tham số.

121
00:05:39,820 --> 00:05:45,810
Tham số thứ nhất là tên file,
ví dụ mbox.txt

122
00:05:45,810 --> 00:05:47,947
Tham số thứ hai là phương thức đọc file.

123
00:05:47,947 --> 00:05:49,530
Tức là ta muốn đọc file thôi

124
00:05:49,530 --> 00:05:51,710
hay cả chỉnh sửa nữa, v.v. Hầu hết là ta

125
00:05:51,710 --> 00:05:53,170
chỉ cần đọc file thôi.

126
00:05:53,170 --> 00:05:55,350
Ta gọi hàm open, nhập vào

127
00:05:55,350 --> 00:05:57,810
tên file muốn mở và

128
00:05:57,810 --> 00:05:59,330
phương thức đọc file.

129
00:05:59,330 --> 00:06:02,050
Ta có thể không nhập tham số thứ hai này,

130
00:06:02,050 --> 00:06:04,650
chương trình sẽ mặc định là ta chỉ đọc file.

131
00:06:04,650 --> 00:06:10,490
Hàm open không thực sự

132
00:06:10,490 --> 00:06:12,970
đọc toàn bộ dữ liệu

133
00:06:12,970 --> 00:06:17,720
vì bộ nhớ quá nhỏ
so với ổ đĩa cứng,

134
00:06:17,720 --> 00:06:21,470
nên ta phải duyệt qua các dữ liệu và

135
00:06:21,470 --> 00:06:22,610
bảo chương trình khi nào thì cần đọc.

136
00:06:22,610 --> 00:06:26,670
Vậy hành động mở file không đồng nghĩa
với đọc toàn bộ dữ liệu,

137
00:06:26,670 --> 00:06:31,190
nó tạo ra một liên kết giữa bộ nhớ

138
00:06:31,190 --> 00:06:32,940
và dữ liệu nằm trên ổ cứng.

139
00:06:32,940 --> 00:06:39,975
Nó nối giữa -- để thế này nó đổ mất.

140
00:06:39,975 --> 00:06:41,915
Dựng thế này có được không?

141
00:06:41,915 --> 00:06:43,790
Tôi phải tìm cách dựng nó lên.

142
00:06:43,790 --> 00:06:46,490

143
00:06:46,490 --> 00:06:49,230
Nó là một liên kết. Chương trình đang

144
00:06:49,230 --> 00:06:53,380
chạy trong đây, một file handle được tạo ra

145
00:06:53,380 --> 00:06:57,290
kiểu như đường dây điện thoại giữa bộ nhớ và

146
00:06:57,290 --> 00:06:57,790
ổ đĩa vậy.

147
00:06:57,790 --> 00:06:59,498
Nó không phải dữ liệu thực sự, 

148
00:06:59,498 --> 00:07:01,920
dữ liệu thực sự vẫn nằm trong ổ đĩa.

149
00:07:01,920 --> 00:07:06,030
Hãy hình dung qua hình ảnh sau.

150
00:07:06,030 --> 00:07:10,420
Đây là file handle (đặc tả tập tin).
Khi ta yêu cầu mở file,

151
00:07:10,420 --> 00:07:14,070
hàm open tìm file đó từ

152
00:07:14,070 --> 00:07:16,500
trong ổ đĩa.

153
00:07:16,500 --> 00:07:18,710
Trong bộ nhớ sẽ xuất hiện

154
00:07:18,710 --> 00:07:22,160
một file handle, nó duy trì

155
00:07:22,160 --> 00:07:25,820
một liên kết tới vị trí dữ liệu

156
00:07:25,820 --> 00:07:28,890
trong ổ đĩa hoặc SD RAM.

157
00:07:28,890 --> 00:07:30,430
Vậy file handle không phải dữ liệu

158
00:07:30,430 --> 00:07:34,170
mà là một cơ chế để truy cập dữ liệu.

159
00:07:34,170 --> 00:07:35,780
Nếu ta in nó ra, nó sẽ

160
00:07:35,780 --> 00:07:40,110
không hiện các dữ liệu trong file
mà sẽ báo rằng tôi chỉ là file handle

161
00:07:40,110 --> 00:07:44,100
đã mở file này,
ta đang ở chế độ đọc.

162
00:07:44,100 --> 00:07:45,790
Vậy nó không thực sự chứa dữ liệu

163
00:07:45,790 --> 00:07:48,402
mặc dù đây chính là dữ liệu trong file đó.

164
00:07:48,402 --> 00:07:49,860
Ta thực hiện các thao tác

165
00:07:49,860 --> 00:07:52,380
với file handle như là mở, đóng,

166
00:07:52,380 --> 00:07:53,779
đọc, viết dữ liệu.

167
00:07:53,779 --> 00:07:55,570
Sau đó thông qua file handle,

168
00:07:55,570 --> 00:07:57,180
nội dung trên ổ đĩa sẽ được

169
00:07:57,180 --> 00:07:59,480
đọc hoặc thay đổi. Vậy file handle

170
00:07:59,480 --> 00:08:02,910
giống như một trung gian vô hình.

171
00:08:02,910 --> 00:08:06,182
Nếu ta mở một file
mà tên của file đó --

172
00:08:06,182 --> 00:08:07,640
Khi thực hiện thao tác này,

173
00:08:07,640 --> 00:08:11,550
file cần phải nằm trong cùng thư mục máy tính

174
00:08:11,550 --> 00:08:14,159
với mã Python.

175
00:08:14,159 --> 00:08:15,700
Có những cách phức tạp hơn,

176
00:08:15,700 --> 00:08:17,210
nhưng ta cứ làm cách đơn giản đã.

177
00:08:17,210 --> 00:08:19,620
Đây là tên một file
trong cùng thư mục

178
00:08:19,620 --> 00:08:22,760
với mã Python bạn đang chạy.

