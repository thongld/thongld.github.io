713
00:30:59,200 --> 00:31:00,950
NghiaNguyen 26-05-2016 Thao reviewed
ở đoạn cuối.

714
00:31:00,950 --> 00:31:05,020

715
00:31:05,020 --> 00:31:07,330
Tìm giá trị trung bình 
của 1 dãy số

716
00:31:07,330 --> 00:31:10,750
là dạng kết hợp 2 dạng trước.

717
00:31:10,750 --> 00:31:13,860
Lần này, tôi sẽ dùng 
các tên biến gợi nhớ.

718
00:31:13,860 --> 00:31:17,480
Ta có 1 biến gọi là count (đếm),
ai cũng dùng tên này.

719
00:31:17,480 --> 00:31:20,830
Và biến sum (tổng), có thể đặt tên là tổng hiện tại

720
00:31:20,830 --> 00:31:22,450
sẽ hợp lý hơn.

721
00:31:22,450 --> 00:31:25,920
Biến count và biến sum
bắt đầu bằng 0

722
00:31:25,920 --> 00:31:27,450
Mỗi lần thực thi vòng lặp,

723
00:31:27,450 --> 00:31:30,480
count bằng count + 1, tức là
ta thêm 1 vào biến count.

724
00:31:30,480 --> 00:31:32,100
Biến sum bằng biến sum + giá trị value,

725
00:31:32,100 --> 00:31:35,150
tức là ta cộng từng value vào sum.

726
00:31:35,150 --> 00:31:39,280
Biến value tất nhiên lần lượt là
9, 41, 12, 3, 74, 15.

727
00:31:39,280 --> 00:31:42,400
Ở cuối, ta in ra 
màn hình giá trị của các biến.

728
00:31:42,400 --> 00:31:45,450
Ta có 6 con số
với tổng là 154.

729
00:31:45,450 --> 00:31:47,210
Sau đó ta tính
giá trị trung bình.

730
00:31:47,210 --> 00:31:49,470
Tất nhiên, đây đều
là các số nguyên.

731
00:31:49,470 --> 00:31:51,760
vì vậy đây là 1 phép chia 
bỏ phần dư.

732
00:31:51,760 --> 00:31:58,440
Vậy ta có 154 chia 6 bằng 25,
không lấy phần dư.

733
00:31:58,440 --> 00:32:02,080
Nếu ta dùng Python 3,
kết quả sẽ chính xác hơn.

734
00:32:02,080 --> 00:32:05,710
Vậy, trung bình cộng số nguyên của
các số trên 

735
00:32:05,710 --> 00:32:08,360
là 25.

736
00:32:08,360 --> 00:32:10,390
Thỉnh thoảng, ta phải tìm kiếm như

737
00:32:10,390 --> 00:32:11,610
mò kim đáy bể.

738
00:32:11,610 --> 00:32:13,700
Tìm kiếm cái gì đó

739
00:32:13,700 --> 00:32:15,804
Các bạn phải hình dung mình đang cầm trên tay

740
00:32:15,804 --> 00:32:17,220
một lượng dữ liệu, và bạn phải

741
00:32:17,220 --> 00:32:18,630
tìm kiếm cái gì đó.

742
00:32:18,630 --> 00:32:19,570
Có thể là có cả triệu thứ

743
00:32:19,570 --> 00:32:20,710
mà bạn chỉ cần 5 cái trong đó

744
00:32:20,710 --> 00:32:22,210
Bạn có thể tự lần mò hoặc

745
00:32:22,210 --> 00:32:24,418
bạn có thể viết 1 vòng lặp để 

746
00:32:24,418 --> 00:32:25,430
tìm kiếm nó.

747
00:32:25,430 --> 00:32:28,280
Có thể bạn tìm thấy nó ở dòng thứ 7
hay ở bất kì đâu.

748
00:32:28,280 --> 00:32:31,380
Vậy đây là cấu trúc để lọc hoặc tìm kiếm,

749
00:32:31,380 --> 00:32:34,780
để mò kim đáy bể bằng vòng lặp.

750
00:32:34,780 --> 00:32:38,920
Đơn giản là ta có vòng lặp này.

751
00:32:38,920 --> 00:32:42,990
Nó sẽ duyệt qua tất cả các 
giá trị 9, 41, 12, 3, 74, 15.

752
00:32:42,990 --> 00:32:46,270
Nhưng ta đặt vào
vòng lặp 1 câu lệnh if.

753
00:32:46,270 --> 00:32:48,450
Nếu giá trị đang xét lớn hơn 20

754
00:32:48,450 --> 00:32:50,380
thì in ra màn hình "I found it" (đã tìm thấy).

755
00:32:50,380 --> 00:32:55,350
Giá trị value bây giờ là 9, ta không làm gì cả.

756
00:32:55,350 --> 00:32:57,930
Tiếp theo value bằng 41.

757
00:32:57,930 --> 00:33:00,790
Và với giá trị 41, a lớn hơn rồi.

758
00:33:00,790 --> 00:33:03,850
In ra màn hình "large number" (số lớn), giá trị này được in ra.

759
00:33:03,850 --> 00:33:06,330
value tiếp theo là 12, 
không có gì.

760
00:33:06,330 --> 00:33:08,480
value bằng 3, 
không có gì.

761
00:33:08,480 --> 00:33:11,620
value giờ là 74, a, lần này in được đây.

762
00:33:11,620 --> 00:33:13,940
Ta sẽ thấy large number 74.

763
00:33:13,940 --> 00:33:16,990
Tiếp theo value bằng 15,
không có gì xảy ra.

764
00:33:16,990 --> 00:33:18,640
Tất cả các giá trị đã được duyệt qua.

765
00:33:18,640 --> 00:33:20,700
In dòng cuối và kết thúc.

766
00:33:20,700 --> 00:33:25,260
Tóm lại, đây có thể gọi là cấu trúc tìm kiếm, lọc 

767
00:33:25,260 --> 00:33:25,820
hay truy vấn.

768
00:33:25,820 --> 00:33:29,520

769
00:33:29,520 --> 00:33:32,560
Nếu không muốn in hết ra màn hình ta cũng có thể

770
00:33:32,560 --> 00:33:34,247
đặt câu hỏi trong đó có gì không?

771
00:33:34,247 --> 00:33:35,830
Hãy duyệt qua
hàng triệu giá trị

772
00:33:35,830 --> 00:33:38,794
rồi báo cho tôi cái này có tồn tại hay không.

773
00:33:38,794 --> 00:33:40,210
Trong phần này, 
ta sẽ làm quen với

774
00:33:40,210 --> 00:33:42,410
khái niệm biến Boolean.

775
00:33:42,410 --> 00:33:43,692
Boolean là dạng biến true/false.

776
00:33:43,692 --> 00:33:45,400
Nó chỉ có 2 giá trị, 
ta đã từng

777
00:33:45,400 --> 00:33:47,190
dùng nó trong câu lệnh while True.

778
00:33:47,190 --> 00:33:50,410
Từ True viết hoa đó là 1 hằng số.

779
00:33:50,410 --> 00:33:56,191
Giống như 7, 42, 99 hay Sam.

780
00:33:56,191 --> 00:33:58,440
Giờ ta sẽ khai báo 1 biến tên là found.

781
00:33:58,440 --> 00:34:02,480
found là tên biến gợi nhớ, 
tên do tôi đặt.

782
00:34:02,480 --> 00:34:04,230
Ta có found = False.

783
00:34:04,230 --> 00:34:06,970
Giá trị này sẽ mãi là False cho đến khi
ta tìm được thứ mình cần,

784
00:34:06,970 --> 00:34:08,860
và khi đó found sẽ 
chuyển qua là True.

785
00:34:08,860 --> 00:34:11,320
Giờ ta bắt đầu,
found là False, 

786
00:34:11,320 --> 00:34:15,739
và ta sẽ chạy đoạn code này 3 lần.

787
00:34:15,739 --> 00:34:18,150
Nếu giá trị value ta đang xét là 3

788
00:34:18,150 --> 00:34:20,389
thì ta sẽ gán found = True.

789
00:34:20,389 --> 00:34:23,400
Ta sẽ in ra 
giá trị found ở mỗi vòng lặp.

790
00:34:23,400 --> 00:34:27,210
Giờ giá trị value sẽ lần lượt 
là 9, 41, 12, 3, 74, 15.

791
00:34:27,210 --> 00:34:29,770
Với mỗi lần chạy ta sẽ có một dòng kết quả.

792
00:34:29,770 --> 00:34:32,030
Lần lặp đầu tiên
chưa thấy 3

793
00:34:32,030 --> 00:34:33,920
vì ta 
đang ở giá trị 9.

794
00:34:33,920 --> 00:34:35,340
Lần thứ 2 vẫn chưa tìm thấy

795
00:34:35,340 --> 00:34:37,159
vì ta đang ở giá trị 41, vẫn sai.

796
00:34:37,159 --> 00:34:39,960
Có thể found vẫn sẽ bằng False
trong 1 thời gan dài.

797
00:34:39,960 --> 00:34:41,109
A, tìm thấy 3 rồi!

798
00:34:41,109 --> 00:34:43,400
Như vậy đoạn code này
sẽ được chạy 1 lần.

799
00:34:43,400 --> 00:34:46,440
Biến found này sẽ không thay đổi nữa.

800
00:34:46,440 --> 00:34:48,909
Lúc đầu nó là False, nhưng trong phần vòng lặp còn lại

801
00:34:48,909 --> 00:34:52,392
nó sẽ giữ nguyên là True, đến khi kết thúc
vẫn là True.

802
00:34:52,392 --> 00:34:54,600
Với trường hợp này, ta không cần

803
00:34:54,600 --> 00:34:56,225
quan tâm lệnh print này.

804
00:34:56,225 --> 00:34:57,980
Không cần xem cả đống này.

805
00:34:57,980 --> 00:35:00,477
Ta chỉ cần để ý 
"Before False" (trước sai), "After True" (sau đúng).

806
00:35:00,477 --> 00:35:02,810
Kết quả này cho ta biết đã tìm thấy.

807
00:35:02,810 --> 00:35:06,330
Đã tìm thấy con số 3 trong 
cả một list số dài.

808
00:35:06,330 --> 00:35:09,560
Tôi chỉ thêm câu lệnh print này
để các bạn hiểu quá trình thực thi.

809
00:35:09,560 --> 00:35:12,920
Về cơ bản, vòng lặp từ đây tới đây

810
00:35:12,920 --> 00:35:17,075
đang đặt câu hỏi, có số 3
nào trong list số

811
00:35:17,075 --> 00:35:20,210
ta sẽ duyệt không?

812
00:35:20,210 --> 00:35:25,870
Bây giờ tôi có một câu hỏi cho các bạn.

813
00:35:25,870 --> 00:35:29,130
Bạn có thể tạm dừng nếu muốn.

814
00:35:29,130 --> 00:35:32,370
Làm thế nào để cải tiến 
vòng lặp này bằng lệnh break?

815
00:35:32,370 --> 00:35:34,900
Bạn nên đặt break ở đâu 
để vòng lặp tối ưu hơn?

816
00:35:34,900 --> 00:35:40,810

817
00:35:40,810 --> 00:35:44,340
Các bạn chưa nghĩ ra ngay cũng không sao.

818
00:35:44,340 --> 00:35:48,410
Hãy nghĩ xem, khi giá trị đã thành True

819
00:35:48,410 --> 00:35:51,480
thì xét tiếp các số còn lại cũng chẳng để làm gì.

820
00:35:51,480 --> 00:35:53,220
Chẳng ích gì cả.

821
00:35:53,220 --> 00:35:59,070
Vậy ta có thể đặt 1 break ngay trong khối này.

822
00:35:59,070 --> 00:36:01,220
Bạn đang tìm con số 3.

823
00:36:01,220 --> 00:36:03,220
Bạn chỉ quan tâm là có 
tìm ra được nó hay không.

824
00:36:03,220 --> 00:36:06,150
Nếu thấy nó rồi, bạn đánh dấu True tức là đã tìm thấy

825
00:36:06,150 --> 00:36:08,450
rồi thoát khỏi vòng lặp.

826
00:36:08,450 --> 00:36:09,530
Sao phải làm gì nữa?

827
00:36:09,530 --> 00:36:11,210
Sao phải làm mấy cái này?

828
00:36:11,210 --> 00:36:13,070
Cứ thoát vòng lặp thôi.

829
00:36:13,070 --> 00:36:16,110
Đừng lo nhé,
tôi chỉ đang cho bạn thấy

830
00:36:16,110 --> 00:36:18,510
là ta có thể đặt break vào đây.

831
00:36:18,510 --> 00:36:20,520
Vòng lặp chạy được theo cả 2 cách,

832
00:36:20,520 --> 00:36:24,620
chỉ là cách kia thì nó duyệt hết các phần tử thôi.

833
00:36:24,620 --> 00:36:26,210
OK.

834
00:36:26,210 --> 00:36:30,850
Đây là cấu trúc tìm giá trị lớn nhất tôi đã từng dùng.

835
00:36:30,850 --> 00:36:34,930
Bắt đầu nhé.

836
00:36:34,930 --> 00:36:36,757
Có biến largest_so_far,
ta kiểm tra xem

837
00:36:36,757 --> 00:36:38,340
giá trị đang xét có lớn hơn không.

838
00:36:38,340 --> 00:36:42,010
Nếu đúng, ta lưu nó lại rồi tiếp tục.

839
00:36:42,010 --> 00:36:44,840
Cuối cùng ta sẽ tìm thấy
giá trị lớn nhất 74.

840
00:36:44,840 --> 00:36:50,870
Vậy nếu muốn tìm giá trị nhỏ nhất thì

841
00:36:50,870 --> 00:36:53,990
bạn cần thay đổi đoạn code này thế nào?

842
00:36:53,990 --> 00:36:56,920

843
00:36:56,920 --> 00:37:00,580
Các bạn hãy chỉ trên màn hình này

844
00:37:00,580 --> 00:37:04,548
chỗ nào cần thay đổi
để tìm số nhỏ nhất

845
00:37:04,548 --> 00:37:05,464
trong list giá trị?

846
00:37:05,464 --> 00:37:09,500

847
00:37:09,500 --> 00:37:11,910
Mấu chốt nào giúp tìm ra giá trị lớn nhất?

848
00:37:11,910 --> 00:37:13,950
Bạn cần 
thay đổi cái gì nào?

849
00:37:13,950 --> 00:37:16,270
OK.

850
00:37:16,270 --> 00:37:17,060
Các bạn có thể tạm dừng.

851
00:37:17,060 --> 00:37:19,840

852
00:37:19,840 --> 00:37:22,170
Vậy đây là cách để sửa thành

853
00:37:22,170 --> 00:37:24,220
tìm giá trị nhỏ nhất.

854
00:37:24,220 --> 00:37:25,850
Đầu tiên ta phải

855
00:37:25,850 --> 00:37:27,670
đổi tên biến đã nhỉ.

856
00:37:27,670 --> 00:37:29,670
Biến lúc trước tên là largest_so_far,

857
00:37:29,670 --> 00:37:33,702
giờ ta đổi nó 
thành smallest_so_far (nhỏ nhất cho đến giờ).

858
00:37:33,702 --> 00:37:35,910
Đổi tên biến không 
ảnh hưởng gì đến

859
00:37:35,910 --> 00:37:36,760
chương trình.

860
00:37:36,760 --> 00:37:40,230
Nhưng nó sẽ giúp chương trình
dễ hiểu hơn nếu nó chạy được.

861
00:37:40,230 --> 00:37:42,180
Vậy ta đổi thành smallest_so_far.

862
00:37:42,180 --> 00:37:44,470
Nhưng thế này chưa chuyển nó thành tìm giá trị nhỏ nhất đâu.

863
00:37:44,470 --> 00:37:47,330
Cái ta cần thay đổi 
để tìm giá trị nhỏ nhất

864
00:37:47,330 --> 00:37:51,260
là sửa dấu lớn hơn thành
dấu nhỏ hơn.

865
00:37:51,260 --> 00:37:53,300
Bởi với biến largest_so_far thì

866
00:37:53,300 --> 00:37:55,730
nếu con số đang xét lớn hơn

867
00:37:55,730 --> 00:37:59,020
largest_so_far, 
ta sẽ giữ lại nó.

868
00:37:59,020 --> 00:38:00,899
Còn khi tìm giá trị nhỏ nhất, nếu số đang xét

869
00:38:00,899 --> 00:38:03,440
nhỏ hơn smallest_so_far thì 
ta lưu lại nó.

870
00:38:03,440 --> 00:38:06,330
Đoạn này nghĩa là lưu lại.

871
00:38:06,330 --> 00:38:08,420
Dòng này là dòng lưu lại.

872
00:38:08,420 --> 00:38:10,460
Còn dòng này là khi nào thì lưu lại.

873
00:38:10,460 --> 00:38:13,830

874
00:38:13,830 --> 00:38:17,740
Ta lưu lại nó nếu nó nhỏ hơn.

875
00:38:17,740 --> 00:38:18,910
Mấu chốt là như vậy.

876
00:38:18,910 --> 00:38:22,400
Vậy tôi đặt tên nó là 
smallest_so_far, 

877
00:38:22,400 --> 00:38:23,720
hợp lý lắm.

878
00:38:23,720 --> 00:38:26,662
Nhưng mấu chốt để tìm
giá trị lớn nhất hay nhỏ nhất

879
00:38:26,662 --> 00:38:28,620
là cái dấu nhỏ hơn và lớn hơn này.

880
00:38:28,620 --> 00:38:30,840
Và đây là đoạn code sẽ được

881
00:38:30,840 --> 00:38:33,840
kiểm tra lại nhiều lần.

882
00:38:33,840 --> 00:38:36,850
Nhưng vẫn còn 1 bug trong đó.

883
00:38:36,850 --> 00:38:39,100
Giờ ta hãy hình dung trực quan.

884
00:38:39,100 --> 00:38:42,310

885
00:38:42,310 --> 00:38:45,890
Ta có 1 biến
tên là smallest_so_far.

886
00:38:45,890 --> 00:38:48,140
Ta sẽ kiểm tra xem 
trong dãy số mà tôi 

887
00:38:48,140 --> 00:38:50,570
sẽ các bạn xem có số nào nhỏ hơn

888
00:38:50,570 --> 00:38:53,120
smallest_so_far không.

889
00:38:53,120 --> 00:38:55,920
Con số đầu tiên là 9.

890
00:38:55,920 --> 00:38:59,240
Nó có nhỏ hơn -1 không?

