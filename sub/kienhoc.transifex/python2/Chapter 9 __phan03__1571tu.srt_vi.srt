395
00:18:30,410 --> 00:18:34,340
Thao Tran
Toán tử "in" này

396
00:18:34,340 --> 00:18:37,080
đặt ra một câu hỏi.

397
00:18:37,080 --> 00:18:43,200
Chuỗi "csev" có phải là một key có sẵn
trong dictionary ccc không?

398
00:18:43,200 --> 00:18:46,710
Ta hỏi key "csev" có tồn tại
trong dictionary ccc không,

399
00:18:46,710 --> 00:18:49,210
và câu trả lời là False.

400
00:18:49,210 --> 00:18:51,560
Như vậy nó sẽ không hiện traceback

401
00:18:51,560 --> 00:18:53,980
mà báo cho ta key đó có tồn tại

402
00:18:53,980 --> 00:18:55,046
hay không.

403
00:18:55,046 --> 00:18:56,420
Nhắc lại thuật toán là

404
00:18:56,420 --> 00:18:59,050
lần đầu cái tên xuất hiện, ta đặt giá trị cho nó bằng 1,

405
00:18:59,050 --> 00:19:02,620
và cứ mỗi lần xuất hiện sau đó, cộng thêm 1 vào

406
00:19:02,620 --> 00:19:05,120
Đấy là cách làm trong Python.

407
00:19:05,120 --> 00:19:07,380
Đây là cách ta viết chương trình

408
00:19:07,380 --> 00:19:09,890
tôi vừa nhắc đến trong Python.

409
00:19:09,890 --> 00:19:12,660
Đây là các cái tên, tôi viết tắt

410
00:19:12,660 --> 00:19:14,740
để lên slide cho gọn.

411
00:19:14,740 --> 00:19:16,690
Đây là biến vòng lặp của ta,

412
00:19:16,690 --> 00:19:21,240
nó sẽ lần lượt duyệt qua 5 cái tên.

413
00:19:21,240 --> 00:19:24,730
Trong vòng lặp ta có câu lệnh if.

414
00:19:24,730 --> 00:19:29,750
Tôi đặt tên dictionary là counts,

415
00:19:29,750 --> 00:19:32,170
nếu cái tên chưa tồn tại trong dictionary "counts"

416
00:19:32,170 --> 00:19:36,450
thì counts của cái tên đó bằng 1.

417
00:19:36,450 --> 00:19:38,810
Nếu cái tên đã có sẵn

418
00:19:38,810 --> 00:19:41,290
thì ta có thể lấy nó ra,

419
00:19:41,290 --> 00:19:43,840
counts[name] + 1, ta cộng thêm 1

420
00:19:43,840 --> 00:19:45,710
và gán lại giá trị vào.

421
00:19:45,710 --> 00:19:46,550
OK

422
00:19:46,550 --> 00:19:50,310
Khi vòng lặp xong, nó sẽ tự tạo thêm các mục

423
00:19:50,310 --> 00:19:52,720
và cộng giá trị vào các mục có sẵn,

424
00:19:52,720 --> 00:19:55,110
không bị traceback.
Khi in màn hình

425
00:19:55,110 --> 00:19:58,300
ta sẽ thấy các số đếm ở đây.

426
00:19:58,300 --> 00:20:00,750
Cái này có thể duyệt hàng triệu
cái tên, rất là vui,

427
00:20:00,750 --> 00:20:02,540
nó sẽ cứ thế mở rộng.

428
00:20:02,540 --> 00:20:05,280
OK?

429
00:20:05,280 --> 00:20:06,900
Cấu trúc kiểm tra xem

430
00:20:06,900 --> 00:20:10,250
key này có trong dictionary không, 
gán một con số cho nó

431
00:20:10,250 --> 00:20:16,040
hoặc cộng thêm 1 vào nó
được dùng rất thường xuyên.

432
00:20:16,040 --> 00:20:18,370
Đến mức mà có hẳn một

433
00:20:18,370 --> 00:20:21,810
tính năng dựng sẵn đặc biệt trong dictionary

434
00:20:21,810 --> 00:20:23,730
để thực hiện thao tác này.

435
00:20:23,730 --> 00:20:28,090
Đó là phương thức get.

436
00:20:28,090 --> 00:20:30,530
counts là tên của dictionary,

437
00:20:30,530 --> 00:20:34,130
get là một tính năng dựng sẵn của dictionary

438
00:20:34,130 --> 00:20:35,760
lấy vào 2 tham số.

439
00:20:35,760 --> 00:20:39,000
Tham số thứ nhất là một tên key,

440
00:20:39,000 --> 00:20:43,090
có thể dạng chuỗi như csev, cwen hay marquard.

441
00:20:43,090 --> 00:20:45,400
Tham số thứ 2 là một value

442
00:20:45,400 --> 00:20:50,890
để trả lại nếu khóa chưa tồn tại.

443
00:20:50,890 --> 00:20:54,350
Nó sẽ là value mặc định nếu key không tồn tại

444
00:20:54,350 --> 00:20:55,860
và sẽ không có traceback.

445
00:20:55,860 --> 00:21:00,720
Theo cách này, ta có thể gói gọn cả if then else

446
00:21:00,720 --> 00:21:03,430
Nếu tham số name đã có trong counts

447
00:21:03,430 --> 00:21:06,330
thì in nó ra, nếu không thì in 0.

448
00:21:06,330 --> 00:21:11,520
Biểu thức này sẽ lấy ra giá trị

449
00:21:11,520 --> 00:21:15,590
nếu nó tồn tại hoặc trả lại một số 0

450
00:21:15,590 --> 00:21:16,930
nếu nó không tồn tại.

451
00:21:16,930 --> 00:21:19,100
Rất là hữu dụng đúng không?

452
00:21:19,100 --> 00:21:21,110
Rất hữu dụng.

453
00:21:21,110 --> 00:21:23,270
Cái mặt cười tôi vẽ xấu quá.

454
00:21:23,270 --> 00:21:26,710
Cách này rất hữu dụng bởi vì

455
00:21:26,710 --> 00:21:30,350
khi ta hiểu cấu trúc rồi thì
4 dòng code này

456
00:21:30,350 --> 00:21:32,560
có thể gói gọn trong 1 dòng.

457
00:21:32,560 --> 00:21:35,810
Vì ta sẽ cần dùng đoạn if then else này rất nhiều lần.

458
00:21:35,810 --> 00:21:41,080
Giờ ta có thể viết lại vòng lặp rất dễ dàng và gọn gàng hơn nhiều

459
00:21:41,080 --> 00:21:43,090
với cấu trúc này.

460
00:21:43,090 --> 00:21:44,020
Đúng không?

461
00:21:44,020 --> 00:21:45,910
Nhìn nó có vẻ phức tạp

462
00:21:45,910 --> 00:21:49,180
nhưng bạn sẽ quen với nó ngay thôi.

463
00:21:49,180 --> 00:21:51,460
Ở đây mọi thứ đều y như cũ,

464
00:21:51,460 --> 00:21:54,440
ta tạo một dictionary rỗng, ta có 5 cái tên cần xét.

465
00:21:54,440 --> 00:21:56,580
Ta sẽ viết 1 vòng lặp

466
00:21:56,580 --> 00:21:58,300
duyệt qua từng cái tên đó.

467
00:21:58,300 --> 00:22:00,100
counts của name

468
00:22:00,100 --> 00:22:05,450
bằng counts.get giá trị được lưu trong name,

469
00:22:05,450 --> 00:22:08,590
nếu không tìm được thì xuất ra số 0.

470
00:22:08,590 --> 00:22:11,260
Dù kết quả là một giá trị hay là 0

471
00:22:11,260 --> 00:22:15,320
thì cộng 1 vào đó, gán tổng đó

472
00:22:15,320 --> 00:22:18,310
vào counts[name]

473
00:22:18,310 --> 00:22:25,940
Vậy chương trình sẽ tự tạo

474
00:22:25,940 --> 00:22:29,837
hoặc cập nhật các mục có sẵn.

475
00:22:29,837 --> 00:22:32,170
Nếu chưa có mục nào thì nó tự tạo và đặt giá trị bằng 1,

476
00:22:32,170 --> 00:22:35,580
nếu có rồi thì nó cộng 1

477
00:22:35,580 --> 00:22:37,560
vào giá trị hiện tại.

478
00:22:37,560 --> 00:22:46,510
Vậy dòng này là một cấu trúc idiom.

479
00:22:46,510 --> 00:22:48,440
Các bạn có thể đọc thêm trong sách để hiểu hơn,

480
00:22:48,440 --> 00:22:50,340
làm quen với khái niệm,

481
00:22:50,340 --> 00:22:53,100
hiểu cách hoạt động của nó.

482
00:22:53,100 --> 00:22:54,430
OK?

483
00:22:54,430 --> 00:22:58,510
Vì bây giờ tôi sẽ dùng nó luôn,
không giải thích lại nữa.

484
00:22:58,510 --> 00:23:03,330
Tiếp theo là vấn đề

485
00:23:03,330 --> 00:23:05,310
tìm từ xuất hiện nhiều nhất.

486
00:23:05,310 --> 00:23:09,040
Các dạng như là tìm cái xuất hiện nhiều nhất, hay top 5

487
00:23:09,040 --> 00:23:13,000
người ta đều dùng dictionary.

488
00:23:13,000 --> 00:23:15,407
Vì ta phải đếm các thứ,

489
00:23:15,407 --> 00:23:17,240
mà ban đầu ta chưa biết cái nào xuất hiện nhiều nhất

490
00:23:17,240 --> 00:23:20,310
nên phải đếm các thứ trước đã,

491
00:23:20,310 --> 00:23:22,240
mà dictionary là một cách đếm rất hữu hiệu.

492
00:23:22,240 --> 00:23:24,600
Sau đây là một bài tập,

493
00:23:24,600 --> 00:23:26,280
tôi muốn các bạn đọc đoạn text sau

494
00:23:26,280 --> 00:23:29,470
và tìm từ xuất hiện nhiều nhất trong đó.

495
00:23:29,470 --> 00:23:31,800
Nói cho tôi đó là từ gì,

496
00:23:31,800 --> 00:23:35,430
xuất hiện bao nhiêu lần.

497
00:23:35,430 --> 00:23:36,552
Sẵn sàng chưa?

498
00:23:36,552 --> 00:23:38,510
Tôi chỉ cho các bạn 1 phần nghìn của 1 giây thôi,

499
00:23:38,510 --> 00:23:39,900
giống như thời gian cho máy tính.

500
00:23:39,900 --> 00:23:40,920
Tôi nghĩ máy tính chỉ cần 1 phần nghìn của 1 giây

501
00:23:40,920 --> 00:23:42,450
để làm cái này.

502
00:23:42,450 --> 00:23:43,110
Đây này.

503
00:23:43,110 --> 00:23:45,920

504
00:23:45,920 --> 00:23:49,590
OK tôi đã cho các bạn 5 giây,
tìm được đáp án chưa?

505
00:23:49,590 --> 00:23:51,570
Hay là bạn chỉ tự lẩm bẩm

506
00:23:51,570 --> 00:23:54,030
"mình ghét cái này quá thể, không được,

507
00:23:54,030 --> 00:23:56,147
mình phải viết 1 chương trình Python thôi".

508
00:23:56,147 --> 00:23:57,980
Rồi nếu tôi chờ thêm chút nữa chắc các bạn

509
00:23:57,980 --> 00:23:59,240
sẽ viết ra cho tôi 1 chương trình Python thật.

510
00:23:59,240 --> 00:24:01,220
Bài tiếp theo dễ hơn một chút,

511
00:24:01,220 --> 00:24:02,660
có từ bài giảng đầu tiên.

512
00:24:02,660 --> 00:24:03,160
Sẵn sàng chưa?

513
00:24:03,160 --> 00:24:06,180
Vẫn là yêu cầu tìm từ xuất hiện nhiều nhất

514
00:24:06,180 --> 00:24:07,960
và số lần xuất hiện.

515
00:24:07,960 --> 00:24:35,640

516
00:24:35,640 --> 00:24:38,000
Các bạn có đáp án chưa?

517
00:24:38,000 --> 00:24:42,000
Tôi tin rằng đáp án là,
hi vọng tôi không bị sai ngu ở đây,

518
00:24:42,000 --> 00:24:45,890
đáp án là từ "the" xuất hiện 7 lần.

519
00:24:45,890 --> 00:24:47,470
Đó là đáp án đúng.

520
00:24:47,470 --> 00:24:48,340
OK.

521
00:24:48,340 --> 00:24:51,610
Con người không giỏi làm mấy cái này lắm.

522
00:24:51,610 --> 00:24:53,772
Đây là một đoạn code bắt đầu 

523
00:24:53,772 --> 00:24:55,230
kết hợp một số thứ ta đã

524
00:24:55,230 --> 00:24:57,720
học trong các bài trước.

525
00:24:57,720 --> 00:25:02,840
Ta sẽ đọc một dòng text,
tách nó thành các từ,

526
00:25:02,840 --> 00:25:07,350
đếm số lần mỗi từ xuất hiện

527
00:25:07,350 --> 00:25:10,060
rồi in ra một bản kê khai.

528
00:25:10,060 --> 00:25:13,440
Ta sẽ làm như sau.

529
00:25:13,440 --> 00:25:16,870
Ta tạo một dictionary rỗng.

530
00:25:16,870 --> 00:25:17,745
Đọc một dòng dữ liệu

531
00:25:17,745 --> 00:25:20,460

532
00:25:20,460 --> 00:25:24,940
rồi tách nó ra, hãy nhớ hàm split tách một chuỗi

533
00:25:24,940 --> 00:25:27,160
và tạo thành một list.

534
00:25:27,160 --> 00:25:30,230
words là một list, line là một chuỗi.

535
00:25:30,230 --> 00:25:31,910
Ta in nó ra.

536
00:25:31,910 --> 00:25:33,920
Rồi ta viết một vòng lặp for

537
00:25:33,920 --> 00:25:36,390
duyệt qua từng từ trong words,

538
00:25:36,390 --> 00:25:39,040
sau đó dùng cấu trúc này tạo ra

539
00:25:39,040 --> 00:25:42,017
counts[word] = counts.get(word,0) + 1

540
00:25:42,017 --> 00:25:43,600
Nó sẽ thực hiện y như ta đã

541
00:25:43,600 --> 00:25:47,730
nói qua trong mấy slide trước.

542
00:25:47,730 --> 00:25:50,980
Tạo mục mới hoặc bổ sung vào mục có sẵn.

543
00:25:50,980 --> 00:25:52,840
OK, rồi ta in chúng ra.

544
00:25:52,840 --> 00:25:56,650
Đây là kết quả in màn hình
của chương trình.

545
00:25:56,650 --> 00:25:58,920
Đây thực ra phải là một dòng dài

546
00:25:58,920 --> 00:26:01,060
nhưng tôi cắt nó ra để các bạn nhìn được.

547
00:26:01,060 --> 00:26:05,400
Đây là dòng dữ liệu ta nhập vào,
có 7 từ "the".

548
00:26:05,400 --> 00:26:08,980
Chương trình đọc dòng này, tách thành một list

549
00:26:08,980 --> 00:26:11,250
bắt đầu ở đây, kết thúc ở kia.

550
00:26:11,250 --> 00:26:14,300
List có trình tự nên nó chỉ đơn giản

551
00:26:14,300 --> 00:26:18,150
là tách dòng ra thành các từ riêng biệt

552
00:26:18,150 --> 00:26:25,160
trong một list các chuỗi, tức là tách một chuỗi thành nhiều chuỗi.

553
00:26:25,160 --> 00:26:28,750
Đây là các chuỗi đó. Các dấu cách đã được loại đi

554
00:26:28,750 --> 00:26:30,564
nên ta được 1 list,

555
00:26:30,564 --> 00:26:31,980
tiếp theo ta sẽ

556
00:26:31,980 --> 00:26:35,440
duyệt qua list này

557
00:26:35,440 --> 00:26:37,200
và đếm số lần xuất hiện cho đến giờ

558
00:26:37,200 --> 00:26:39,490
của mỗi từ trong list.

559
00:26:39,490 --> 00:26:41,990
Dùng list xong, ta in ra

560
00:26:41,990 --> 00:26:44,760
nội dung của dictionary và nhìn xem

561
00:26:44,760 --> 00:26:47,440
con số nào lớn nhất.

562
00:26:47,440 --> 00:26:50,550
Giống như tìm số lớn nhất, ồ số 7

563
00:26:50,550 --> 00:26:54,230
là to nhất nên từ xuất hiện nhiều nhất là "the".

564
00:26:54,230 --> 00:26:57,000
Đó là cách hoạt động của chương trình.

565
00:26:57,000 --> 00:27:01,300
Nó đọc một dòng, tách thành list các từ

566
00:27:01,300 --> 00:27:04,450
rồi cộng dồn số lần xuất hiện tính đến hiện tại cho mỗi từ,

567
00:27:04,450 --> 00:27:08,990
sau đó ta nhìn xem từ nào xuất hiện nhiều nhất.

568
00:27:08,990 --> 00:27:10,890
OK

569
00:27:10,890 --> 00:27:13,340
Ôi không, bật nhầm rồi.

570
00:27:13,340 --> 00:27:15,540
Được rồi.

571
00:27:15,540 --> 00:27:19,330
Ở đây tôi viết lại nhỏ hơn để nhìn được hết.

572
00:27:19,330 --> 00:27:21,620
Ta tạo một dictionary.

573
00:27:21,620 --> 00:27:25,160
Đây là dòng dữ liệu được nhập vào, là một dòng hết,

574
00:27:25,160 --> 00:27:29,150
ta thực hiện split, rồi in các từ ra,

575
00:27:29,150 --> 00:27:33,190
split tách một chuỗi thành một list các chuỗi

576
00:27:33,190 --> 00:27:37,080
dựa theo vị trí các dấu cách.

577
00:27:37,080 --> 00:27:41,440
Ở đây in ra "Counting..." (đang đếm).

578
00:27:41,440 --> 00:27:44,470
Ta chạy vòng lặp qua từng từ một,

579
00:27:44,470 --> 00:27:46,380
dùng cấu trúc

580
00:27:46,380 --> 00:27:50,510
counts[word] = counts.get(word,0) + 1

581
00:27:50,510 --> 00:27:52,690
nó sẽ tạo mới hoặc cập nhật.

582
00:27:52,690 --> 00:27:56,110
Rồi ta in counts ra và nó xuất hiện ở đây.

583
00:27:56,110 --> 00:27:59,547
Nhắc lại, đây là phần ta mới học.

584
00:27:59,547 --> 00:28:01,505
Các thứ khác ta đã học qua rồi.

585
00:28:01,505 --> 00:28:04,790

586
00:28:04,790 --> 00:28:08,460
Ta cũng có thể dùng vòng lặp for để duyệt dictionary.

587
00:28:08,460 --> 00:28:12,560

588
00:28:12,560 --> 00:28:15,340
Ta đã dùng vòng lặp for với rất nhiều thứ,

589
00:28:15,340 --> 00:28:18,910
như là chuỗi ký tự, list số,

590
00:28:18,910 --> 00:28:21,800
các file, về cơ bản

591
00:28:21,800 --> 00:28:26,160
nội dung của nó là đây là một bộ dữ liệu,

