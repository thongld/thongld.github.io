179
00:08:22,760 --> 00:08:27,320
Thao Tran
Và nếu không phải,
ta sẽ nhận được traceback.

180
00:08:27,320 --> 00:08:30,000
Giờ chắc các bạn đã quen
đọc traceback rồi.

181
00:08:30,000 --> 00:08:32,929
Nó báo là không có file hay thư mục tên stuff.txt

182
00:08:32,929 --> 00:08:34,789
Tức là tôi đã quên lưu file
hoặc gõ tên sai rồi.

183
00:08:34,789 --> 00:08:37,799

184
00:08:37,799 --> 00:08:40,750
Tiếp theo, ta sẽ học

185
00:08:40,750 --> 00:08:42,610
về ký tự newline (ký tự xuống dòng).

186
00:08:42,610 --> 00:08:45,360
Ta vẫn chưa gặp ký tự này, nhưng

187
00:08:45,360 --> 00:08:47,990
trong các file có một ký tự đặc biệt

188
00:08:47,990 --> 00:08:51,739
báo hiệu kết thúc một dòng,

189
00:08:51,739 --> 00:08:53,780
bởi vì các file text ta vẫn viết

190
00:08:53,780 --> 00:08:55,620
bao gồm các chương trình Python của các bạn

191
00:08:55,620 --> 00:08:57,720
đều được chia thành nhiều dòng.

192
00:08:57,720 --> 00:08:59,610
Mỗi dòng có độ dài biến đổi

193
00:08:59,610 --> 00:09:02,890
và có một ký tự đặc biệt không in ra
mà ta không nhìn thấy.

194
00:09:02,890 --> 00:09:06,440
Ta thấy nó bởi vì ta thấy có nhiều dòng,

195
00:09:06,440 --> 00:09:09,990
nhưng bản thân ký tự đó thì ta không thấy.

196
00:09:09,990 --> 00:09:14,160
Đây là một ký tự rất quan trọng

197
00:09:14,160 --> 00:09:16,630
vì dữ liệu chỉ là một dãy ký tự trên ổ đĩa

198
00:09:16,630 --> 00:09:18,810
được ngắt ra bởi các ký tự newline,

199
00:09:18,810 --> 00:09:22,200
báo hiệu kết thúc các dòng.

200
00:09:22,200 --> 00:09:25,800
Vậy khi ta dựng một chuỗi,

201
00:09:25,800 --> 00:09:30,040
ký hiệu hằng của newline là \n

202
00:09:30,040 --> 00:09:33,671
Khi ta tạo một chuỗi và

203
00:09:33,671 --> 00:09:35,170
muốn xuống dòng, ta viết

204
00:09:35,170 --> 00:09:38,320
Hello\nWorld!

205
00:09:38,320 --> 00:09:40,020
Nếu ta gọi biến ra

206
00:09:40,020 --> 00:09:41,400
ta có thể nhìn thấy \n

207
00:09:41,400 --> 00:09:43,550
nhưng nếu in ra bằng lệnh print

208
00:09:43,550 --> 00:09:47,520
ta sẽ thấy nó

209
00:09:47,520 --> 00:09:49,590
xuống dòng dưới.

210
00:09:49,590 --> 00:09:53,510
Vậy có những lúc ta thấy
được \n và có lúc

211
00:09:53,510 --> 00:09:58,332
nó được thể hiện qua việc chuyển xuống dòng.

212
00:09:58,332 --> 00:09:59,790
Một điểm quan trọng nữa là

213
00:09:59,790 --> 00:10:02,860
mặc dù ta viết nó bằng 2 ký tự,

214
00:10:02,860 --> 00:10:05,180
\n được viết trong chuỗi bằng 2 ký tự,

215
00:10:05,180 --> 00:10:06,360
nhưng nó chỉ được coi là 1 ký tự.

216
00:10:06,360 --> 00:10:10,690
Khi in cái này ra ta thấy X xuống dòng Y.

217
00:10:10,690 --> 00:10:13,510
Nếu hỏi biến stuff chứa bao nhiêu ký tự,

218
00:10:13,510 --> 00:10:15,780
chương trình sẽ báo là 3.

219
00:10:15,780 --> 00:10:17,530
Cái này rất quan trọng.

220
00:10:17,530 --> 00:10:22,190
OK, vậy là có 3 ký tự thôi, 
newline được coi là 1 ký tự.

221
00:10:22,190 --> 00:10:25,620
Đây chỉ là một cú pháp
ta dùng để mã hóa

222
00:10:25,620 --> 00:10:27,870
một dòng mới trong chuỗi.

223
00:10:27,870 --> 00:10:29,460
OK.

224
00:10:29,460 --> 00:10:35,380
Vậy dù cho đây chỉ là một dãy ký tự dài

225
00:10:35,380 --> 00:10:37,610
được ngắt ra bằng các ký tự new line,

226
00:10:37,610 --> 00:10:39,820
các trình soạn thảo văn bản
và hệ điều hành

227
00:10:39,820 --> 00:10:43,980
hiện những file này
thành nhiều dòng khác nhau.

228
00:10:43,980 --> 00:10:46,850
Rất dễ coi chúng là

229
00:10:46,850 --> 00:10:48,350
nhiều dòng khác nhau.

230
00:10:48,350 --> 00:10:49,850
Có thể các bạn đang ước gì

231
00:10:49,850 --> 00:10:51,537
tôi đừng có dạy các bạn về newline.

232
00:10:51,537 --> 00:10:53,120
Nhưng khi bắt đầu đọc các file,

233
00:10:53,120 --> 00:10:54,980
ta sẽ gặp phải những ký tự newline đó,

234
00:10:54,980 --> 00:10:58,130
nên ta phải hình dung trong đầu

235
00:10:58,130 --> 00:11:00,420
rằng những file text này

236
00:11:00,420 --> 00:11:03,990
có những ký tự newline ngắt cuối mỗi dòng.

237
00:11:03,990 --> 00:11:06,080
Trên thực tế, trong đoạn này,

238
00:11:06,080 --> 00:11:09,134
chữ R này đi liền sau ký tự newline.

239
00:11:09,134 --> 00:11:10,800
Đây chỉ là một đống ký tự

240
00:11:10,800 --> 00:11:13,180
được các ký tự newline ngắt ra.

241
00:11:13,180 --> 00:11:15,840
Để tách ra thành dòng 1, dòng 2, dòng 3,

242
00:11:15,840 --> 00:11:16,700
dòng 4.

243
00:11:16,700 --> 00:11:18,750
Bạn phải nắm được là cuối mỗi dòng

244
00:11:18,750 --> 00:11:21,675
có một ký tự như vậy.

245
00:11:21,675 --> 00:11:23,880
Số ký tự của một dòng

246
00:11:23,880 --> 00:11:25,050
tính cả ký tự newline.

247
00:11:25,050 --> 00:11:27,000
\n chỉ tính là một ký tự.

248
00:11:27,000 --> 00:11:28,560
OK?

249
00:11:28,560 --> 00:11:31,880
Vậy file được đọc như thế nào?

250
00:11:31,880 --> 00:11:36,090
Ta đã nhắc tới việc mở ra một xfile.

251
00:11:36,090 --> 00:11:37,860
xfile này

252
00:11:37,860 --> 00:11:40,450
cũng lại là một tên biến gợi nhớ tôi nghĩ ra.

253
00:11:40,450 --> 00:11:43,710
Đây là một file handle, nhớ rằng
nó không phải toàn bộ dữ liệu

254
00:11:43,710 --> 00:11:46,060
mà là cách ta có thể đọc dữ liệu.

255
00:11:46,060 --> 00:11:48,710
Ta có thể dùng nó như
một điểm truy cập.

256
00:11:48,710 --> 00:11:50,770
Cách đọc hay nhất với

257
00:11:50,770 --> 00:11:53,160
file text nhiều dòng là

258
00:11:53,160 --> 00:11:58,810
dùng vòng lặp xác định for: for cheese in xfile

259
00:11:58,810 --> 00:12:02,390
Nhớ rằng trong biến này là một list số

260
00:12:02,390 --> 00:12:03,210
hoặc chuỗi ký tự.

261
00:12:03,210 --> 00:12:05,230
Giờ ta đã đưa một file handle vào đây.

262
00:12:05,230 --> 00:12:08,550
Python tự động biết rằng

263
00:12:08,550 --> 00:12:10,500
mỗi lần chạy vòng lặp

264
00:12:10,500 --> 00:12:11,990
sẽ đi tới dòng tiếp theo của file.

265
00:12:11,990 --> 00:12:13,120
Hoàn toàn tự động.

266
00:12:13,120 --> 00:12:15,930
cheese là cái tên vớ vẩn tôi bịa ra thôi,

267
00:12:15,930 --> 00:12:18,290
gọi là line (dòng) chắc sẽ hợp lý hơn.

268
00:12:18,290 --> 00:12:23,030
Khi ta viết for cheese in xfile, chương trình

269
00:12:23,030 --> 00:12:25,760
sẽ duyệt qua cả file rồi dừng lại 
khi đọc xong toàn bộ file.

270
00:12:25,760 --> 00:12:30,280
Lệnh này sẽ in ra
tất cả các dòng trong file.

271
00:12:30,280 --> 00:12:31,460
Cách làm là như vậy.

272
00:12:31,460 --> 00:12:39,420
3 dòng code này mở một file
rồi đọc tất cả các dòng trong file.

273
00:12:39,420 --> 00:12:43,080
Vậy file handle là một
loại dãy đặc biệt,

274
00:12:43,080 --> 00:12:45,340
cũng như một list số hay một chuỗi

275
00:12:45,340 --> 00:12:47,190
là một dãy các ký tự.

276
00:12:47,190 --> 00:12:49,830
Có một thao tác dùng cấu trúc đếm tổng

277
00:12:49,830 --> 00:12:53,360
đó là đếm số dòng trong một file.

278
00:12:53,360 --> 00:12:56,990
Cách làm như sau: mở file ra,

279
00:12:56,990 --> 00:12:58,410
đặt biến count = 0, lần này tôi

280
00:12:58,410 --> 00:13:01,690
dùng tên biến gợi nhớ là count.
for line in fhand

281
00:13:01,690 --> 00:13:04,010
tức là chạy đoạn lùi vào này một lần

282
00:13:04,010 --> 00:13:06,540
với mỗi dòng trong file, 
cứ mỗi lần như vậy

283
00:13:06,540 --> 00:13:10,240
lại cộng thêm 1 vào count.
Khi vòng lặp for kết thúc,

284
00:13:10,240 --> 00:13:13,020
in biến count ra.

285
00:13:13,020 --> 00:13:15,850
Khá dễ hiểu,
rất ít ngôn ngữ lập trình

286
00:13:15,850 --> 00:13:18,000
có thể viết được chương trình này

287
00:13:18,000 --> 00:13:22,290
nhanh, gọn, đồng bộ như Python.

288
00:13:22,290 --> 00:13:25,100
Python thực hiện cái này rất tốt.

289
00:13:25,100 --> 00:13:28,130
Vậy đó là cách đếm số dòng.

290
00:13:28,130 --> 00:13:31,260
Mở file, viết vòng lặp for,
cộng 1 vào count.

291
00:13:31,260 --> 00:13:35,030
Từ đoạn này bạn có thể thấy

292
00:13:35,030 --> 00:13:40,620
ta không thể dùng hàm len(fhand).

293
00:13:40,620 --> 00:13:42,650
Bởi vì đây không phải dữ liệu thực sự.

294
00:13:42,650 --> 00:13:45,980
Ta phải lôi nó ra đọc để

295
00:13:45,980 --> 00:13:48,580
lấy được dữ liệu từ nó,
nhưng sau này ta sẽ học

296
00:13:48,580 --> 00:13:51,050
một cách khác để đọc nó.

297
00:13:51,050 --> 00:13:55,110
OK, đó là cách đếm số dòng trong một file.

298
00:13:55,110 --> 00:13:59,000
Và ta cũng có thể đọc toàn bộ file.

299
00:13:59,000 --> 00:14:02,110
Khi ta đọc toàn bộ file,
nó không được chia thành các dòng đâu.

300
00:14:02,110 --> 00:14:04,030
Bạn sẽ thấy toàn bộ các ký tự
được ngắt ra bởi

301
00:14:04,030 --> 00:14:06,350
các ký tự newline.

302
00:14:06,350 --> 00:14:09,360
Nếu file lớn quá thì bạn không nên đọc.

303
00:14:09,360 --> 00:14:12,750
Nó sẽ cố dùng bộ nhớ máy tính để đọc,

304
00:14:12,750 --> 00:14:14,205
nếu bộ nhớ không đủ lớn

305
00:14:14,205 --> 00:14:16,100
thì nó sẽ chạy vô cùng chậm.

306
00:14:16,100 --> 00:14:19,580
Nhưng file nhỏ xíu này thì đọc tốt.

307
00:14:19,580 --> 00:14:23,100
Ta mở file này ra,

308
00:14:23,100 --> 00:14:25,460
ta viết fhand.read()

309
00:14:25,460 --> 00:14:28,630
Nghĩa là ta ra lệnh cho fhand đọc cả file

310
00:14:28,630 --> 00:14:32,050
và trả kết quả là một chuỗi ký tự.

311
00:14:32,050 --> 00:14:34,730
Chuỗi đó bao gồm tất cả các dòng
của file nối liền nhau

312
00:14:34,730 --> 00:14:37,150
được ngắt bởi các ký tự newline,

313
00:14:37,150 --> 00:14:38,800
đấy chính là nội dung file.

314
00:14:38,800 --> 00:14:40,180
Nó là dữ liệu dạng thô.

315
00:14:40,180 --> 00:14:42,530
Vòng lặp for tìm các ký tự newline

316
00:14:42,530 --> 00:14:44,030
và tự động làm mọi thứ cho ta,

317
00:14:44,030 --> 00:14:46,400
rất tốt.

318
00:14:46,400 --> 00:14:49,410
Bởi vì bây giờ inp là dạng chuỗi,

319
00:14:49,410 --> 00:14:50,940
ta có thể in ra độ dài của nó.

320
00:14:50,940 --> 00:14:55,680
Ta biết được trong file này có

321
00:14:55,680 --> 00:14:56,780
94626 ký tự.

322
00:14:56,780 --> 00:15:02,010
Nó sẽ đọc toàn bộ file, toàn bộ luôn.

323
00:15:02,010 --> 00:15:04,380
Bây giờ ta cũng có thể cắt file ra,

324
00:15:04,380 --> 00:15:08,395
như ở đây là cắt 20 ký tự đầu tiên từ 0

325
00:15:08,395 --> 00:15:10,670
tính tới nhưng không bao gồm 20.

326
00:15:10,670 --> 00:15:12,630
File này là như vậy đấy.

327
00:15:12,630 --> 00:15:13,470
OK.

328
00:15:13,470 --> 00:15:15,660
Đó là đọc toàn bộ file.

329
00:15:15,660 --> 00:15:17,670
Tôi quay lại trang trước một chút.

330
00:15:17,670 --> 00:15:20,380
Đây là file mà ta sẽ

331
00:15:20,380 --> 00:15:23,550
sử dụng trong buổi học này,

332
00:15:23,550 --> 00:15:24,920
file hòm thư.

333
00:15:24,920 --> 00:15:27,170
Đây là dữ liệu thật,
tên người và ngày tháng

334
00:15:27,170 --> 00:15:29,586
đều thật, nó là một dự án nguồn mở

335
00:15:29,586 --> 00:15:31,815
tôi đã từng tham gia tên là Sakai.

336
00:15:31,815 --> 00:15:36,060
Ngay trên vai tôi có một
hình xăm Sakai đây này.

337
00:15:36,060 --> 00:15:39,330
Có khi buổi học sau tôi sẽ
mặc áo ngắn tay

338
00:15:39,330 --> 00:15:42,470
cho các bạn xem hình xăm.
Giờ thì tôi đang mặc áo này

339
00:15:42,470 --> 00:15:43,740
nên không được.

340
00:15:43,740 --> 00:15:52,020
Vậy đây là dữ liệu có thật, chính là file

341
00:15:52,020 --> 00:15:52,520
mbox.txt

342
00:15:52,520 --> 00:15:54,030
Đấy là file ta sẽ dùng

343
00:15:54,030 --> 00:15:56,300
trong hầu hết các bài tập tới đây.

344
00:15:56,300 --> 00:15:58,330
Các bạn sẽ dùng cái file ấy đến phát ngán,

345
00:15:58,330 --> 00:16:00,889
rồi các bạn sẽ đâm ra quen hết
mấy ông Steven với Chen Wen

346
00:16:00,889 --> 00:16:02,180
v.v. trong file đó.

347
00:16:02,180 --> 00:16:05,720

348
00:16:05,720 --> 00:16:10,480
Ta có thể tìm kiếm các dòng có tiền tố nào đó.

349
00:16:10,480 --> 00:16:14,390
Kiểu như cấu trúc tìm kiếm đã học trong bài vòng lặp.

350
00:16:14,390 --> 00:16:17,412
Ta sẽ duyệt qua một dãy các dòng trong file

351
00:16:17,412 --> 00:16:19,370
và chỉ in ra những dòng

352
00:16:19,370 --> 00:16:20,900
có một đoạn nào đó.

353
00:16:20,900 --> 00:16:22,636
Nhắc lại, ta mở file ra,

354
00:16:22,636 --> 00:16:24,510
viết vòng lặp for với nội dung:

355
00:16:24,510 --> 00:16:26,610
Với mỗi dòng trong file,

356
00:16:26,610 --> 00:16:30,460
ở đây ta gọi một hàm tiện ích

