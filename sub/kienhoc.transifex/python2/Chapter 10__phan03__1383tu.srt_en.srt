379
00:17:37,590 --> 00:17:41,140
https://youtu.be/odIMpHInDbA
So at the end of this
bit of code right here,

380
00:17:41,140 --> 00:17:48,260
we are going to have counts
with word count pairs.

381
00:17:48,260 --> 00:17:48,760
OK.

382
00:17:48,760 --> 00:17:51,700
So this is something
we've done before.

383
00:17:51,700 --> 00:17:55,580
It's just dictionaries,
reading, splitting, and then

384
00:17:55,580 --> 00:18:00,020
this pattern of how to
accumulate in a dictionary.

385
00:18:00,020 --> 00:18:02,100
Then what we're going
to do is we're going

386
00:18:02,100 --> 00:18:04,720
to make a new list called lst.

387
00:18:04,720 --> 00:18:07,150
And now, we're doing this
key value in the item.

388
00:18:07,150 --> 00:18:09,150
So this is going to go
through the key value

389
00:18:09,150 --> 00:18:12,430
pairs in this list,
which is the key value

390
00:18:12,430 --> 00:18:15,410
pairs from the dictionary.

391
00:18:15,410 --> 00:18:16,020
Right.

392
00:18:16,020 --> 00:18:19,570
But then we are going to create
this temporary list of tuples

393
00:18:19,570 --> 00:18:21,720
that are val,key.

394
00:18:21,720 --> 00:18:30,230
So val is like 20 the, 14 hello.

395
00:18:30,230 --> 00:18:32,550
And that's what the list
is going to look like.

396
00:18:32,550 --> 00:18:34,670
It's going to be tuples.

397
00:18:34,670 --> 00:18:37,980
But it's going to be the
value, and then the key

398
00:18:37,980 --> 00:18:39,610
rather than the
key and the value.

399
00:18:39,610 --> 00:18:42,240
This one here is key,value.

400
00:18:42,240 --> 00:18:46,520
This one here,
lst, is value key.

401
00:18:46,520 --> 00:18:53,582
Now that we have a
list that's value,key,

402
00:18:53,582 --> 00:18:54,790
we are just going to sort it.

403
00:18:54,790 --> 00:18:57,081
Because now it's going to
sort based on the first thing

404
00:18:57,081 --> 00:18:58,070
in that tuple.

405
00:18:58,070 --> 00:18:59,320
And we're going to reverse it.

406
00:18:59,320 --> 00:19:02,730
So the biggest values
are near the top.

407
00:19:02,730 --> 00:19:04,830
And so when we're
all done, this is

408
00:19:04,830 --> 00:19:06,760
going to be a list
except it's going to be

409
00:19:06,760 --> 00:19:09,270
sorted based on the value.

410
00:19:09,270 --> 00:19:11,500
So that's just one
step to sort it.

411
00:19:11,500 --> 00:19:13,490
So this is a good example
of how we sort of go

412
00:19:13,490 --> 00:19:14,240
through some work.

413
00:19:14,240 --> 00:19:17,330
We get a data structure, a
list, the way we want it.

414
00:19:17,330 --> 00:19:19,920
And now we can sort of
leverage the built-in sort.

415
00:19:19,920 --> 00:19:23,709
We had to prepare a list, so
we could use the built-in sort.

416
00:19:23,709 --> 00:19:24,750
We could do this by hand.

417
00:19:24,750 --> 00:19:26,708
But it would be very
difficult. But it's easier

418
00:19:26,708 --> 00:19:29,910
to say I think I'll make a
list, and then I'll sort it.

419
00:19:29,910 --> 00:19:30,410
OK.

420
00:19:30,410 --> 00:19:32,820
So I made two lists basically.

421
00:19:32,820 --> 00:19:34,130
I made the original one.

422
00:19:34,130 --> 00:19:36,970
Now I made this one just
for the purposes of sorting.

423
00:19:36,970 --> 00:19:40,350
And now what I'm going to
do to print out the top 10

424
00:19:40,350 --> 00:19:44,160
is I am going to write
a for loop, val key.

425
00:19:44,160 --> 00:19:47,910
Remember this list,
lst, is value key.

426
00:19:47,910 --> 00:19:53,890
And I'm going to say for val
key in list, using list slicing,

427
00:19:53,890 --> 00:19:56,390
starting at 0, up
to but not including

428
00:19:56,390 --> 00:20:00,460
10, which is indeed
the first 10 items.

429
00:20:00,460 --> 00:20:02,510
Now, I'm going to
print out key value.

430
00:20:02,510 --> 00:20:09,740
So it's going to be print
out the 22, Fred 16.

431
00:20:09,740 --> 00:20:11,670
It's only going to
print the first 10.

432
00:20:11,670 --> 00:20:14,200
So this list is
in val key order.

433
00:20:14,200 --> 00:20:15,427
The tuples are val key order.

434
00:20:15,427 --> 00:20:17,260
And so I'm going to
print it out in key val,

435
00:20:17,260 --> 00:20:21,070
just so that I print out in a
way that makes the most sense.

436
00:20:21,070 --> 00:20:24,370
And so this is a
simple way to do

437
00:20:24,370 --> 00:20:29,590
a simple histogram of the
occurrence of words in a file.

438
00:20:29,590 --> 00:20:32,970
So again, you should know this.

439
00:20:32,970 --> 00:20:36,178
You should know every line.

440
00:20:36,178 --> 00:20:37,760
You should know every line.

441
00:20:37,760 --> 00:20:39,920
Go back, review a couple times.

442
00:20:39,920 --> 00:20:43,150
But you should know the
meaning of every line of this.

443
00:20:43,150 --> 00:20:46,110
And if you do,
that's really good.

444
00:20:46,110 --> 00:20:53,470
So as you become more powerful
and capable inside Python,

445
00:20:53,470 --> 00:20:56,240
you will realize that there
are sometimes even shorter ways

446
00:20:56,240 --> 00:20:57,770
of doing things.

447
00:20:57,770 --> 00:21:00,200
Now what I'm showing
you here is not

448
00:21:00,200 --> 00:21:03,240
that different than what
was on the previous page.

449
00:21:03,240 --> 00:21:04,890
It's just really dense.

450
00:21:04,890 --> 00:21:07,370
But you have to concentrate.

451
00:21:07,370 --> 00:21:09,620
I want you understand what's
on that previous page.

452
00:21:09,620 --> 00:21:11,495
If you don't understand
this, don't feel bad.

453
00:21:11,495 --> 00:21:13,250
I'm going to explain it to you.

454
00:21:13,250 --> 00:21:15,140
But don't feel bad
if you don't get, OK?

455
00:21:15,140 --> 00:21:18,540
So I'm just going to explain it.

456
00:21:18,540 --> 00:21:20,450
If it doesn't feel
right to you, go back

457
00:21:20,450 --> 00:21:22,060
and look at the previous page.

458
00:21:22,060 --> 00:21:22,890
OK.

459
00:21:22,890 --> 00:21:24,310
So here we go.

460
00:21:24,310 --> 00:21:27,050
I'm going to have a dictionary.

461
00:21:27,050 --> 00:21:33,260
And then I'm going to print
in one line sorted by value.

462
00:21:33,260 --> 00:21:37,100
So we'll start from
the inside out.

463
00:21:37,100 --> 00:21:40,610
So this is a thing called
list comprehension.

464
00:21:40,610 --> 00:21:42,520
It looks like a list
constant, because we

465
00:21:42,520 --> 00:21:44,310
start with square brackets.

466
00:21:44,310 --> 00:21:50,050
But this is a Python syntax
that says construct dynamically

467
00:21:50,050 --> 00:21:55,240
a list of tuples v,k.

468
00:21:55,240 --> 00:21:58,900
And I would like you to loop
through the items with k and v

469
00:21:58,900 --> 00:22:01,980
taking on the successive values.

470
00:22:01,980 --> 00:22:05,120
So this is creating
that reversed list

471
00:22:05,120 --> 00:22:07,380
where value and
key are the order

472
00:22:07,380 --> 00:22:09,514
of the items in each tuple.

473
00:22:09,514 --> 00:22:10,680
And that's going to do that.

474
00:22:10,680 --> 00:22:12,330
So it's going to expand.

475
00:22:12,330 --> 00:22:13,694
It goes vazoo.

476
00:22:13,694 --> 00:22:14,360
It expands this.

477
00:22:14,360 --> 00:22:16,920
It makes a temporary
list right now.

478
00:22:16,920 --> 00:22:18,980
Now if you look on
the previous slide,

479
00:22:18,980 --> 00:22:21,460
we called that thing lst.

480
00:22:21,460 --> 00:22:23,670
But here, we don't
even call it lst.

481
00:22:23,670 --> 00:22:29,850
And then once we have the list
of tuples in value key order,

482
00:22:29,850 --> 00:22:34,020
then we simply take and
pass that into sorted.

483
00:22:34,020 --> 00:22:38,270
This is a function call,
the sorted function.

484
00:22:38,270 --> 00:22:39,450
Now, I'm not reversing it.

485
00:22:39,450 --> 00:22:43,520
But the print statement
prints out its ascending order

486
00:22:43,520 --> 00:22:47,480
of the value, 1, 10, 22.

487
00:22:47,480 --> 00:22:48,150
OK.

488
00:22:48,150 --> 00:22:51,460
So you can make these
more dense once you're

489
00:22:51,460 --> 00:22:54,220
a little more comfortable
with what's going on.

490
00:22:54,220 --> 00:22:57,430
It's sometimes easier
to construct something

491
00:22:57,430 --> 00:23:01,180
that seems to have steps, where
you can put a debug print here,

492
00:23:01,180 --> 00:23:04,010
you can put debug print here,
you can put a debug print here.

493
00:23:04,010 --> 00:23:06,270
And you kind of see
what's going on, right?

494
00:23:06,270 --> 00:23:08,320
Whereas, once you
really understand this,

495
00:23:08,320 --> 00:23:12,110
you can write some
more dense Python.

496
00:23:12,110 --> 00:23:15,042
When you understand
this, it's OK, right?

497
00:23:15,042 --> 00:23:17,250
So I'm not saying you're
supposed to understand this.

498
00:23:17,250 --> 00:23:18,833
But I just want to
point out that it's

499
00:23:18,833 --> 00:23:22,610
possible to do this
in a tighter fashion.

500
00:23:22,610 --> 00:23:29,640
So tuples are like lists, except
that you can't change them.

501
00:23:29,640 --> 00:23:31,370
You can't change lists.

502
00:23:31,370 --> 00:23:33,240
And you can compare them.

503
00:23:33,240 --> 00:23:34,630
You can sort them.

504
00:23:34,630 --> 00:23:36,180
You can sort lists of tuples.

505
00:23:36,180 --> 00:23:40,060
You can't sort within
the tuple itself.

506
00:23:40,060 --> 00:23:42,450
The two values on the
left-hand side of an assignment

507
00:23:42,450 --> 00:23:46,270
statement we can use sorted.

508
00:23:46,270 --> 00:23:49,290
And we played the sorting
dictionaries by key and value.

509
00:23:49,290 --> 00:23:53,690
So that's kind of the
end of this lecture.

510
00:23:53,690 --> 00:23:55,910
And so at this
point, I just want

511
00:23:55,910 --> 00:24:00,980
to congratulate you on making
it through the first 10

512
00:24:00,980 --> 00:24:02,350
chapters of the book.

513
00:24:02,350 --> 00:24:05,330
So I'll drink a
cup of tea to you.

514
00:24:05,330 --> 00:24:06,320
Here's your cup of tea.

515
00:24:06,320 --> 00:24:11,770
Here's my toast to you
in my Slytherin cup.

516
00:24:11,770 --> 00:24:16,200
And so it's time for
a graduation ceremony.

517
00:24:16,200 --> 00:24:18,410
So I'll give a little
graduation speech here

518
00:24:18,410 --> 00:24:20,740
with my graduation hat on.

519
00:24:20,740 --> 00:24:23,740
And this is my Slytherin wand.

520
00:24:23,740 --> 00:24:27,010
And so the reason I'm
congratulating you

521
00:24:27,010 --> 00:24:31,350
at the end of this chapter
is that at this point,

522
00:24:31,350 --> 00:24:39,040
you kind have know all the
fundamentals of programming.

523
00:24:39,040 --> 00:24:41,030
Programming really
comes down to what's

524
00:24:41,030 --> 00:24:43,920
called algorithms
and data structures.

525
00:24:43,920 --> 00:24:48,970
Sometimes we solve a problem
by a clever series of steps

526
00:24:48,970 --> 00:24:50,530
that we put together.

527
00:24:50,530 --> 00:24:53,830
And sometimes we solve a problem
by creating a clever data

528
00:24:53,830 --> 00:24:55,670
structure.

529
00:24:55,670 --> 00:24:59,260
And so the first few chapters
were about algorithm, steps,

530
00:24:59,260 --> 00:25:02,100
loops, functions,
very procedural,

531
00:25:02,100 --> 00:25:05,300
how you sort of create
these threads of stepping

532
00:25:05,300 --> 00:25:09,010
and do things a bunch of times
or skip around or whatever.

533
00:25:09,010 --> 00:25:11,330
And in the last three
chapters that we've covered,

534
00:25:11,330 --> 00:25:13,650
we're talking about
data structures.

535
00:25:13,650 --> 00:25:18,020
And programming power comes when
you combine algorithms and data

536
00:25:18,020 --> 00:25:19,880
structures.

537
00:25:19,880 --> 00:25:21,660
Now in the next
chapters, starting

538
00:25:21,660 --> 00:25:24,600
with chapter 11,
Regular Expressions,

539
00:25:24,600 --> 00:25:29,500
we're going to learn more clever
ways of doing the same thing.

540
00:25:29,500 --> 00:25:31,750
So you kind of know how
to do a lot of stuff now.

541
00:25:31,750 --> 00:25:34,520
From this point forward,
you'll say, oh boy,

542
00:25:34,520 --> 00:25:35,380
that's more clever.

543
00:25:35,380 --> 00:25:36,790
Or we'll use a database.

544
00:25:36,790 --> 00:25:38,230
Oh, that's more clever.

545
00:25:38,230 --> 00:25:40,490
But it's not
fundamentally different.

546
00:25:40,490 --> 00:25:46,210
And so that's why it's
important for you,

547
00:25:46,210 --> 00:25:49,770
before you leave this moment,
to understand everything

548
00:25:49,770 --> 00:25:53,880
that we've covered so far,
loops, functions, strings,

549
00:25:53,880 --> 00:25:58,825
files, tuples,
lists, dictionaries.

550
00:25:58,825 --> 00:26:00,450
Because they're kind
of the foundation.

551
00:26:00,450 --> 00:26:02,580
And everything else
will just kind of

552
00:26:02,580 --> 00:26:05,300
be a subtle refinement
slash improvement.

553
00:26:05,300 --> 00:26:09,570
So once you understand
that, you've kind of begun.

554
00:26:09,570 --> 00:26:11,080
You become a basic programmer.

555
00:26:11,080 --> 00:26:14,095
And I like, poof.

556
00:26:14,095 --> 00:26:18,877
I magically [INAUDIBLE] you
and turn you a Pythoneo.

557
00:26:18,877 --> 00:26:19,710
Something like that.

558
00:26:19,710 --> 00:26:20,210
OK.

559
00:26:20,210 --> 00:26:22,800
Enough with the Harry
Potter reference.

560
00:26:22,800 --> 00:26:25,780
Thank you for spending
all this time with me.

561
00:26:25,780 --> 00:26:29,760
If you've gotten this far,
I really appreciate it.

562
00:26:29,760 --> 00:26:32,350
And of course, it's
really just the beginning.

563
00:26:32,350 --> 00:26:35,580
But I hope that it has
been a good beginning.

564
00:26:35,580 --> 00:26:37,130
Thank you.

